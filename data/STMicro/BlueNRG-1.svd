<?xml version='1.0' encoding='utf-8'?>
<device xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="1.1" xsi:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_1_draft.xsd">
    <vendor>STMicroelectronics</vendor>
    <vendorID>ST</vendorID>
    <name>BlueNRG1</name>
    <series>BlueNRG1</series>
    <version>2.0.0</version>
    <description>ARM 32-bit Cortex-M0 Microcontroller based device, CPU clock up to 32MHz</description>
    <licenseText>License</licenseText>
    <cpu>
        <name>CM0</name>
        <revision>r0p0</revision>
        <endian>little</endian>
        <mpuPresent>false</mpuPresent>
        <fpuPresent>false</fpuPresent>
        <nvicPrioBits>2</nvicPrioBits>
        <vendorSystickConfig>false</vendorSystickConfig>
    </cpu>
    <addressUnitBits>8</addressUnitBits>
    <width>32</width>
    <size>32</size>
    <access>read-write</access>
    <resetValue>0x00000000</resetValue>
    <resetMask>0xFFFFFFFF</resetMask>
    <peripherals>
        <peripheral>
            <name>GPIO</name>
            <version>1.0</version>
            <description>GPIO Controller</description>
            <groupName>GPIO</groupName>
            <baseAddress>0x40000000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>GPIO</name>
                <description>GPIO bus interrupt</description>
                <value>0</value>
            </interrupt>
            <registers>
                <register>
                    <name>DATA</name>
                    <description>IO0 to IO14 data value.&lt;p&gt;Writing to a bit will drive the written value on the corresponding IO when it is configured in GPIO mode and the output direction. Reading a bit indicates the pin value&lt;/p&gt;</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>OEN</name>
                    <description>GPIO output enable register (1 bit per GPIO).&lt;ul&gt;&lt;li&gt;0: input mode.&lt;/li&gt;&lt;li&gt;1: output mode&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>PE</name>
                    <description>Pull enable (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: pull disabled.&lt;/li&gt;&lt;li&gt;1: pull enabled&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x08</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x03FFFFFF</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>DS</name>
                    <description>IO driver strength (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: 2mA.&lt;/li&gt;&lt;li&gt;1: 4 mA&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>IS</name>
                    <description>Interrupt sense register (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: edge detection.&lt;/li&gt;&lt;li&gt;1: level detection&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x10</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>IBE</name>
                    <description>Interrupt edge register (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: single edge.&lt;/li&gt;&lt;li&gt;1: both edges&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x14</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>IEV</name>
                    <description>Interrupt event register (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: falling edge or low level.&lt;/li&gt;&lt;li&gt;1: rising edge or high level&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x18</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>IE</name>
                    <description>Interrupt mask register (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: masked.&lt;/li&gt;&lt;li&gt;1: not masked&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>MIS</name>
                    <description>Masked interrupt status register (1 bit per IO)</description>
                    <addressOffset>0x24</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>IC</name>
                    <description>Interrupt clear register (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: no effect.&lt;/li&gt;&lt;li&gt;1: clear interrupt&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x28</addressOffset>
                    <size>32</size>
                    <access>write-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                    <modifiedWriteValues>oneToClear</modifiedWriteValues>
                </register>
                <register>
                    <name>MODE0</name>
                    <description>Select mode for IO0 to IO7.&lt;ul&gt;&lt;li&gt;000b: GPIO mode.&lt;/li&gt;&lt;li&gt;001b: Serial1 mode.&lt;/li&gt;&lt;li&gt;100b: Serial0 mode.&lt;/li&gt;&lt;li&gt;101b: Microphone/ADC mode.&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>IO0</name>
                            <description>IO0 mode</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>3</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>GPIO_MODE</name>
                                    <value>0x0</value>
                                    <description>GPIO mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SERIAL1_MODE</name>
                                    <value>0x1</value>
                                    <description>serial1 mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STANDALONE_MODE</name>
                                    <value>0x2</value>
                                    <description>standalone mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BLUE_MODE</name>
                                    <value>0x3</value>
                                    <description>BLE mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SERIAL0_MODE</name>
                                    <value>0x4</value>
                                    <description>serial0 mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MICROPHONE_ADC_MODE</name>
                                    <value>0x5</value>
                                    <description>ADC mode for microphone</description>
                                </enumeratedValue>
                            </enumeratedValues>                            
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO1</name>
                            <description>IO1 mode</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO2</name>
                            <description>IO2 mode</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO3</name>
                            <description>IO3 mode</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO4</name>
                            <description>IO4 mode</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO5</name>
                            <description>IO5 mode</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO6</name>
                            <description>IO6 mode</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO0">
                            <name>IO7</name>
                            <description>IO7 mode</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MODE1</name>
                    <description>Select mode for IO8 to IO14.&lt;ul&gt;&lt;li&gt;000b: GPIO mode.&lt;/li&gt;&lt;li&gt;001b: Serial1 mode.&lt;/li&gt;&lt;li&gt;100b: Serial0 mode.&lt;/li&gt;&lt;li&gt;101b: Microphone/ADC mode.&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x30</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000110</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>IO8</name>
                            <description>IO8 mode</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>3</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>GPIO_MODE</name>
                                    <value>0x0</value>
                                    <description>GPIO mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SERIAL1_MODE</name>
                                    <value>0x1</value>
                                    <description>serial1 mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STANDALONE_MODE</name>
                                    <value>0x2</value>
                                    <description>standalone mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BLUE_MODE</name>
                                    <value>0x3</value>
                                    <description>BLE mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SERIAL0_MODE</name>
                                    <value>0x4</value>
                                    <description>serial0 mode</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MICROPHONE_ADC_MODE</name>
                                    <value>0x5</value>
                                    <description>ADC mode for microphone</description>
                                </enumeratedValue>
                            </enumeratedValues>                       
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO9</name>
                            <description>IO9 mode</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO10</name>
                            <description>IO10 mode</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO11</name>
                            <description>IO11 mode</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO12</name>
                            <description>IO12 mode</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO13</name>
                            <description>IO13 mode</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field derivedFrom="IO8">
                            <name>IO14</name>
                            <description>IO14 mode</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        </fields>
                </register>
                <register>
                    <name>DATS</name>
                    <description>Set some bits of DATA when in GPIO mode without affecting the others (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: no effect.&lt;/li&gt;&lt;li&gt;1: set at 1 the bit&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x3C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>DATC</name>
                    <description>Clear some bits of DATA when in GPIO mode without affecting the others (1 bit per IO).&lt;ul&gt;&lt;li&gt;0: no effect.&lt;/li&gt;&lt;li&gt;1: clear at 0 the bit&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x40</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                </register>
                <register>
                    <name>MFTX</name>
                    <description>Select the IO to be used as capture input for the MFTX timers</description>
                    <addressOffset>0x44</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>MFT1_TIMER_A</name>
                            <description>MFT1 timer A.&lt;ul&gt;&lt;li&gt;0x00: IO0.&lt;/li&gt;&lt;li&gt;0x01: IO1&lt;/li&gt;&lt;li&gt;0x02: IO2&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x0E: IO14&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IO0</name>
                                    <value>0x0</value>
                                    <description>IO0</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO1</name>
                                    <value>0x1</value>
                                    <description>IO1</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO2</name>
                                    <value>0x2</value>
                                    <description>IO2</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO3</name>
                                    <value>0x3</value>
                                    <description>IO3</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO4</name>
                                    <value>0x4</value>
                                    <description>IO4</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO5</name>
                                    <value>0x5</value>
                                    <description>IO5</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO6</name>
                                    <value>0x6</value>
                                    <description>IO6</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO7</name>
                                    <value>0x7</value>
                                    <description>IO7</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO8</name>
                                    <value>0x8</value>
                                    <description>IO8</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO9</name>
                                    <value>0x9</value>
                                    <description>IO9</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO10</name>
                                    <value>0xA</value>
                                    <description>IO10</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO11</name>
                                    <value>0xB</value>
                                    <description>IO11</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO12</name>
                                    <value>0xC</value>
                                    <description>IO12</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO13</name>
                                    <value>0xD</value>
                                    <description>IO13</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO14</name>
                                    <value>0xE</value>
                                    <description>IO14</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO15</name>
                                    <value>0xF</value>
                                    <description>IO15</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO16</name>
                                    <value>0x10</value>
                                    <description>IO16</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO17</name>
                                    <value>0x11</value>
                                    <description>IO17</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO18</name>
                                    <value>0x12</value>
                                    <description>IO18</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO19</name>
                                    <value>0x13</value>
                                    <description>IO19</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO20</name>
                                    <value>0x14</value>
                                    <description>IO20</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO21</name>
                                    <value>0x15</value>
                                    <description>IO21</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO22</name>
                                    <value>0x16</value>
                                    <description>IO22</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO23</name>
                                    <value>0x17</value>
                                    <description>IO23</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO24</name>
                                    <value>0x18</value>
                                    <description>IO24</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IO25</name>
                                    <value>0x19</value>
                                    <description>IO25</description>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="MFT1_TIMER_A">
                            <name>MFT1_TIMER_B</name>
                            <description>MFT1 timer B.&lt;ul&gt;&lt;li&gt;0x00: IO0.&lt;/li&gt;&lt;li&gt;0x01: IO1&lt;/li&gt;&lt;li&gt;0x02: IO2&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x0E: IO14&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                        </field>
                        <field derivedFrom="MFT1_TIMER_A">
                            <name>MFT2_TIMER_A</name>
                            <description>MFT2 timer A.&lt;ul&gt;&lt;li&gt;0x00: IO0.&lt;/li&gt;&lt;li&gt;0x01: IO1&lt;/li&gt;&lt;li&gt;0x02: IO2&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x0E: IO14&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                        </field>
                        <field derivedFrom="MFT1_TIMER_A">
                            <name>MFT2_TIMER_B</name>
                            <description>MFT2 timer B.&lt;ul&gt;&lt;li&gt;0x00: IO0.&lt;/li&gt;&lt;li&gt;0x01: IO1&lt;/li&gt;&lt;li&gt;0x02: IO2&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x0E: IO14&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral>
            <name>FLASH</name>
            <version>1.0</version>
            <description>Flash Controller</description>
            <groupName>Flash</groupName>
            <baseAddress>0x40100000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>NVM</name>
                <description>Non-volatile memory (Flash) controller interrupt</description>
                <value>1</value>
            </interrupt>
            <registers>
                <register>
                    <name>COMMAND</name>
                    <description>Commands for the module</description>
                    <addressOffset>0x00</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>CONFIG</name>
                    <description>Configure the wrapper</description>
                    <addressOffset>0x04</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>IRQSTAT</name>
                    <description>Flash status interrupt (masked)</description>
                    <addressOffset>0x08</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CMDDONE</name>
                            <description>Command is done.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_PENDING</name>
                                    <description>Irq pending</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_NOT_PENDING</name>
                                    <description>Irq not pending</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDSTART</name>
                            <description>Command is started.</description>
                            <bitOffset>1</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDERR</name>
                            <description>Command written while BUSY</description>
                            <bitOffset>2</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>ILLCMD</name>
                            <description>Illegal command written</description>
                            <bitOffset>3</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>READOK</name>
                            <description>Mass read was OK.</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>FLNREADY</name>
                            <description>Flash not ready (sleep).</description>
                            <bitOffset>5</bitOffset>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IRQMASK</name>
                    <description>Mask for interrupts</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x003F</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CMDDONE</name>
                            <description>Command is done.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_PENDING</name>
                                    <description>Irq pending</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_NOT_PENDING</name>
                                    <description>Irq not pending</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDSTART</name>
                            <description>Command is started.</description>
                            <bitOffset>1</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDERR</name>
                            <description>Command written while BUSY</description>
                            <bitOffset>2</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>ILLCMD</name>
                            <description>Illegal command written</description>
                            <bitOffset>3</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>READOK</name>
                            <description>Mass read was OK.</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>FLNREADY</name>
                            <description>Flash not ready (sleep).</description>
                            <bitOffset>5</bitOffset>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IRQRAW</name>
                    <description>Status interrupts (unmasked)</description>
                    <addressOffset>0x10</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CMDDONE</name>
                            <description>Command is done.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_PENDING</name>
                                    <description>Irq pending</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_NOT_PENDING</name>
                                    <description>Irq not pending</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDSTART</name>
                            <description>Command is started.</description>
                            <bitOffset>1</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>CMDERR</name>
                            <description>Command written while BUSY</description>
                            <bitOffset>2</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>ILLCMD</name>
                            <description>Illegal command written</description>
                            <bitOffset>3</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>READOK</name>
                            <description>Mass read was OK.</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="CMDDONE">
                            <name>FLNREADY</name>
                            <description>Flash not ready (sleep).</description>
                            <bitOffset>5</bitOffset>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>SIZE</name>
                    <description>Indicates the last usable address of the main Flash</description>
                    <addressOffset>0x14</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>ADDRESS</name>
                    <description>Address for programming Flash, will auto-increment</description>
                    <addressOffset>0x18</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>LFSRVAL</name>
                    <description>LFSR register needed for check after MASS READ command</description>
                    <addressOffset>0x24</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TIMETRIM1</name>
                    <description>Trimming values for Flash erase/modify sequences</description>
                    <addressOffset>0x28</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x0B061515</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TIMETRIM2</name>
                    <description>Trimming values for Flash erase/modify sequences</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x0B156506</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TIMETRIM3</name>
                    <description>Trimming values for Flash wake-up sequence</description>
                    <addressOffset>0x30</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000011</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>DATA0</name>
                    <description>Program cycle data</description>
                    <addressOffset>0x40</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>DATA1</name>
                    <description>Program cycle data</description>
                    <addressOffset>0x44</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>DATA2</name>
                    <description>Program cycle data</description>
                    <addressOffset>0x48</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>DATA3</name>
                    <description>Program cycle data</description>
                    <addressOffset>0x4C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>SYSTEM_CTRL</name>
            <version>1.0</version>
            <description>System controller</description>
            <groupName>SYSTEM_CONTROLLER</groupName>
            <baseAddress>0x40200000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>WKP_IO_IS</name>
                    <description>Level selection for wakeup IO (1 bit for IO) IO[13:9].&lt;ul&gt;&lt;li&gt;0: The system wakes up when IO is low.&lt;/li&gt;&lt;li&gt;1: The system wakes up when IO is high.&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x00</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x1F</resetMask>
                </register>
                <register>
                    <name>WKP_IO_IE</name>
                    <description>Enables the IO that wakes up the device (1 bit for IO) IO[13:9].&lt;ul&gt;&lt;li&gt;0: The wakes up feature on the IO is disabled.&lt;/li&gt;&lt;li&gt;1: The wakes up feature on the IO is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x04</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x07</resetValue>
                    <resetMask>0x1F</resetMask>
                </register>
                <register>
                    <name>CTRL</name>
                    <description>XO frequency indication to provide by the application</description>
                    <addressOffset>0x08</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x01</resetMask>
                    <fields>
                        <field>
                            <name>MHZ32_SEL</name>
                            <description>Indicates the crystal frequency used in the application.&lt;ul&gt;&lt;li&gt;0: The 16 MHz is selected.&lt;/li&gt;&lt;li&gt;1: The 32 MHz is selected.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MHz16</name>
                                    <value>0</value>
                                    <description>16 MHz is selected</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MHz32</name>
                                    <description>32 MHz is selected</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral>
            <name>UART</name>
            <version>r1p5</version>
            <description>UART</description>
            <groupName>UART</groupName>
            <baseAddress>0x40300000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>UART</name>
                <description>UART interrupt</description>
                <value>4</value>
            </interrupt>
            <registers>
                <register>
                    <name>DR</name>
                    <description>Data Register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x0FFF</resetMask>
                    <fields>
                        <field>
                            <name>DATA</name>
                            <description>UART data register: &lt;ul&gt;&lt;li&gt;Receive: read data character.&lt;/li&gt;&lt;li&gt;Transmit: write data character.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>FE</name>
                            <description>Frame error. This bit is set to 1 if the received character did not have a valid stop bit. In FIFO mode, this error is associated with the character at the top of the FIFO.</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>PE</name>
                            <description>Parity error. This bit is set to 1 if the parity of the received data character does not match the parity selected as defined by bits 2 and 7 of the LCRH_RX register. In FIFO mode, this error is associated with the character at the top of the FIFO.</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>BE</name>
                            <description>Break error. This bit is set to 1 if a break condition was detected, indicating that the received data input was held low for longer than a full-word transmission time (defined as start, data, parity and stop bits). In FIFO mode, this error is associated with the character at the top of the FIFO. When a break occurs, only one 0 character is loaded into the FIFO. The next character is only enabled after the receive data input goes to HIGH (marking state), and the next valid start bit is received</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>OE</name>
                            <description>Overrun error. This bit is set to 1 if data is received and the receive FIFO is already full. This is cleared to 0b once there is an empty space in the FIFO and a new character can be written to it. The FIFO content remains valid since no further data is written when the FIFO is full, only the content of the shift register is overwritten.</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RSR</name>
                    <description>Receive Status Register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000000F</resetMask>
                    <fields>
                        <field>
                            <name>FE</name>
                            <description>Frame error. This bit is set to 1 if the received character did not have a valid stop bit (a valid stop bit is 1).This bit is cleared to 0b after a write to ECR. In FIFO mode, this error is associated with the character at the top of the FIFO.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>PE</name>
                            <description>Parity error. This bit is set to 1 if the parity of the received data character does not match the parity selected as defined by bits 2 and 7 of the LCRH_RX register.This bit is cleared to 0b after a write to ECR. In FIFO mode, this error is associated with the character at the top of the FIFO.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>BE</name>
                            <description>Break error. This bit is set to 1 if a break condition was detected, indicating that the received data input was held low for longer than a full-word transmission time (defined as start, data, parity and stop bits). This bit is cleared to 0b after a write to ECR. In FIFO mode, this error is associated with the character at the top of the FIFO. When a break occurs, only one 0 character is loaded into the FIFO. The next character is only enabled after the receive data input goes to HIGH (marking state), and the next valid start bit is received.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>OE</name>
                            <description>Overrun error. This bit is set to 1 if data is received and the receive FIFO is already full. This is cleared to 0 by a write to ECR (data value is not important). The FIFO contents remain valid since no further data is written when the FIFO is full, only the content of the shift register are overwritten. The CPU or DMA must now read the data in order to empty the FIFO.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ECR</name>
                    <description>Error Clear Register. A write to this register clears the framing (FE), parity (PE), break (BE), and overrun (OE) errors.</description>
                    <alternateRegister>RSR</alternateRegister>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                </register>
                <register>
                    <name>TIMEOUT</name>
                    <description>Timeout Register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x000001FF</resetValue>
                    <resetMask>0x003FFFFF</resetMask>
                    <fields>
                        <field>
                            <name>PERIOD</name>
                            <description>Timeout period configuration. This bit field contains the timeout period for the UART timeout interrupt assertion. The receive timeout interrupt is asserted when the receive FIFO is not empty and no further data is received over a programmed timeout period. The duration before the timeout interrupt will assert is calculated by the following formula:&lt;p&gt;Timeout_Duration = (TIMEOUT_PERIOD) / (OVSP * Baud_Rate)&lt;/p&gt;or&lt;p&gt;Timeout_Duration = (TIMEOUT_PERIOD) * Baud_Divisor * Tuartclk&lt;/p&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>22</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>FR</name>
                    <description>Flag Register</description>
                    <addressOffset>0x18</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x1E90</resetValue>
                    <resetMask>0x3FFF</resetMask>
                    <fields>
                        <field>
                            <name>CTS</name>
                            <description>Clear to send.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BUSY</name>
                            <description>UART Busy. If this bit is set to 1, the UART is busy transmitting data. This bit remains set until the complete byte, including all the stop bits, has been sent from the shift register. However, if the transmit section of the UART is disabled in the middle of a transmission, the BUSY bit gets cleared. This bit is set again once the transmit section is re-enabled to complete the remaining transmission.This bit is set as soon as the transmit FIFO becomes nonempty (regardless of whether the UART is enabled or not).</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFE</name>
                            <description>Receive FIFO empty. If the FIFO is disabled (bit FEN = 0b), this bit is set when the receive holding register is empty. If the FIFO is enabled (FEN = 1b), the RXFE bit is set when the receive FIFO is empty.</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFF</name>
                            <description>Transmit FIFO full. If the FIFO is disabled (bit FEN = 0b), this bit is set when the transmit holding register is full. If the FIFO is enabled (FEN = 1b), the TXFF bit is set when the transmit FIFO is full.</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFF</name>
                            <description>Receive FIFO full. If the FIFO is disabled (bit FEN = 0b), this bit is set when the receive holding register is full. If the FIFO is enabled (FEN = 1b), the RXFF bit is set when the receive FIFO is full.</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFE</name>
                            <description>Transmit FIFO empty. If the FIFO is disabled (bit FEN = 0b), this bit is set when the transmit holding register is empty. If the FIFO is enabled (FEN = 1b), the TXFE bit is set when the transmit FIFO is empty.</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>DCTS</name>
                            <description>Delta Clear To Send. This bit is set CTS changes since the last read of the FR register.</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RTXDIS</name>
                            <description>Remote Transmitter Disabled (software flow control). This bit indicates an Xoff character was sent to the remote transmitter to stop it after the received FIFO has passed over its trigger limit. This bit is cleared when a Xon character is sent to the remote transmitter.</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>LCRH_RX</name>
                    <description>Receive Line Control Register</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFE</resetMask>
                    <fields>
                        <field>
                            <name>PEN_RX</name>
                            <description>RX parity enable:&lt;ul&gt;&lt;li&gt;0: Parity disabled.&lt;/li&gt;&lt;li&gt;1: Parity enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>PARITY_ENABLE</name>
                                    <description>Parity Enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>PARITY_DISABLE</name>
                                    <description>Parity Disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>EPS_RX</name>
                            <description>RX even parity selection, when the parity is enabled.&lt;ul&gt;&lt;li&gt;0: Odd parity generation and checking is performed during reception, which check for an odd number of 1s in data and parity bits.&lt;/li&gt;&lt;li&gt;1: Even parity generation and checking is performed during reception, which check for an even number of 1s in data and parity bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ODD</name>
                                    <description>Odd parity generation and checking is performed during reception, which check for an odd number of 1s in data and parity bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>EVEN</name>
                                    <description>Even parity generation and checking is performed during reception, which check for an even number of 1s in data and parity bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>STP2_RX</name>
                            <description>RX two stop bits select. This bit enables the check for two stop bits being received:&lt;ul&gt;&lt;li&gt;0: 1 stop bit received.&lt;/li&gt;&lt;li&gt;1: 2 stop bits received.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STOP_BIT1</name>
                                    <description>1 stop bit received</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STOP_BITS2</name>
                                    <description>2 stop bits received</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FEN_RX</name>
                            <description>RX enable FIFOs. This bit enables/disables the receive RX FIFO buffer:&lt;ul&gt;&lt;li&gt;0: RX FIFO is disabled (character mode).&lt;/li&gt;&lt;li&gt;1: RX FIFO is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RXFIFO_DISABLED</name>
                                    <description>RX FIFO is disabled</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_ENABLED</name>
                                    <description>RX FIFO is enabled</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>WLEN_RX</name>
                            <description>RX Word length. This bit field indicates the number of data bits received in a frame as follows:&lt;ul&gt;&lt;li&gt;00b: 5 bits.&lt;/li&gt;&lt;li&gt;01b: 6 bits.&lt;/li&gt;&lt;li&gt;10b: 7 bits.&lt;/li&gt;&lt;li&gt;11b: 8 bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>BIT5</name>
                                    <description>5 bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT6</name>
                                    <description>6 bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT7</name>
                                    <description>7 bits</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT8</name>
                                    <description>8 bits</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SPS_RX</name>
                            <description>RX stick parity select:&lt;ul&gt;&lt;li&gt;0: stick parity is disabled.&lt;/li&gt;&lt;li&gt;1: when PEN_RX = 1b (parity enabled) and EPS_RX = 1b (even parity), the parity is checked as a 0. When PEN_RX = 1b and EPS_RX = 0b (odd parity), the parity bit is checked as a 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STICK_PARITY_DISABLE</name>
                                    <description>stick parity disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STICK_PARITY_ENABLE</name>
                                    <description>stick parity enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IBRD</name>
                    <description>Integer Baud Rate Register</description>
                    <addressOffset>0x24</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>DIVINT</name>
                            <description>Baud rate integer. The baud rate divisor is calculated as follows:&lt;p&gt;When OVSFACT = 0b in the CR register: Baud rate divisor = (Frequency (UARTCLK)/(16*Baud rate))&lt;/p&gt;&lt;p&gt;When OVSFACT = 1b in CR register: Baud rate divisor = (Frequency (UARTCLK)/(8*Baud rate))&lt;/p&gt;where Frequency (UARTCLK) is the UART reference clock frequency. The baud rate divisor comprises the integer value (DIVINT) and the fractional value (DIVFRAC). The contents of the IBRD and FBRD registers are not updated until transmission or reception of the current character has completed.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>16</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>FBRD</name>
                    <description>Fractional Baud Rate Register</description>
                    <addressOffset>0x28</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>DIVFRAC</name>
                            <description>Baud rate fraction. Baud rate integer. The baud rate divisor is calculated as follows:&lt;p&gt;When OVSFACT = 0b in the CR register: Baud rate divisor = (Frequency (UARTCLK)/(16*Baud rate))&lt;/p&gt;&lt;p&gt;When OVSFACT = 1b in CR register: Baud rate divisor = (Frequency (UARTCLK)/(8*Baud rate))&lt;/p&gt;where Frequency (UARTCLK) is the UART reference clock frequency. The baud rate divisor comprises the integer value (DIVINT) and the fractional value (DIVFRAC). The contents of the IBRD and FBRD registers are not updated until transmission or reception of the current character has completed.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>LCRH_TX</name>
                    <description>Transmit Line Control Register</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>BRK</name>
                            <description>Send break. This bit allows a continuous low-level to be forced on TX output, after completion of the current character. This bit must be asserted for at least one complete frame transmission time in order to generate a break condition. The transmit FIFO contents remain unaffected during a break condition.&lt;ul&gt;&lt;li&gt;0: Normal transmission.&lt;/li&gt;&lt;li&gt;1: Break condition transmission.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TX_NORMAL</name>
                                    <description>Normal transmission</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TX_BREAK_CONDITION</name>
                                    <description>Break condition transmission</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>PEN_TX</name>
                            <description>TX parity enable:&lt;ul&gt;&lt;li&gt;0: Parity disabled.&lt;/li&gt;&lt;li&gt;1: Parity Enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>PARITY_ENABLE</name>
                                    <description>Parity Enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>PARITY_DISABLE</name>
                                    <description>Parity Disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>EPS_TX</name>
                            <description>TX even parity select. This bit selects the parity generation, when the parity is enabled (PEN_TX =1b). This bit has no effect when parity is disabled (PEN_TX = 0b).&lt;ul&gt;&lt;li&gt;0: Odd parity generation and checking is performed during transmission, which check for an odd number of 1s in data and parity bits.&lt;/li&gt;&lt;li&gt;1: Even parity generation and checking is performed during transmission, which check for an even number of 1s in data and parity bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ODD</name>
                                    <description>Odd parity generation and checking is performed during transmission, which check for an odd number of 1s in data and parity bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>EVEN</name>
                                    <description>Even parity generation and checking is performed during transmission, which check for an even number of 1s in data and parity bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>STP2_TX</name>
                            <description>TX two stop bits select. This bit enables the check for two stop bits being received:&lt;ul&gt;&lt;li&gt;0: 1 stop bit received.&lt;/li&gt;&lt;li&gt;1: 2 stop bits received.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STOP_BIT1</name>
                                    <description>1 stop bit received</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STOP_BITS2</name>
                                    <description>2 stop bits received</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FEN_TX</name>
                            <description>TX Enable FIFO. This bit enables/disables the transmit TX FIFO buffer:&lt;ul&gt;&lt;li&gt;0: TX FIFO is disabled (character mode), i.e. the TX FIFO becomes a 1-byte deep holding register.&lt;/li&gt;&lt;li&gt;1: TX FIFO is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TXFIFO_DISABLED</name>
                                    <description>TX FIFO is disabled</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_ENABLED</name>
                                    <description>TX FIFO is enabled</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>WLEN_TX</name>
                            <description>TX word length. This bit field indicates the number of data bits transmitted in a frame as follows:&lt;ul&gt;&lt;li&gt;00b: 5 bits.&lt;/li&gt;&lt;li&gt;01b: 6 bits.&lt;/li&gt;&lt;li&gt;10b: 7 bits.&lt;/li&gt;&lt;li&gt;11b: 8 bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>BIT5</name>
                                    <description>5 bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT6</name>
                                    <description>6 bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT7</name>
                                    <description>7 bits</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT8</name>
                                    <description>8 bits</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SPS_TX</name>
                            <description>TX Stick parity check:&lt;ul&gt;&lt;li&gt;0: stick parity disable.&lt;/li&gt;&lt;li&gt;1: when PEN_TX = 1b (parity enabled) and EPS_TX = 1b (even parity), the parity is transmitted as a 0. When PEN_TX = 1b and EPS_TX = 0b (odd parity), the parity bit is transmitted as a 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STICK_PARITY_DISABLE</name>
                                    <description>stick parity disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>STICK_PARITY_ENABLE</name>
                                    <description>stick parity enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CR</name>
                    <description>Control Register</description>
                    <addressOffset>0x30</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00040300</resetValue>
                    <resetMask>0x000FFF87</resetMask>
                    <fields>
                        <field>
                            <name>UARTEN</name>
                            <description>UART enable. This bit enables the UART.&lt;ul&gt;&lt;li&gt;0: UART is disabled.&lt;/li&gt;&lt;li&gt;1: UART is enabled. Data transmission and reception can occur. When the UART is disabled in the middle of transmission or reception, it completes the current character before stopping.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Enable the UART</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Disable the UART</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>OVSFACT</name>
                            <description>UART oversampling factor.This bit enables the UART oversampling factor. If UARTCLK is 16 MHz thus max. baud-rate is 1 Mbaud when OVSFACT = 0b, and 2 Mbaud when OVSFACT = 1b.&lt;ul&gt;&lt;li&gt;0: UART it is 16 UARTCLK clock cycles.&lt;/li&gt;&lt;li&gt;1: UART it is 8 UARTCLK clock cycles.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>Cycles_16</name>
                                    <description>16 UARTCLK clock cycles</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>Cycles_8</name>
                                    <description>8 UARTCLK clock cycles</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TXE</name>
                            <description>Transmit enable.&lt;ul&gt;&lt;li&gt;0b: UART TX disabled.&lt;/li&gt;&lt;li&gt;1b: UART TX enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TX_ENABLE</name>
                                    <description>Enable the TX UART</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TX_DISABLE</name>
                                    <description>Disable the TX UART</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RXE</name>
                            <description>Receive enable.&lt;ul&gt;&lt;li&gt;0b: UART RX disabled.&lt;/li&gt;&lt;li&gt;1b: UART RX enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RX_ENABLE</name>
                                    <description>Enable the RX UART</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RX_DISABLE</name>
                                    <description>Disable the RX UART</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RTS</name>
                            <description>Request to send.&lt;ul&gt;&lt;li&gt;0: RTS is high.&lt;/li&gt;&lt;li&gt;1: RTS is low.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>REQUEST_TO_SEND_HIGH</name>
                                    <description>request to send high</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>REQUEST_TO_SEND_LOW</name>
                                    <description>request to send low</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RTSEN</name>
                            <description>RTS hardware flow control enable.&lt;ul&gt;&lt;li&gt;0b: RTS disabled.&lt;/li&gt;&lt;li&gt;1b: RTS enabled. Data is only requested when there is space in the receive FIFO for it to be received.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RTS_DISABLE</name>
                                    <description>RTS hardware flow control disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RTS_ENABLE</name>
                                    <description>RTS hardware flow control enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CTSEN</name>
                            <description>CTS hardware flow control enable.&lt;ul&gt;&lt;li&gt;0b: CTS disabled.&lt;/li&gt;&lt;li&gt;1b: CTS enabled. Data is only transmitted when the CTS is asserted.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>CTS_DISABLE</name>
                                    <description>CTS hardware flow control disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CTS_ENABLE</name>
                                    <description>CTS hardware flow control enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>STA_B_DURATION</name>
                            <description>START bit duration Receiver state. These bits can be used to configure the START bit duration (in clock cycles) to get the bit sampled in the middle of the UART receiver. These bits can be used only when using high baud rates (IBRD = 1, FBRD &gt;= 0 and OVSFACT = 1). Below the formula to calculate the START bit duration receiver state:&lt;p&gt;STA_B_DURATION = Integer(Fuartclk/(2* BAUD RATE)) - 1&lt;/p&gt;Example: when UARTCLK = 16 MHz and BAUD RATE = 2.0 Mbps then STA_B_DURATION = 4 - 1 = 3. STA_B_DURATION field should be configured with 4'b0011.</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>4</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IFLS</name>
                    <description>Interrupt FIFO level select register</description>
                    <addressOffset>0x34</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x12</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>TXIFLSEL</name>
                            <description>Transmit interrupt FIFO level select. This bit field selects the trigger points for TX FIFO interrupt:&lt;ul&gt;&lt;li&gt;000b: Interrupt when FIFO &gt;= 1/64 empty.&lt;/li&gt;&lt;li&gt;001b: Interrupt when FIFO &gt;= 1/32 empty.&lt;/li&gt;&lt;li&gt;010b: Interrupt when FIFO &gt;= 1/16 empty.&lt;/li&gt;&lt;li&gt;011b: Interrupt when FIFO &gt;= 1/8 empty.&lt;/li&gt;&lt;li&gt;100b: Interrupt when FIFO &gt;= 1/4 empty.&lt;/li&gt;&lt;li&gt;101b: Interrupt when FIFO &gt;= 1/2 empty.&lt;/li&gt;&lt;li&gt;110b: Interrupt when FIFO &gt;= 3/4 empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TXFIFO_1_64</name>
                                    <description>Interrupt when FIFO &gt;= 1/64 empty</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_1_32</name>
                                    <description>Interrupt when FIFO &gt;= 1/32 empty</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_1_16</name>
                                    <description>Interrupt when FIFO &gt;= 1/16 empty</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_1_8</name>
                                    <description>Interrupt when FIFO &gt;= 1/8 empty</description>
                                    <value>3</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_1_4</name>
                                    <description>Interrupt when FIFO &gt;= 1/4 empty</description>
                                    <value>4</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_1_2</name>
                                    <description>Interrupt when FIFO &gt;= 1/2 empty</description>
                                    <value>5</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TXFIFO_3_4</name>
                                    <description>Interrupt when FIFO &gt;= 3/4 empty</description>
                                    <value>6</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RXIFLSEL</name>
                            <description>Receive interrupt FIFO level select. This bit field selects the trigger points for RX FIFO interrupt:&lt;ul&gt;&lt;li&gt;000b: Interrupt when FIFO &gt;= 1/64 full.&lt;/li&gt;&lt;li&gt;001b: Interrupt when FIFO &gt;= 1/32 full.&lt;/li&gt;&lt;li&gt;010b: Interrupt when FIFO &gt;= 1/16 full.&lt;/li&gt;&lt;li&gt;011b: Interrupt when FIFO &gt;= 1/8 full.&lt;/li&gt;&lt;li&gt;100b: Interrupt when FIFO &gt;= 1/4 full.&lt;/li&gt;&lt;li&gt;101b: Interrupt when FIFO &gt;= 1/2 full.&lt;/li&gt;&lt;li&gt;110b: Interrupt when FIFO &gt;= 3/4 full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RXFIFO_1_64</name>
                                    <description>Interrupt when FIFO &gt;= 1/64 full</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_1_32</name>
                                    <description>Interrupt when FIFO &gt;= 1/32 full</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_1_16</name>
                                    <description>Interrupt when FIFO &gt;= 1/16 full</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_1_8</name>
                                    <description>Interrupt when FIFO &gt;= 1/8 full</description>
                                    <value>3</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_1_4</name>
                                    <description>Interrupt when FIFO &gt;= 1/4 full</description>
                                    <value>4</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_1_2</name>
                                    <description>Interrupt when FIFO &gt;= 1/2 full</description>
                                    <value>5</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RXFIFO_3_4</name>
                                    <description>Interrupt when FIFO &gt;= 3/4 full</description>
                                    <value>6</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IMSC</name>
                    <description>Interrupt Mask Set/Clear Register</description>
                    <addressOffset>0x38</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x1FFF</resetMask>
                    <fields>
                        <field>
                            <name>CTSMIM</name>
                            <description>Clear to send modem interrupt mask. On a read, the current mask for the CTSMIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SET_MASK</name>
                                    <description>set the interrupt mask</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CLEAR_MASK</name>
                                    <description>clear the interrupt mask</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>RXIM</name>
                            <description>Receive interrupt mask. On a read, the current mask for the RXIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>TXIM</name>
                            <description>Transmit interrupt mask. On a read, the current mask for the TXIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>RTIM</name>
                            <description>Receive timeout interrupt mask. On a read, the current mask for the RTIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>FEIM</name>
                            <description>Framing error interrupt mask. On a read, the current mask for the FEIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>PEIM</name>
                            <description>Parity error interrupt mask. On a read, the current mask for the PEIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>BEIM</name>
                            <description>Break error interrupt mask. On a read, the current mask for the BEIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>OEIM</name>
                            <description>Overrun error interrupt mask. On a read, the current mask for the OEIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>XOFFIM</name>
                            <description>XOFF interrupt mask. On a read, the current mask for the XOFFIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                        </field>
                        <field derivedFrom="CTSMIM">
                            <name>TXFEIM</name>
                            <description>TX FIFO empty interrupt mask. On a read, the current mask for the TXFEIM interrupt is returned.&lt;ul&gt;&lt;li&gt;0: Clears the mask (interrupt is disabled).&lt;/li&gt;&lt;li&gt;1: Sets the mask (interrupt is enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RIS</name>
                    <description>Raw Interrupt Status Register</description>
                    <addressOffset>0x3C</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x1FFF</resetMask>
                    <fields>
                        <field>
                            <name>CTSMIS</name>
                            <description>Clear to send interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>INTERRUPT_PENDING</name>
                                    <description>interrupt pending</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>INTERRUPT_NOT_PENDING</name>
                                    <description>interrupt not pending</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>RXIS</name>
                            <description>Receive interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>TXIM</name>
                            <description>Transmit interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>RTIS</name>
                            <description>Receive timeout interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>FEIS</name>
                            <description>Framing error interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>PEIS</name>
                            <description>Parity error interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>BEIS</name>
                            <description>Break error interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>OEIS</name>
                            <description>Overrun error interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>XOFFIS</name>
                            <description>XOFF interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMIS">
                            <name>TXFEIS</name>
                            <description>TX FIFO empty interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MIS</name>
                    <description>Masked Interrupt Status Register</description>
                    <addressOffset>0x40</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x1FFF</resetMask>
                    <fields>
                        <field>
                            <name>CTSMMIS</name>
                            <description>Clear to send masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>INTERRUPT_PENDING</name>
                                    <description>interrupt pending</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>INTERRUPT_NOT_PENDING</name>
                                    <description>interrupt not pending</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>RXMIS</name>
                            <description>Receive masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>TXMIS</name>
                            <description>Transmit masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>RTMIS</name>
                            <description>Receive timeout masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>FEMIS</name>
                            <description>Framing error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>PEMIS</name>
                            <description>Parity error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>BEMIS</name>
                            <description>Break error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>OEMIS</name>
                            <description>Overrun error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>XOFFMIS</name>
                            <description>XOFF interrupt masked status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="CTSMMIS">
                            <name>TXFEMIS</name>
                            <description>TX FIFO empty masked interrupt status.&lt;ul&gt;&lt;li&gt;0: The interrupt is not pending.&lt;/li&gt;&lt;li&gt;1: The interrupt is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ICR</name>
                    <description>Interrupt Clear Register</description>
                    <addressOffset>0x44</addressOffset>
                    <size>16</size>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x1FFF</resetMask>
                    <access>write-only</access>
                    <modifiedWriteValues>oneToClear</modifiedWriteValues>
                    <fields>
                        <field>
                            <name>CTSMIC</name>
                            <description>Clear to send modem interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXIC</name>
                            <description>Receive interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXIC</name>
                            <description>Transmit interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RTIC</name>
                            <description>Receive timeout interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>FEIC</name>
                            <description>Framing error interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>PEIC</name>
                            <description>Parity error interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BEIC</name>
                            <description>Break error interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>OEIC</name>
                            <description>Overrun error interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>XOFFIC</name>
                            <description>XOFF interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFEIC</name>
                            <description>TX FIFO empty interrupt clear.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DMACR</name>
                    <description>DMA control register</description>
                    <addressOffset>0x48</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x07</resetMask>
                    <fields>
                        <field>
                            <name>RXDMAE</name>
                            <description>Receive DMA enable bit.&lt;ul&gt;&lt;li&gt;0: DMA mode is disabled for reception.&lt;/li&gt;&lt;li&gt;1: DMA mode is enabled for reception.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DMA_MODE_RX_ENABLE</name>
                                    <description>DMA mode for reception enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DMA_MODE_RX_DISABLE</name>
                                    <description>DMA mode for reception disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TXDMAE</name>
                            <description>Transmit DMA enable bit.&lt;ul&gt;&lt;li&gt;0: DMA mode is disabled for transmit.&lt;/li&gt;&lt;li&gt;1: DMA mode is enabled for transmit.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DMA_MODE_TX_ENABLE</name>
                                    <description>DMA mode for transmission enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DMA_MODE_TX_DISABLE</name>
                                    <description>DMA mode for transmission disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DMAONERR</name>
                            <description>DMA on error.&lt;ul&gt;&lt;li&gt;0: UART error interrupt status has no impact in receive DMA mode.&lt;/li&gt;&lt;li&gt;1: DMA receive requests are disabled when the UART error interrupt is asserted.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DMA_ON_ERR_ENABLE</name>
                                    <description>DMA receive requests are disabled when the UART error interrupt is asserted</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DMA_ON_ERR_DISABLE</name>
                                    <description>UART error interrupt status has no impact in receive DMA mode</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>XFCR</name>
                    <description>XON/XOFF Control Register</description>
                    <addressOffset>0x50</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x7F</resetMask>
                    <fields>
                        <field>
                            <name>SFEN</name>
                            <description>Software flow control enable.&lt;ul&gt;&lt;li&gt;0: Software flow control disable.&lt;/li&gt;&lt;li&gt;1: software flow control enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SOFTWARE_FLOW_CTRL_ENABLE</name>
                                    <description>software flow ctrl enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SOFTWARE_FLOW_CTRL_DISABLE</name>
                                    <description>software flow ctrl disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SFRMOD</name>
                            <description>Software receive flow control mode:&lt;ul&gt;&lt;li&gt;00b: Receive flow control is disabled.&lt;/li&gt;&lt;li&gt;01b: Xon1, Xoff1 characters are used in receiving software flow control.&lt;/li&gt;&lt;li&gt;10b: Xon2, Xoff2 characters are used in receiving software flow control.&lt;/li&gt;&lt;li&gt;11b: Xon1 and Xon2, Xoff1 and Xoff2 characters are used in receiving software flow control.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SFR_MODE_DISABLE</name>
                                    <description>Receive flow control is disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON1_XOFF1</name>
                                    <description>Xon1, Xoff1 characters are used in receive software flow control</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON2_XOFF2</name>
                                    <description>Xon2, Xoff2 characters are used in receive software flow control</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON1_XON2_XOFF1_XOFF2</name>
                                    <description>Xon1 and Xon2, Xoff1 and Xoff2 characters are used in receive software flow control</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SFTMOD</name>
                            <description>Software transmit flow control mode:&lt;ul&gt;&lt;li&gt;00b: Transmit flow control is disabled.&lt;/li&gt;&lt;li&gt;01b: Xon1, Xoff1 characters are used in transmitting software flow control.&lt;/li&gt;&lt;li&gt;10b: Xon2, Xoff2 characters are used in transmitting software flow control.&lt;/li&gt;&lt;li&gt;11b: Xon1 and Xon2, Xoff1 and Xoff2 characters are used in transmitting software flow control.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SFR_MODE_DISABLE</name>
                                    <description>Transmit flow control is disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON1_XOFF1</name>
                                    <description>Xon1, Xoff1 characters are used in transmit software flow control</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON2_XOFF2</name>
                                    <description>Xon2, Xoff2 characters are used in transmit software flow control</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SFR_MODE_XON1_XON2_XOFF1_XOFF2</name>
                                    <description>Xon1 and Xon2, Xoff1 and Xoff2 characters are used in transmit software flow control</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>XONANY</name>
                            <description>Xon-any bit:&lt;ul&gt;&lt;li&gt;0: Incoming character must match Xon programmed value(s) to be a valid Xon.&lt;/li&gt;&lt;li&gt;1: Any incoming character is considered as a valid Xon.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>XONANY_ENABLE</name>
                                    <description>any incoming character is considered as a valid Xon</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>XONANY_DISABLE</name>
                                    <description>incoming character must match Xon programmed value(s) to be a valid Xon</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SPECHAR</name>
                            <description>Special character detection bit. &lt;ul&gt;&lt;li&gt;0: Special character detection disabled.&lt;/li&gt;&lt;li&gt;1: Special character detection enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SPECHAR_ENABLE</name>
                                    <description>special character detection enabled</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SPECHAR_DISABLE</name>
                                    <description>pecial character detection disabled</description>
                                    <value>0</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>XON1</name>
                    <description>Register used to store the Xon1 character used for software flow control</description>
                    <addressOffset>0x54</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>XON1</name>
                            <description>Value of Xon1 character used in the software flow control</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>XON2</name>
                    <description>Register used to store the Xon2 character used for software flow control</description>
                    <addressOffset>0x58</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>XON2</name>
                            <description>Value of Xon2 character used in the software flow control</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>XOFF1</name>
                    <description>Register used to store the Xoff1 character used for software flow control</description>
                    <addressOffset>0x5C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>XOFF1</name>
                            <description>Value of Xoff1 character used in the software flow control</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>XOFF2</name>
                    <description>Register used to store the Xoff2 character used for software flow control</description>
                    <addressOffset>0x60</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>XOFF2</name>
                            <description>Value of Xoff2 character used in the software flow control</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>SPI</name>
            <version>10</version>
            <description>Serial peripheral interface</description>
            <groupName>SPI</groupName>
            <baseAddress>0x40400000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>SPI</name>
                <description>SPI interrupt</description>
                <value>5</value>
            </interrupt>
            <registers>
                <register>
                    <name>CR0</name>
                    <description>Control Register 0</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x1C000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>DSS</name>
                            <description>Data size select. (DSS+1) defines the number of bits:&lt;ul&gt;&lt;li&gt;0x00: Reserved.&lt;/li&gt;&lt;li&gt;0x01: Reserved.&lt;/li&gt;&lt;li&gt;0x02: Reserved.&lt;/li&gt;&lt;li&gt;0x03: 4-bit data.&lt;/li&gt;&lt;li&gt;0x04: 5-bit data.&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x1F: 32-bit data.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>5</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DATA_4BIT</name>
                                    <description>4-bit data</description>
                                    <value>3</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_5BIT</name>
                                    <description>5-bit data</description>
                                    <value>4</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_6BIT</name>
                                    <description>6-bit data</description>
                                    <value>5</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_7BIT</name>
                                    <description>7-bit data</description>
                                    <value>6</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_8BIT</name>
                                    <description>8-bit data</description>
                                    <value>7</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_9BIT</name>
                                    <description>9-bit data</description>
                                    <value>8</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_10BIT</name>
                                    <description>10-bit data</description>
                                    <value>9</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_11BIT</name>
                                    <description>11-bit data</description>
                                    <value>10</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_12BIT</name>
                                    <description>12-bit data</description>
                                    <value>11</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_13BIT</name>
                                    <description>13-bit data</description>
                                    <value>12</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_14BIT</name>
                                    <description>14-bit data</description>
                                    <value>13</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_15BIT</name>
                                    <description>15-bit data</description>
                                    <value>14</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_16BIT</name>
                                    <description>16-bit data</description>
                                    <value>15</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_17BIT</name>
                                    <description>17-bit data</description>
                                    <value>16</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_18BIT</name>
                                    <description>18-bit data</description>
                                    <value>17</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_19BIT</name>
                                    <description>19-bit data</description>
                                    <value>18</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_20BIT</name>
                                    <description>20-bit data</description>
                                    <value>19</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_21BIT</name>
                                    <description>21-bit data</description>
                                    <value>20</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_22BIT</name>
                                    <description>22-bit data</description>
                                    <value>21</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_23BIT</name>
                                    <description>23-bit data</description>
                                    <value>22</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_24BIT</name>
                                    <description>24-bit data</description>
                                    <value>23</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_25BIT</name>
                                    <description>25-bit data</description>
                                    <value>24</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_26BIT</name>
                                    <description>26-bit data</description>
                                    <value>25</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_27BIT</name>
                                    <description>27-bit data</description>
                                    <value>26</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_28BIT</name>
                                    <description>28-bit data</description>
                                    <value>27</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_29BIT</name>
                                    <description>29-bit data</description>
                                    <value>28</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_30BIT</name>
                                    <description>30-bit data</description>
                                    <value>29</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_31BIT</name>
                                    <description>31-bit data</description>
                                    <value>30</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DATA_32BIT</name>
                                    <description>32-bit data</description>
                                    <value>31</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SPO</name>
                            <description>Clock polarity.&lt;ul&gt;&lt;li&gt;0: Steady state of clock polarity is low.&lt;/li&gt;&lt;li&gt;1: Steady state of clock polarity is high.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>INACTIVE_LOW</name>
                                    <description>The inactive or idle state of SSPCLKO is LOW</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>INACTIVE_HIGH</name>
                                    <description>The inactive or idle state of SSPCLKO is HIGH</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SPH</name>
                            <description>Clock phase.&lt;ul&gt;&lt;li&gt;0: Steady state of clock phase is low.&lt;/li&gt;&lt;li&gt;1: Steady state of clock phase is high.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>PHASE_0</name>
                                    <description>Received data is captured on the rising edge (SPO=0) or on the falling edge (SPO=1) of SSPCLKO. Transmitted data is sent on the falling edge (SPO=0) or on the rising edge (SPO=1) of SSPCLKO</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>PHASE_1</name>
                                    <description>Received data is captured on the falling edge (SPO=0) or on the rising edge (SPO=1) of SSPCLKO.Transmitted data is sent on the rising edge (SPO=0) or on the falling edge (SPO=1) of SSPCLKO</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SCR</name>
                            <description>Serial Clock Rate.&lt;p&gt;The SRC value is used to generate the transmit and receive bit rate of the SPI. The bit rate is: f_SPICLK / (CPSDVR * (1 + SCR)), where CPSDVR is an even value from 2 to 254 and SCR is a value from 0 to 255.&lt;/p&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                        <field>
                            <name>SPIM</name>
                            <description>SPI transmission mode.&lt;ul&gt;&lt;li&gt;00b: Full duplex mode.&lt;/li&gt;&lt;li&gt;01b: Transmit mode.&lt;/li&gt;&lt;li&gt;10b: Receive mode.&lt;/li&gt;&lt;li&gt;11b: Combined mode.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FULL_DUPLEX</name>
                                    <description>SPI is configured in full duplex mode</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TRANSMIT</name>
                                    <description>SPI is configured in transmit mode</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RECEIVE</name>
                                    <description>SPI is configured in receive mode</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>COMBINED</name>
                                    <description>SPI is configured in combined mode</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>INVCLK</name>
                            <description>Activate inversion (in master mode only).&lt;ul&gt;&lt;li&gt;0: Master samples the received data respecting the Motorola SPI protocol.&lt;/li&gt;&lt;li&gt;1: The sampling of the received data by master is delayed by half an SPI clock cycle..&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CS1</name>
                            <description>Chip Selection for slave one&lt;ul&gt;&lt;li&gt;0: the slave 1 is selected.&lt;/li&gt;&lt;li&gt;1: the slave 1 is not selected.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>26</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>CS1_NOT_SELECT</name>
                                    <description>Slave 1 is select</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CS1_SELECT</name>
                                    <description>Slave 1 is not select</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CR1</name>
                    <description>Control Register 1</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x07FFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>SSE</name>
                            <description>SPI enable.&lt;ul&gt;&lt;li&gt;0: SPI disable.&lt;/li&gt;&lt;li&gt;1: SPI enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>SSP operation disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>SSP operation enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MS</name>
                            <description>Master or slave mode select.&lt;ul&gt;&lt;li&gt;0: Master mode.&lt;/li&gt;&lt;li&gt;1: Slave mode.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MASTER</name>
                                    <description>Master mode</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SLAVE</name>
                                    <description>Slave mode</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SOD</name>
                            <description>Slave mode output disable (slave mode only).&lt;ul&gt;&lt;li&gt;0: SPI can drive the MISO signal in slave mode.&lt;/li&gt;&lt;li&gt;1: SPI must not drive the MISO signal in slave mode.&lt;/li&gt;&lt;/ul&gt;In multiple slave system, it is possible for a SPI master to broadcast a message to all slaves in the system while ensuring only one slave drives data onto the serial output line MISO.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RENDN</name>
                            <description>Receive endian format.&lt;ul&gt;&lt;li&gt;00b: The element is received MSByte-first and MSbit-first.&lt;/li&gt;&lt;li&gt;01b: The element is received LSByte-first and MSbit-first.&lt;/li&gt;&lt;li&gt;10b: The element is received MSByte-first and LSbit-first.&lt;/li&gt;&lt;li&gt;11b: The element is received LSByte-first and LSbit-first.&lt;/li&gt;&lt;/ul&gt;The cases 00b and 11b are set for data frame size from 4 to 32 bits. The cases 01b and 10b are set only for data frame size 16, 24 and 32 bits.</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MSB_FIRST_MSB_FIRST</name>
                                    <description>The element is received MSByte-first and MSbit-first</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>LSB_FIRST_MSB_FIRST</name>
                                    <description>The element is received LSByte-first and MSbit-first</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MSB_FIRST_LSB_FIRST</name>
                                    <description>The element is received MSByte-first and LSbit-first</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>LSB_FIRST_LSB_FIRST</name>
                                    <description>The element is received LSByte-first and LSbit-first</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RXIFLSEL</name>
                            <description>Receive interrupt FIFO level select. This bit field selects the trigger points to receive FIFO interrupt:&lt;ul&gt;&lt;li&gt;000b: RX FIFO contains 1 element or more.&lt;/li&gt;&lt;li&gt;001b: RX FIFO contains 4 elements or more.&lt;/li&gt;&lt;li&gt;010b: RX FIFO contains 8 elements or more.&lt;/li&gt;&lt;li&gt;Others: Reserved.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MIN_1ELEMENT</name>
                                    <description>Rx FIFO contains 1 element or more</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MIN_4ELEMENTS</name>
                                    <description>Rx FIFO contains 4 elements or more</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MIN_8ELEMENTS</name>
                                    <description>Rx FIFO contains 8 elements or more</description>
                                    <value>2</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TXIFLSEL</name>
                            <description>Transmit interrupt FIFO level select. This bit field selects the trigger points to transmit FIFO interrupt:&lt;ul&gt;&lt;li&gt;000b: TX FIFO contains 1 element or more.&lt;/li&gt;&lt;li&gt;001b: TX FIFO contains 4 elements or more.&lt;/li&gt;&lt;li&gt;010b: TX FIFO contains 8 elements or more.&lt;/li&gt;&lt;li&gt;Others: Reserved.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MIN_1ELEMENT</name>
                                    <description>Tx FIFO contains 1 element or more</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MIN_4ELEMENTS</name>
                                    <description>Tx FIFO contains 4 elements or more</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MIN_8ELEMENTS</name>
                                    <description>Tx FIFO contains 8 elements or more</description>
                                    <value>2</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FLOWCTRLEN</name>
                            <description>Flow Control Enable.&lt;ul&gt;&lt;li&gt;0: Flow control is disabled.&lt;/li&gt;&lt;li&gt;1: Flow control is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Flow control disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Flow control enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MSPIWAIT</name>
                            <description>SPI Wait mode. This value is used to insert a wait state between frames.</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>4</bitWidth>
                        </field>
                        <field derivedFrom="RENDN">
                            <name>TENDN</name>
                            <description>Transmit endian format.&lt;ul&gt;&lt;li&gt;00b: The element is transmitted MSByte-first and MSbit-first.&lt;/li&gt;&lt;li&gt;01b: The element is transmitted LSByte-first and MSbit-first.&lt;/li&gt;&lt;li&gt;10b: The element is transmitted MSByte-first and LSbit-first.&lt;/li&gt;&lt;li&gt;11b: The element is transmitted LSByte-first and LSbit-first.&lt;/li&gt;&lt;/ul&gt;The cases 00b and 11b are set for data frame size from 4 to 32 bits. The cases 01b and 10b are set only for data frame size 16, 24 and 32 bits.</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>2</bitWidth>
                        </field>
                        <field>
                            <name>DATAINDEL</name>
                            <description>Data input delay.&lt;ul&gt;&lt;li&gt;0: No delay is inserted in data input.&lt;/li&gt;&lt;li&gt;1: A delay of 2 clock cycles is inserted in the data input path.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>21</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DR</name>
                    <description>Data Register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <fields>
                        <field>
                            <name>DATA</name>
                            <description>Transmit/Receive data:&lt;ul&gt;&lt;li&gt;Read: RX FIFO is read.&lt;/li&gt;&lt;li&gt;Write: TX FIFO is written.&lt;/li&gt;&lt;/ul&gt;Data must be right-justified when a data size of less than 32-bit is programmed. Unused bits are ignored by the transmit logic. The receive logic automatically right-justifies data.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>SR</name>
                    <description>Status Register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x03</resetValue>
                    <resetMask>0x1F</resetMask>
                    <fields>
                        <field>
                            <name>TFE</name>
                            <description>Transmit FIFO empty:&lt;ul&gt;&lt;li&gt;0: TX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: TX FIFO is empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNF</name>
                            <description>Transmit FIFO not full:&lt;ul&gt;&lt;li&gt;0: TX FIFO is full.&lt;/li&gt;&lt;li&gt;1: TX FIFO is not full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RNE</name>
                            <description>Receive FIFO not empty:&lt;ul&gt;&lt;li&gt;0: RX FIFO is empty.&lt;/li&gt;&lt;li&gt;1: RX FIFO is not empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFF</name>
                            <description>Receive FIFO full:&lt;ul&gt;&lt;li&gt;0: RX FIFO is not full.&lt;/li&gt;&lt;li&gt;1: RX FIFO is full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BSY</name>
                            <description>SPI busy flag:&lt;ul&gt;&lt;li&gt;0: SPI is idle.&lt;/li&gt;&lt;li&gt;1: SPI is currently transmitting and/or receiving a frame or the TX FIFO is not empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CPSR</name>
                    <description>Clock prescale register</description>
                    <addressOffset>0x10</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>CPSDVSR</name>
                            <description>Clock prescale divisor.It must be an even number from 2 to 254. The value is used to generate the transmit and receive bit rate of the SPI. The bit rate is:&lt;p&gt;FSSPCLK / [CPSDVR x (1+SCR)]&lt;/p&gt;where SCR is a value from 0 to 255, programmed through the SSP_CR0 register.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                            <writeConstraint>
                                <range>
                                    <minimum>2</minimum>
                                    <maximum>254</maximum>
                                </range>
                            </writeConstraint>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IMSC</name>
                    <description>Interrupt mask set or clear register</description>
                    <addressOffset>0x14</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>RORIM</name>
                            <description>Receive overrun interrupt mask:&lt;ul&gt;&lt;li&gt;0: RX FIFO written to while full condition interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: RX FIFO written to while full condition interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_DISABLE</name>
                                    <description>irq disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_ENABLE</name>
                                    <description>irq enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="RORIM">
                            <name>RTIM</name>
                            <description>Receive timeout interrupt mask:&lt;ul&gt;&lt;li&gt;0: RX FIFO not empty or no read prior to the timeout period interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: RX FIFO not empty or no read prior to the timeout period interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="RORIM">
                            <name>RXIM</name>
                            <description>Receive FIFO interrupt mask:&lt;ul&gt;&lt;li&gt;0: Receive interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: Receive interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="RORIM">
                            <name>TXIM</name>
                            <description>Transmit FIFO interrupt mask:&lt;ul&gt;&lt;li&gt;0: Transmit interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: Transmit interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="RORIM">
                            <name>TURIM</name>
                            <description>Transmit underrun interrupt mask:&lt;ul&gt;&lt;li&gt;0: Transmit underrun interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: Transmit underrun interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field derivedFrom="RORIM">
                            <name>TEIM</name>
                            <description>Transmit FIFO empty interrupt mask:&lt;ul&gt;&lt;li&gt;0: TX FIFO empty interrupt is masked (irq disabled).&lt;/li&gt;&lt;li&gt;1: TX FIFO empty interrupt is not masked (irq enabled).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RIS</name>
                    <description>Raw interrupt status register</description>
                    <addressOffset>0x18</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>RORRIS</name>
                            <description>Receive overrun raw interrupt status</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RTRIS</name>
                            <description>Receive time out raw interrupt status</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXRIS</name>
                            <description>Receive raw interrupt status</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXRIS</name>
                            <description>Transmit raw interrupt status</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TURRIS</name>
                            <description>Transmit underrun raw interrupt Status</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TERIS</name>
                            <description>Transmit FIFO Empty Raw Interrupt Status</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MIS</name>
                    <description>Masked Interrupt Status Register</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>RORMIS</name>
                            <description>Receive Overrun Masked Interrupt Status: gives the interrupt status after masking of the receive overrun interrupt.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RTMIS</name>
                            <description>Receive Time Out Masked Interrupt Status: gives the interrupt status after masking of receive timeout interrupt.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXMIS</name>
                            <description>Receive Masked Interrupt Status: gives the interrupt status after masking of the receive interrupt.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXMIS</name>
                            <description>Transmit Masked Interrupt Status: gives the interrupt status after masking of the transmit interrupt.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TURMIS</name>
                            <description>Transmit Underrun Masked Interrupt Status: gives the interrupt status after masking of the transmit underrun interrupt.</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEMIS</name>
                            <description>Transmit FIFO Empty Masked Interrupt Status: gives the interrupt status after masking of the transmit FIFO empty interrupt.</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ICR</name>
                    <description>Interrupt clear register</description>
                    <addressOffset>0x20</addressOffset>
                    <size>8</size>
                    <access>write-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x07</resetMask>
                    <modifiedWriteValues>oneToClear</modifiedWriteValues>
                    <fields>
                        <field>
                            <name>RORIC</name>
                            <description>Receive Overrun Clear Interrupt: writing 1 clears the receive overrun interrupt.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RTIC</name>
                            <description>Receive Time Out Clear Interrupt: writing 1 clears the receive timeout interrupt.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TURIC</name>
                            <description>Transmit Underrun Clear Interrupt: writing 1 clears the transmit overrun interrupt.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DMACR</name>
                    <description>SPI DMA control register</description>
                    <addressOffset>0x24</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x0F</resetMask>
                    <fields>
                        <field>
                            <name>RXDMASE</name>
                            <description>Single receive DMA request.&lt;ul&gt;&lt;li&gt;0: Single transfer DMA in receive disable.&lt;/li&gt;&lt;li&gt;1: Single transfer DMA in receive enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RX_DMA_DISABLE</name>
                                    <description>Single transfer DMA in receive disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RX_DMA_ENABLE</name>
                                    <description>Single transfer DMA in receive enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TXDMASE</name>
                            <description>Signle transmit DMA request.&lt;ul&gt;&lt;li&gt;0: Single transfer DMA in transmit disable.&lt;/li&gt;&lt;li&gt;1: Single transfer DMA in transmit enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TX_DMA_DISABLE</name>
                                    <description>Single transfer DMA in transmit disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TX_DMA_ENABLE</name>
                                    <description>Single transfer DMA in transmit enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RXFRM</name>
                    <description>SPI Receive Frame register. Indicates the number of frames to receive from the slave.</description>
                    <addressOffset>0x28</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>CHN</name>
                    <description>Dummy character register</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>WDTXF</name>
                    <description>SPI transmit FIFO receive frame number. Indicates the number of frames to receive from the transmit FIFO.</description>
                    <addressOffset>0x30</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>ITCR</name>
                    <description>Integration test control register</description>
                    <addressOffset>0x80</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x03</resetMask>
                    <fields>
                        <field>
                            <name>SWAPFIFO</name>
                            <description>FIFO control mode:&lt;ul&gt;&lt;li&gt;0: FIFO normal mode. Write in TDR register puts data in TX FIFO and read from TDR register read data from RX FIFO.&lt;/li&gt;&lt;li&gt;1: FIFO swapped mode. Write in TDR register puts data in RX FIFO and read from TDR register read data from TX FIFO.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FIFO_NORMAL_MODE</name>
                                    <description>FIFO normal mode</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>FIFO_TEST_MODE</name>
                                    <description>FIFO test mode</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TDR</name>
                    <description>FIFO Test Data Register</description>
                    <addressOffset>0x8C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>WDG</name>
            <version>1.0</version>
            <description>Watchdog</description>
            <groupName>WDG</groupName>
            <baseAddress>0x40700000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>WDG</name>
                <description>Watchdog interrupt</description>
                <value>7</value>
            </interrupt>
            <registers>
                <register>
                    <name>LR</name>
                    <description>Watchdog Load Register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>LOAD</name>
                            <description>Watchdog load value. Value from which the counter is to decrement. When this register is written to, the count is immediately restarted from the new value.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                            <writeConstraint>
                                <range>
                                    <minimum>1</minimum>
                                    <maximum>0xFFFFFFFF</maximum>
                                </range>
                            </writeConstraint>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>VAL</name>
                    <description>Watchdog Value Register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>WDTVAL</name>
                            <description>Watchdog load value. When read, returns the current value of the decrementing watchdog counter. A write has no effect.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CR</name>
                    <description>Watchdog Control Register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x03</resetMask>
                    <fields>
                        <field>
                            <name>INTEN</name>
                            <description>Watchdog interrupt enable. Enable the interrupt event:&lt;ul&gt;&lt;li&gt;0: watchdog interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: watchdog interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Disable watchdog interrupt</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Enable watchdog interrupt</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RESEN</name>
                            <description>Watchdog reset enable. Enable the watchdog reset output:&lt;ul&gt;&lt;li&gt;0: watchdog reset is disabled.&lt;/li&gt;&lt;li&gt;1: watchdog reset is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Disable watchdog reset</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Enable watchdog reset</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ICR</name>
                    <description>Watchdog Interrupt Clear Register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <modifiedWriteValues>clear</modifiedWriteValues>
                    <fields>
                        <field>
                            <name>WDTICLR</name>
                            <description>Watchdog interrupt enable:&lt;ul&gt;&lt;li&gt;Writing any value will clear the watchdog interrupt and reloads the counter from the LR register.&lt;/li&gt;&lt;li&gt;A read returns zero.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RIS</name>
                    <description>Watchdog Raw Interrupt Status Register</description>
                    <addressOffset>0x10</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x01</resetMask>
                    <fields>
                        <field>
                            <name>RIS</name>
                            <description>Watchdog raw interrupt status bit. Reflects the status of the interrupt status from the watchdog:&lt;ul&gt;&lt;li&gt;0: watchdog interrupt is not active.&lt;/li&gt;&lt;li&gt;1: watchdog interrupt is active.&lt;/li&gt;&lt;/ul&gt;Read-only bit. A write has no effect.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_NOT_PENDING</name>
                                    <description>Watchdog interrupt is not active</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_PENDING</name>
                                    <description>Watchdog interrupt is active</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MIS</name>
                    <description>Watchdog Masked Interrupt Status Register</description>
                    <addressOffset>0x14</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x01</resetMask>
                    <fields>
                        <field>
                            <name>MIS</name>
                            <description>Watchdog masked interrupt status bit. Masked value of watchdog interrupt status:&lt;ul&gt;&lt;li&gt;0: watchdog interrupt is not active.&lt;/li&gt;&lt;li&gt;1: watchdog interrupt is active.&lt;/li&gt;&lt;/ul&gt;Read-only bit. A write has no effect.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IRQ_NOT_PENDING</name>
                                    <description>Watchdog interrupt masked is not active</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IRQ_PENDING</name>
                                    <description>Watchdog interrupt masked is active</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>LOCK</name>
                    <description>Watchdog Lock Register</description>
                    <addressOffset>0xC00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>LOCKVAL</name>
                            <description>Watchdog lock value. When read, returns the lock status:&lt;ul&gt;&lt;li&gt;0: Write access to all watchdog other registers is enabled.&lt;/li&gt;&lt;li&gt;1: Write access to all watchdog other registers is disabled.&lt;/li&gt;&lt;/ul&gt;When written, allows enabling or disabling write access to all other watchdog registers:&lt;ul&gt;&lt;li&gt;Writing 0x1ACCE551: Write access to all other registers is enabled.&lt;/li&gt;&lt;li&gt;Writing any other value: Write access to all other registers is disabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                        </field>
                    </fields>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>ADC</name>
            <version>1.0</version>
            <description>ADC</description>
            <groupName>ADC</groupName>
            <baseAddress>0x40800000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>ADC</name>
                <description>ADC interrupt</description>
                <value>13</value>
            </interrupt>
            <registers>
                <register>
                    <name>CTRL</name>
                    <description>ADC control register</description>
                    <addressOffset>0x02</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>ON</name>
                            <description>Starts ADC analog subsystem. This bit must be set before starting a conversion.&lt;ul&gt;&lt;li&gt;0: ADC is OFF.&lt;/li&gt;&lt;li&gt;1: ADC is ON.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>OFF</name>
                                    <description>ADC analog part disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ON</name>
                                    <description>ADC analog part enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CALEN</name>
                            <description>Enables the calibration phase when set to 1. This bit is cleared and the calibration is disabled by setting the RSTADCCALEN bit.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>CAL_OFF</name>
                                    <description>ADC automatic calibration disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CAL_ON</name>
                                    <description>ADC automatic calibration enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SWSTART</name>
                            <description>Starts the ADC conversion phase when set.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>START</name>
                                    <description>Starts the ADC conversion phase when set.</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>RESET</name>
                            <description>Reset all the ADC APB registers when set.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RESET</name>
                                    <description>Reset all the registers content</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>STOP</name>
                            <description>Permits to stop the continuous conversion.&lt;ul&gt;&lt;li&gt;0: continuous conversion is enabled but SWSTART and ADCON bits must be set.&lt;/li&gt;&lt;li&gt;1: stop the continuous conversion and switch off the ADC.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STOP</name>
                                    <description>Stop the continuous mode conversion</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>ENAB_COMP</name>
                            <description>Enables the window comparator when set to 1. WDOG flag is ADC_SR register is set if the converted value is between ADCTHRESHOLD_HI and ADCTHRESHOLD_LO value.</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RSTCALEN</name>
                            <description>Disable the calibration phase when set to 1. This bit has to be set to disable the calibration each time calibration is enabled.</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RESET</name>
                                    <description>Reset the ADCCALEN bit. Disable the automatic calibration when it is enabled</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>AUTO_OFFSET</name>
                            <description>Enables the update of ADC_OFFSET register.&lt;ul&gt;&lt;li&gt;0: ADC_OFFSET register is not updated.&lt;/li&gt;&lt;li&gt;1: ADC_OFFSET register is updated.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>CAL_OFF</name>
                                    <description>ADC automatic calibration disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CAL_ON</name>
                                    <description>ADC automatic calibration enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MIC_ON</name>
                            <description>Enables the filter chain for voice when set to 1.&lt;ul&gt;&lt;li&gt;0: Filter chain is disabled.&lt;/li&gt;&lt;li&gt;1: Filter chain is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MIC_OFF</name>
                                    <description>Filter chain disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MIC_ON</name>
                                    <description>Filter chain enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DMA_EN</name>
                            <description>Enables the DMA.&lt;ul&gt;&lt;li&gt;0: DMA is disabled.&lt;/li&gt;&lt;li&gt;1: DMA is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DMA_OFF</name>
                                    <description>ADC DMA disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DMA_ON</name>
                                    <description>ADC DMA enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CONF</name>
                    <description>ADC configuration register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0x0000000C</resetMask>
                    <fields>
                        <field>
                            <name>EN_DFMODE</name>
                            <description>Control the current in differential mode:&lt;ul&gt;&lt;li&gt;0: Differential mode with DC common mode current not nulled.&lt;/li&gt;&lt;li&gt;1: Differential mode with DC common mode current nulled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DFMODE_OFF</name>
                                    <description>Differential mode with DC common mode current not nulled</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DFMODE_ON</name>
                                    <description>Differential mode with DC common mode current nulled</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CHSEL</name>
                            <description>Select the input channel:&lt;ul&gt;&lt;li&gt;000b: All switches open.&lt;/li&gt;&lt;li&gt;001b: Single ended through ADC2 pin. InP=VREF (internal), InN=ADC2 pin.&lt;/li&gt;&lt;li&gt;010b: Single ended through ADC1 pin. InP=ADC1 pin, InN=VREF (internal).&lt;/li&gt;&lt;li&gt;011b: Differential ADC1 pin - ADC2 pin, InP=ADC1 pin, InN=ADC2 pin.&lt;/li&gt;&lt;li&gt;101b: Battery level detector. InP=0.6V (internal), InN=BLD.&lt;/li&gt;&lt;li&gt;110b: Short InN=InP=0.6V (internal).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ALL_SWITCH_OPEN</name>
                                    <description>All switch open</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SINGLE_VINP</name>
                                    <description>Single ended InP=ANATEST2 pin, InN=VREF (internal)</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SINGLE_VINN</name>
                                    <description>Single ended InN=ANATEST3 pin, InP=VREF (internal)</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DIFF_INP_INN</name>
                                    <description>Differential InP=ANATEST2 pin, InN=ANATEST3 pin</description>
                                    <value>3</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TEMP_SENS</name>
                                    <description>InP=VTEMPSENS (internal), InN=0.6V (internal)</description>
                                    <value>4</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BATT_SENS</name>
                                    <description>InP=VBATSENS (internal), InN=0.6V (internal)</description>
                                    <value>5</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SHORT</name>
                                    <description>InP=InN=0.6V (internal)</description>
                                    <value>6</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>REFSEL</name>
                            <description>Set the VREF for single ended conversion:&lt;ul&gt;&lt;li&gt;00b: 0.0V.&lt;/li&gt;&lt;li&gt;01b: 0.4V.&lt;/li&gt;&lt;li&gt;10b: 0.6V.&lt;/li&gt;&lt;li&gt;11b: 1.2V.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>RESEL_0V0</name>
                                    <description>Set the VREF at 0.0 V</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RESEL_0V4</name>
                                    <description>Set the VREF at 0.4 V</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RESEL_0V6</name>
                                    <description>Set the VREF at 0.6 V</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RESEL_1V2</name>
                                    <description>Set the VREF at 1.2 V</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DECIM_RATE</name>
                            <description>Set the ADC resolution:&lt;ul&gt;&lt;li&gt;00b: Set the decimation factor to 200.&lt;/li&gt;&lt;li&gt;01b: Set the decimation factor to 100.&lt;/li&gt;&lt;li&gt;10b: Set the decimation factor to 64.&lt;/li&gt;&lt;li&gt;11b: Set the decimation factor to 32.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DECIM_200</name>
                                    <description>Set the decimation factor to 200</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DECIM_100</name>
                                    <description>Set the decimation factor to 100</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DECIM_64</name>
                                    <description>Set the decimation factor to 64</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DECIM_32</name>
                                    <description>Set the decimation factor to 32</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>PGASEL</name>
                            <description>Set the input attenuator value:&lt;ul&gt;&lt;li&gt;000b: Input attenuator at 0 dB.&lt;/li&gt;&lt;li&gt;001b: Input attenuator at 6.02 dB.&lt;/li&gt;&lt;li&gt;010b: Input attenuator at 9.54 dB.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>IN_ATT_0dB0</name>
                                    <description>Input attenuator at 0 dB</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IN_ATT_6dB02</name>
                                    <description>Input attenuator at 6.02 dB</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>IN_ATT_9dB54</name>
                                    <description>Input attenuator at 9.54 dB</description>
                                    <value>2</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CONT</name>
                            <description>Enable the continuous conversion mode:&lt;ul&gt;&lt;li&gt;0: Single conversion.&lt;/li&gt;&lt;li&gt;1: Continuous conversion.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SINGLE</name>
                                    <description>Single conversion mode</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CONT</name>
                                    <description>Continuous conversion mode</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>ROUND16</name>
                            <description>Result mapped on 32 or 16 bits:&lt;ul&gt;&lt;li&gt;0: Output result mapped to 32 bits.&lt;/li&gt;&lt;li&gt;1: Output result mapped to 16 bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MAPPED_32</name>
                                    <description>Output result mapped to 32 bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MAPPED_16</name>
                                    <description>Output result mapped to 16 bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SKIP</name>
                            <description>It permits to bypass the filter comb to speed up the conversion for signal at low frequency:&lt;ul&gt;&lt;li&gt;0: Filter for comb not bypassed.&lt;/li&gt;&lt;li&gt;1: Filter for comb bypassed.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FILTER_OFF</name>
                                    <description>Filter for comb not bypassed</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>FILTER_ON</name>
                                    <description>Filter for comb bypassed</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DIG_FILT_CLK</name>
                            <description>Frequency clock selection value on GPIO0 when MIC_SEL=1:&lt;ul&gt;&lt;li&gt;0: 0.8 MHz.&lt;/li&gt;&lt;li&gt;1: 1.6 MHz.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>CLK_0MHz8</name>
                                    <description>Frequency clock to 0.8 MHz</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CLK_1MHz6</name>
                                    <description>Frequency clock to 1.6 MHz</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DIS_WKP_WAIT</name>
                            <description>Disable the wake-up timer before to start the conversion from input:&lt;ul&gt;&lt;li&gt;0: Do not disable the wake up time before conversion.&lt;/li&gt;&lt;li&gt;1: Disable the wake up time before conversion.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>21</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Do not disable the wake up time before conversion</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Disable the wake up time before conversion</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MIC_SEL</name>
                            <description>Provides the clock on GPIO:&lt;ul&gt;&lt;li&gt;0: Do not provided any external clock source.&lt;/li&gt;&lt;li&gt;1: Provide clock source from GPIO.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>22</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Do not provided any external clock source</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Provide clock source from GPIO</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IRQSTAT</name>
                    <description>IRQ masked status register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x0F</resetMask>
                    <fields>
                        <field>
                            <name>ENDCAL</name>
                            <description>1: when the calibration is completed. Clear on register read.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BUSY</name>
                            <description>1: during conversion. Clear on register read if BUSY condition no more active.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>EOC</name>
                            <description>1: when the conversion is completed. Clear on register read.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WDOG</name>
                            <description>1: when the data is within the thresholds. Clear on register read.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IRQMASK</name>
                    <description>It sets the mask for ADC interrupt</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x0F</resetValue>
                    <resetMask>0x0F</resetMask>
                    <fields>
                        <field>
                            <name>ENDCAL</name>
                            <description>Interrupt mask for the end of calibration event:&lt;ul&gt;&lt;li&gt;0: Interrupt is enabled.&lt;/li&gt;&lt;li&gt;1: Interrupt is disabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BUSY</name>
                            <description>Interrupt mask for the ADC busy event:&lt;ul&gt;&lt;li&gt;0: Interrupt is enabled.&lt;/li&gt;&lt;li&gt;1: Interrupt is disabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>EOC</name>
                            <description>Interrupt mask for the end of conversion event:&lt;ul&gt;&lt;li&gt;0: Interrupt is enabled.&lt;/li&gt;&lt;li&gt;1: Interrupt is disabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WDOG</name>
                            <description>Interrupt mask for the within the threhsold event:&lt;ul&gt;&lt;li&gt;0: Interrupt is enabled.&lt;/li&gt;&lt;li&gt;1: Interrupt is disabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DATA_CONV</name>
                    <description>Result of the conversion in two complement format:&lt;ul&gt;&lt;li&gt;if ROUND16=0: result is mapped on all 32-bit (can be truncated with loss of ADCDATAOUT[30:15])&lt;/li&gt;&lt;li&gt;if ROUND16=1: result is mapped on 16-bit (can be truncated with loss of ADCDATAOUT[15:0])&lt;/li&gt;&lt;/ul&gt;</description>
                    <addressOffset>0x14</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>OFFSET</name>
                    <description>Offset for correction of converted data</description>
                    <addressOffset>0x18</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>SR_REG</name>
                    <description>ADC status register</description>
                    <addressOffset>0x20</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x0F</resetMask>
                    <fields>
                        <field>
                            <name>ENDCAL</name>
                            <description>1: when the calibration is completed. The result of the calibration is written in the ADC_OFFSET register.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BUSY</name>
                            <description>1: during conversion.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>EOC</name>
                            <description>1: when the conversion is completed.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WDOG</name>
                            <description>If ENAB_COMP=1, this bit indicates the result of the conversion is between high and low threshold:&lt;ul&gt;&lt;li&gt;0: DATAOUT[31:0] is NOT between THRESHOLD_HI and THRESHOLD_LO values.&lt;/li&gt;&lt;li&gt;1: DATAOUT[31:0] is between THRESHOLD_HI and THRESHOLD_LO values.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>THRESHOLD_HI</name>
                    <description>High threshold for window comparator</description>
                    <addressOffset>0x24</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>THRESHOLD_LO</name>
                    <description>Low threshold for window comparator</description>
                    <addressOffset>0x28</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x00000000</resetMask>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>CKGEN_SOC</name>
            <version>1.0</version>
            <description>Clock Gen SOC</description>
            <groupName>CKGEN_SOC</groupName>
            <baseAddress>0x40900000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>CONTROL</name>
                    <description>Control clock and reset of SOC</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x01FA03F0</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>UART_CKDIV</name>
                            <description>UART baud rate clock setting from 1 to 16 MHz according to the formula 16 / (n + 1) MHz.</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>4</bitWidth>
                            <access>read-write</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>REASON_RST</name>
                    <description>Indicates the reset reason from Cortex-M0</description>
                    <addressOffset>0x08</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x0E</resetMask>
                    <fields>
                        <field>
                            <name>SYSREQ</name>
                            <description>Reset caused by Cortex-M0 debug asserting SYSRESETREQ</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WDG</name>
                            <description>Reset caused by assertion of watchdog reset</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>LOCKUP</name>
                            <description>Reset caused by Cortex-M0 asserting LOCKUP signal</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DIE_ID</name>
                    <description>Identification information of the device</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000110</resetValue>
                    <resetMask>0x00000FFF</resetMask>
                    <fields>
                        <field>
                            <name>REV</name>
                            <description>Cut revision</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>4</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>VERSION</name>
                            <description>Cut version</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>5</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>PRODUCT</name>
                            <description>Product</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>3</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CLOCK_EN</name>
                    <description>Enable or gates the APB clock of the peripherals</description>
                    <addressOffset>0x20</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x0003FFFF</resetValue>
                    <resetMask> 0x000FFFFF</resetMask>
                    <fields>
                        <field>
                            <name>GPIO</name>
                            <description>GPIO clock</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>NVM</name>
                            <description>Flash controller clock</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>SYSCTRL</name>
                            <description>System controller clock</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>UART</name>
                            <description>UART clock</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>SPI</name>
                            <description>SPI clock</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>WDOG</name>
                            <description>Watchdog clock</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>ADC</name>
                            <description>ADC clock</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>I2C1</name>
                            <description>I2C1 clock</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>I2C2</name>
                            <description>I2C2 clock</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>MFT1</name>
                            <description>MFT1 clock</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>MFT2</name>
                            <description>MFT2 clock</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>RTC</name>
                            <description>RTC clock</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>DMA</name>
                            <description>DMA AHB clock</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>RNG</name>
                            <description>RNG AHB clock</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        </fields>
                </register>
                <register>
                    <name>DMA_CONFIG</name>
                    <description>DMA config</description>
                    <addressOffset>0x24</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>ADC_CH0</name>
                            <description>Select ADC on DMA channel 0 instead of peripheral</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>enable</name>
                                    <value>1</value>
                                    <description>enable</description>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>disable</name>
                                    <value>0</value>
                                    <description>disable</description>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH1</name>
                            <description>Select ADC on DMA channel 1 instead of peripheral</description>
                            <bitOffset>1</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH2</name>
                            <description>Select ADC on DMA channel 2 instead of peripheral</description>
                            <bitOffset>2</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH3</name>
                            <description>Select ADC on DMA channel 3 instead of peripheral</description>
                            <bitOffset>3</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH4</name>
                            <description>Select ADC on DMA channel 4 instead of peripheral</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH5</name>
                            <description>Select ADC on DMA channel 5 instead of peripheral</description>
                            <bitOffset>5</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH6</name>
                            <description>Select ADC on DMA channel 6 instead of peripheral</description>
                            <bitOffset>6</bitOffset>
                        </field>
                        <field derivedFrom="ADC_CH0">
                            <name>ADC_CH7</name>
                            <description>Select ADC on DMA channel 7 instead of peripheral</description>
                            <bitOffset>7</bitOffset>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral>
            <name>I2C2</name>
            <version>1.0</version>
            <description>I2C2</description>
            <groupName>I2C</groupName>
            <baseAddress>0x40A00000</baseAddress>
            <size>32</size>
            <access>read-write</access>            
            <headerStructName>I2C</headerStructName>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>I2C2</name>
                <description>I2C 2 interrupt</description>
                <value>14</value>
            </interrupt>
            <registers>
                <register>
                    <name>CR</name>
                    <description>I2C Control register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0FFFF7FF</resetMask>
                    <fields>
                        <field>
                            <name>PE</name>
                            <description>I2C enable disable:&lt;ul&gt;&lt;li&gt;0: I2C disable.&lt;/li&gt;&lt;li&gt;1: I2C enable.&lt;/li&gt;&lt;/ul&gt;This bit when deasserted works as software reset for I2C peripheral.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>I2C disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>I2C enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>OM</name>
                            <description>Select the operating mode:&lt;ul&gt;&lt;li&gt;00b: Slave mode. The peripheral can only respond (transmit/receive) when addressed by a master device&lt;/li&gt;&lt;li&gt;01b: Master mode. The peripheral works in a multi-master system where itself cannot be addressed by another master device. It can only initiate a new transfer as master device.&lt;/li&gt;&lt;li&gt;10b: Master/slave mode. The peripheral works in a multi-master system where itself can be addressed by another master device, besides to initiate a transfer as master device.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>2</bitWidth>
                            <writeConstraint>
                                <useEnumeratedValues>true</useEnumeratedValues>
                            </writeConstraint>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SLAVE</name>
                                    <description>The peripheral can only respond (transmit/receive) when addressed by a master device</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MASTER</name>
                                    <description>The peripheral works in a multi-master system where itself cannot be addressed by another master device. It can only initiate a new transfer as master device</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MASTER_SLAVE</name>
                                    <description>The peripheral works in a multi-master system where itself can be addressed by another master device, besides to initiate a transfer as master device</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SAM</name>
                            <description>Slave addressing mode. SAM defines the slave addressing mode when the peripheral works in slave or master/slave mode. The received address is compared with the content of the register SCR.&lt;ul&gt;&lt;li&gt;0: 7-bit addressing mode.&lt;/li&gt;&lt;li&gt;1: 10-bit addressing mode.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <writeConstraint>
                                <useEnumeratedValues>true</useEnumeratedValues>
                            </writeConstraint>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>ADDR_7BIT</name>
                                    <description>7-bit addressing mode</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ADDR_10BIT</name>
                                    <description>10-bit addressing mode</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SM</name>
                            <description>Speed mode. SM defines the speed mode related to the serial bit rate:&lt;ul&gt;&lt;li&gt;0: Standard mode (up to 100 K/s).&lt;/li&gt;&lt;li&gt;1: Fast mode (up to 400 K/s).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>2</bitWidth>
                            <writeConstraint>
                                <useEnumeratedValues>true</useEnumeratedValues>
                            </writeConstraint>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>STANDARD_MODE</name>
                                    <description>Standard mode (up to 100 K/s)</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>FAST_MODE</name>
                                    <description>Fast mode (up to 400 K/s)</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>SGCM</name>
                            <description>Slave general call mode defines the operating mode of the slave controller when a general call is received. This setting does not affect the hardware general call that is always managed in transparent mode.&lt;ul&gt;&lt;li&gt;0: transparent mode, the slave receiver recognizes the general call but any action is taken by the hardware after the decoding of the message included in the Rx FIFO.&lt;/li&gt;&lt;li&gt;1: direct mode, the slave receiver recognizes the general call and executes directly (without software intervention) the related actions. Only the status code word is stored in the I2C_SR register for notification to the application.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <writeConstraint>
                                <useEnumeratedValues>true</useEnumeratedValues>
                            </writeConstraint>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TRANSPARENT_MODE</name>
                                    <description>Transparent mode, the slave receiver recognizes the general call ut any action is taken by software after the decoding of the message included in the Rx FIFO</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DIRECT_MODE</name>
                                    <description>Direct mode, the slave receiver recognizes the general call and executes directly (without software intervention) the related actions. Only the status code word is stored in the SR register for notification to the application</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FTX</name>
                            <description>FTX flushes the transmit circuitry (FIFO, fsm). The configuration of the I2C node (register setting) is not affected by the flushing operation. The flushing operation is performed on modules working on different clock domains (system and I2C clocks) and needs several system clock cycles before being completed. Upon completion, the I2C node (internal logic) clears this bit. The application must not access the Tx FIFO during the flushing operation and should poll on this bit waiting for completion.&lt;ul&gt;&lt;li&gt;0: Flush operation is completed (I2C controller clears the bit).&lt;/li&gt;&lt;li&gt;1: Flush operation is started and in progress (set by application).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <modifiedWriteValues>oneToSet</modifiedWriteValues>
                        </field>
                        <field>
                            <name>FRX</name>
                            <description>FRX flushes the receive circuitry (FIFO, fsm).The configuration of the I2C node (register setting) is not affected by the flushing operation. The flushing operation is performed on modules working on different clock domains (system and I2C clocks) and needs several system clock cycles before to be completed. Upon completion, the I2C node (internal logic) clears this bit. The application must not access the Rx FIFO during the flushing operation and should poll on this bit waiting for the completion.&lt;ul&gt;&lt;li&gt;0: Flush operation is completed (I2C controller clears the bit).&lt;/li&gt;&lt;li&gt;1: Flush operation is started and in progress (set by application).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <modifiedWriteValues>oneToSet</modifiedWriteValues>
                        </field>
                        <field>
                            <name>DMA_TX_EN</name>
                            <description>Enables the DMA TX interface.&lt;ul&gt;&lt;li&gt;0: Idle state, the DMA TX interface is disabled.&lt;/li&gt;&lt;li&gt;1: Run state, the DMA TX interface is enabled.&lt;/li&gt;&lt;/ul&gt;On the completion of the DMA transfer, the DMA TX interface is automatically turned off clearing this bit when the end of transfer signal coming from the DMA is raised. DMA_TX_EN and DMA_RX_EN must not enabled at the same time.</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>DMA TX interface disable</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>DMA TX interface enable</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DMA_RX_EN</name>
                            <description>Enables the DMA RX interface.&lt;ul&gt;&lt;li&gt;0: Idle state, the DMA RX interface is disabled.&lt;/li&gt;&lt;li&gt;1: Run state, the DMA RX interface is enabled.&lt;/li&gt;&lt;/ul&gt;On the completion of the DMA transfer, the DMA RX interface is automatically turned off clearing this bit when the end of transfer signal coming from the DMA is raised. DMA_TX_EN and DMA_RX_EN must not enabled at the same time.</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>DMA RX interface disable</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>DMA RX interface enable</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FON</name>
                            <description>Filtering on sets the digital filters on the SDA, SCL line, according to the I2C bus requirements, when standard open-drain pads are used:&lt;ul&gt;&lt;li&gt;00b: No digital filters are inserted.&lt;/li&gt;&lt;li&gt;01b: Digital filters (filter 1 ck wide spikes) are inserted.&lt;/li&gt;&lt;li&gt;10b: Digital filters (filter 2 ck wide spikes) are inserted.&lt;/li&gt;&lt;li&gt;11b: Digital filters (filter 4 ck wide spikes) are inserted.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>NONE</name>
                                    <description>No digital filters are inserted</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CK1_SPIKES</name>
                                    <description>Digital filters (filter 1 ck wide spikes) are inserted</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CK2_SPIKES</name>
                                    <description>Digital filters (filter 2 ck wide spikes) are inserted</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>CK4_SPIKES</name>
                                    <description>Digital filters (filter 4 ck wide spikes) are inserted</description>
                                    <value>0x03</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>FS_1</name>
                            <description>Force stop enable bit. When set to 1b, the STOP condition is generated.&lt;ul&gt;&lt;li&gt;0: Force stop disabled.&lt;/li&gt;&lt;li&gt;1: Enable force stop.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Force stop disable</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Force stop enable</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        </fields>
                </register>
                <register>
                    <name>SCR</name>
                    <description>I2C Slave Control register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x000F0055</resetValue>
                    <resetMask>0xFFFF03FF</resetMask>
                    <fields>
                        <field>
                            <name>SA7</name>
                            <description>Slave address 7-bit. SA7 includes the slave address 7-bit or the LSB bits of the slave address 10-bit</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>7</bitWidth>
                        </field>
                        <field>
                            <name>ESA10</name>
                            <description>Extended slave address 10-bit. ESA10 includes the extension (MSB bits) to the SA7 register field in case of slave addressing mode set to 10-bit</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>SLSU</name>
                            <description>Slave data setup time. SLSU defines the data setup time after SCL clock stretching in terms of i2c_clk cycles. Data setup time is actually equal to SLSU-1 clock cycles. The typical values for i2c_clk of 16 MHz are SLSU = 5 in standard mode and SLSU = 3 in fast modes.</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>16</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MCR</name>
                    <description>I2C master control register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x03FFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>OP</name>
                            <description>Operation&lt;ul&gt;&lt;li&gt;0: Indicates a master write operation.&lt;/li&gt;&lt;li&gt;1: Indicates a master read operation.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MASTER_WRITE</name>
                                    <description>Indicates a master write operation</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MASTER_READ</name>
                                    <description>Indicates a master read operation</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>A7</name>
                            <description>Address. Includes the 7-bit address or the LSB bits of the10-bit address used to initiate the current transaction</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>7</bitWidth>
                        </field>
                        <field>
                            <name>EA10</name>
                            <description>Extended address. Includes the extension (MSB bits) of the field A7 used to initiate the current transaction</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>SB</name>
                            <description>Start byte:&lt;ul&gt;&lt;li&gt;0: The start byte procedure is not applied to the current transaction.&lt;/li&gt;&lt;li&gt;1: The start byte procedure is prefixed to the current transaction.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>AM</name>
                            <description>Address type:&lt;ul&gt;&lt;li&gt;00b: The transaction is initiated by a general call command. In this case the fields OP, A7, EA10 are "don't care".&lt;/li&gt;&lt;li&gt;01b: The transaction is initiated by the 7-bit address included in the A7 field.&lt;/li&gt;&lt;li&gt;10b: The transaction is initiated by the 10-bit address included in the EA10 and A7 fields.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>GENERAL_CALL</name>
                                    <description>The transaction is initiated by a general call command</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT7_ADDRESS</name>
                                    <description>The transaction is initiated by the 7-bit address included in the A7 field</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BIT10_ADDRESS</name>
                                    <description>The transaction is initiated by the 10-bit address included in the EA10 and A7 fields</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>P</name>
                            <description>Stop condition:&lt;ul&gt;&lt;li&gt;0: The current transaction is not terminated by a STOP condition. A repeated START condition is generated on the next operation which is required to avoid to stall the I2C line.&lt;/li&gt;&lt;li&gt;1: The current transaction is terminated by a STOP condition.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>LENGTH</name>
                            <description>Transaction length. Defines the length, in terms of the number of bytes to be transmitted (MW) or received (MR). In case of write operation, the payload is stored in the Tx FIFO. A transaction can be larger than the Tx FIFO size. In case of read operation the length refers to the number of bytes to be received before generating a not-acknowledge response. A transaction can be larger than the Rx FIFO size. The I2C clock line is stretched low until the data in Rx FIFO are consumed.</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>11</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TFR</name>
                    <description>I2C transmit FIFO register</description>
                    <addressOffset>0x10</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>TDATA</name>
                            <description>Transmission Data. TDATA contains the payload related to a master write or read-from-slave operation to be written in the Tx FIFO. TDATA(0) is the first LSB bit transmitted over the I2C line.&lt;p&gt;In case of master write operation, the Tx FIFO shall be preloaded otherwise the I2C controller cannot start the operation until data are available.&lt;/p&gt;&lt;p&gt;In case of read-from-slave operation, when the slave is addressed, the interrupt RISR:RFSR bit is asserted and the CPU shall download the data in the FIFO. If the FIFO is empty and the I2C master is still requiring data, a new request (RISR:RFSE interrupt bit) is asserted to require additional data to the CPU. The slave controller stretches the I2C clock line when no data are available for transmission. Since the Tx FIFO could contain some pending data related to the previous transfer (the transfer length may be unknown to the slave controller), the Tx FIFO is self-flushed before asserting the I2C_RISR:RFSR bit. Upon completion of the read-from-slave operation the interrupt bit I2C_RISR:STD is asserted and the related status of the operation is stored in the I2C_SR register. In CPU mode, the FIFO management shall be based on the assertion of the interrupt bit RISR:TXFNE, related to the nearly-empty threshold.&lt;/p&gt;&lt;p&gt;In DMA mode, the single/burst requests are automatically executed based on the number of entries available in the TX FIFO and the related destination burst size programmed in the I2C_DMAR:DBSIZE_TX register field. The DMA requests are terminated at the end of the I2C read operation (notacknowledge received by the master) by a dummy last single/burst request.&lt;/p&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>SR</name>
                    <description>I2C status register</description>
                    <addressOffset>0x14</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x3FFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>OP</name>
                            <description>Operation:&lt;ul&gt;&lt;li&gt;00b: MW: master write operation.&lt;/li&gt;&lt;li&gt;01b: MR: master read operation.&lt;/li&gt;&lt;li&gt;10b: WTS: write-to-slave operation.&lt;/li&gt;&lt;li&gt;11b: RFS: read-from-slave operation.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MW</name>
                                    <description>Master write operation</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MR</name>
                                    <description>Master read operation</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>WTS</name>
                                    <description>Write to slave operation</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RFS</name>
                                    <description>Read from slave operation</description>
                                    <value>0x03</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>STATUS</name>
                            <description>Controller status. Valid for the operations MW, MR, WTS RFS:&lt;ul&gt;&lt;li&gt;00b: NOP: No operation is in progress.&lt;/li&gt;&lt;li&gt;01b: ON_GOING: An operation is ongoing.&lt;/li&gt;&lt;li&gt;10b: OK: The operation (OP field) has been completed successfully.&lt;/li&gt;&lt;li&gt;11b: ABORT: The operation (OP field) has been aborted due to the occurrence of the event described in the CAUSE field.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>NOP</name>
                                    <description>No operation is in progress</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ON_GOING</name>
                                    <description>An operation is ongoing</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>OK</name>
                                    <description>The operation (OP field) has been completed successfully</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ABORT</name>
                                    <description>The operation (OP field) has been aborted due to the occurrence of the event descried in the CAUSE field</description>
                                    <value>0x03</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CAUSE</name>
                            <description>Abort cause. This field is valid only when the STATUS field contains the ABORT tag. Others: RESERVED. &lt;ul&gt;&lt;li&gt;000b: NACK_ADDR: The master receives a not-acknowledge after the transmission of the address. Valid for the operation MW, MR.&lt;/li&gt;&lt;li&gt;001b: NACK_DATA: The master receives a not-acknowledge during the data phase of a MW operation. Valid for the operation MW.&lt;/li&gt;&lt;li&gt;011b: ARB_LOST: The master loses the arbitration during a MW or MR operation. Valid for the operation MW, MR.&lt;/li&gt;&lt;li&gt;100b: BERR_START: Slave restarts, a START Condition occurs while the byte transfer is not terminated.&lt;/li&gt;&lt;li&gt;101b: BERR_STOP: Slave reset, a STOP Condition while the byte transfer is not terminated.&lt;/li&gt;&lt;li&gt;110b: OVFL: The slave receives a frame related to the WTS operation longer than the maximum size = 2047 bytes. In this case the slave device returns a NACK to complete the data transfer. Valid for WTS operation&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>NACK_ADDR</name>
                                    <description>The master receives a not-acknowledge after the transmission of the address</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>NACK_DATA</name>
                                    <description>The master receives a not-acknowledge during the data phase of a MW operation</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ARB_LOST</name>
                                    <description>The master loses the arbitration during a MW or MR operation</description>
                                    <value>0x03</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BERR_START</name>
                                    <description>Slave restarts, a START Condition occurs while the byte transfer is not terminated</description>
                                    <value>0x04</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>BERR_STOP</name>
                                    <description>Slave reset, a STOP Condition while the byte transfer is not terminated</description>
                                    <value>0x05</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>OVFL</name>
                                    <description>The slave receives a frame related to the WTS operation longer than the maximum size = 2047 bytes</description>
                                    <value>0x06</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TYPE</name>
                            <description>Receive type. Valid only for the operation WTS:&lt;ul&gt;&lt;li&gt;00b: FRAME: The slave has received a normal frame.&lt;/li&gt;&lt;li&gt;01b: GCALL: The slave has received a general call. If the it I2C_CR:SGCM is set to 1, the general call is directly executed without software intervention and only the control code word is reported in FIFO (LENGTH =0).&lt;/li&gt;&lt;li&gt;10b: HW_GCALL: The slave has received a hardware general call.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FRAME</name>
                                    <description>The slave has received a normal frame</description>
                                    <value>0x00</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>GCALL</name>
                                    <description>The slave has received a general call</description>
                                    <value>0x01</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>HW_GCALL</name>
                                    <description>The slave has received a hardware general call</description>
                                    <value>0x02</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>LENGTH</name>
                            <description>Transfer length. For an MR, WTS operation the LENGTH field defines the actual size of the subsequent payload, in terms of number of bytes. For an MW, RFS operation the LENGTH field defines the actual number of bytes transferred by the master/slave device. For a WTS operation if the transfer length exceeds 2047 bytes, the operation is stopped by the slave returning a NACK handshake and the flag OVFL is set. For an RFS operation if the transfer length exceeds 2047 bytes, the operation continues normally but the LENGTH field is reset to 0.</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>10</bitWidth>
                        </field>
                        <field>
                            <name>DUALF</name>
                            <description>Dual flag (slave mode):&lt;ul&gt;&lt;li&gt;0: Received address matched with slave address (SA7).&lt;/li&gt;&lt;li&gt;1: Received address matched with dual slave address (DSA7).&lt;/li&gt;&lt;/ul&gt;Cleared by hardware after a Stop condition or repeated Start condition, bus error or when PE=0.</description>
                            <bitOffset>29</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DUAL_SLAVE_ADDR_OFF</name>
                                    <description>Received address matched with slave address (SA7)</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DUAL_SLAVE_ADDR_ON</name>
                                    <description>Received address matched with dual slave address (DSA7)</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RFR</name>
                    <description>I2C receive FIFO register</description>
                    <addressOffset>0x18</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        <field>
                            <name>RDATA</name>
                            <description>Receive data. RDATA contains the received payload, related to a master read or write-to-slave operation, to be read from the Rx FIFO. The RDATA(0) is the first LSB bit received over the I2C line. In case the FIFO is full, the I2C controller stretches automatically the I2C clock line until a new entry is available.&lt;p&gt;For a write-to-slave operation, when the slave is addressed, the interrupt I2C_RISR:WTSR bit is asserted for notification to the CPU. In CPU mode the FIFO management shall be based on the assertion of the interrupt bit I2C_RISR:RXFNF, related to the nearly-full threshold.&lt;/p&gt;&lt;p&gt;In DMA mode, the single requests are automatically executed based on the number of entries contained in the Rx FIFO.&lt;/p&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>8</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TFTR</name>
                    <description>I2C transmit FIFO threshold register</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x03FF</resetMask>
                    <fields>
                        <field>
                            <name>THRESH_TX</name>
                            <description>Threshold TX, contains the threshold value, in terms of number of bytes, of the Tx FIFO.&lt;p&gt;When the number of entries of the Tx FIFO is less or equal than the threshold value, the interrupt bit I2C_RISR:TXFNE is set in order to request the loading of data to the application.&lt;/p&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>10</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RFTR</name>
                    <description>I2C receive FIFO threshold register</description>
                    <addressOffset>0x20</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x03FF</resetMask>
                    <fields>
                        <field>
                            <name>THRESH_RX</name>
                            <description>Threshold RX, contains the threshold value, in terms of number of bytes, of the Rx FIFO.&lt;p&gt;When the number of entries of the RX FIFO is greater than or equal to the threshold value, the interrupt bit RISR:RXFNF is set in order to request the download of received data to the application. The application shall download the received data based on the threshold. (RISR:RXFNF).&lt;/p&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>10</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>DMAR</name>
                    <description>I2C DMA register</description>
                    <addressOffset>0x24</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x0F04</resetMask>
                    <fields>
                        <field>
                            <name>DBSIZE_TX</name>
                            <description>Destination burst size. This register field is valid only if the BURST_TX bit is set to '1'. If burst size is smaller than the transaction length, only single request are generated.</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>BURST_TX</name>
                            <description>Defines the type of DMA request generated by the DMA TX interface.&lt;ul&gt;&lt;li&gt;0: Single request mode. Transfers a single data (one byte) in the TX FIFO.&lt;/li&gt;&lt;li&gt;1: Burst request mode. Transfers a programmed burst of data according to DBSIZE_TX field.&lt;/li&gt;&lt;/ul&gt;When the burst mode is programmed, the DMA transfer can be completed by one or more single requests as required.</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>BRCR</name>
                    <description>I2C Baud-rate counter register</description>
                    <addressOffset>0x28</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0008</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>BRCNT</name>
                            <description>Baud rate counter. BRCNT defines the counter value used to set up the I2C baud rate in standard and fast mode, when the peripheral is operating in master mode.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>16</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IMSCR</name>
                    <description>I2C interrupt mask set/clear register</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>TXFEM</name>
                            <description>TX FIFO empty mask. TXFEM enables the interrupt bit TXFE:&lt;ul&gt;&lt;li&gt;0: TXFE interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: TXFE interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Disable the interrupt mask</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Enable the interrupt mask</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>TXFNEM</name>
                            <description>TX FIFO nearly empty mask. TXFNEM enables the interrupt bit TXFNE:&lt;ul&gt;&lt;li&gt;0: TXFNE interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: TXFNE interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>TXFFM</name>
                            <description>TX FIFO full mask. TXFFM enables the interrupt bit TXFF:&lt;ul&gt;&lt;li&gt;0: TXFF interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: TXFF interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>TXFOVRM</name>
                            <description>TX FIFO overrun mask. TXOVRM enables the interrupt bit TXOVR:&lt;ul&gt;&lt;li&gt;0: TXOVR interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: TXOVR interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>RXFEM</name>
                            <description>RX FIFO empty mask. RXFEM enables the interrupt bit RXFE:&lt;ul&gt;&lt;li&gt;0: RXFE interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: RXFE interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>RXFNFM</name>
                            <description>RX FIFO nearly full mask. RXNFM enables the interrupt bit RXNF:&lt;ul&gt;&lt;li&gt;0: RXNF interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: RXNF interrupt is enabled&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>RXFFM</name>
                            <description>RX FIFO full mask. RXFFM enables the interrupt bit RXFF:&lt;ul&gt;&lt;li&gt;0: RXFF interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: RXFF interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>RFSRM</name>
                            <description>Read-from-Slave request mask. RFSRM enables the interrupt bit RFSR:&lt;ul&gt;&lt;li&gt;0: RFSR interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: RFSR interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>RFSEM</name>
                            <description>Read-from-Slave empty mask. RFSEM enables the interrupt bit RFSE:&lt;ul&gt;&lt;li&gt;0: RFSE interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: RFSE interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>WTSRM</name>
                            <description>Write-to-Slave request mask. WTSRM enables the interrupt bit WTSR:&lt;ul&gt;&lt;li&gt;0: WTSR interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: WTSR interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>MTDM</name>
                            <description>Master Transaction done mask. MTDM enables the interrupt bit MTD:&lt;ul&gt;&lt;li&gt;0: MTD interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: MTD interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>STDM</name>
                            <description>Slave Transaction done mask. STDM enables the interrupt bit STD:&lt;ul&gt;&lt;li&gt;0: STDM interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: STDM interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>MALM</name>
                            <description>Master Arbitration lost mask. MALM enables the interrupt bit MAL:&lt;ul&gt;&lt;li&gt;0: MAL interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: MAL interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>BERRM</name>
                            <description>Bus Error mask. BERRM enables the interrupt bit BERR:&lt;ul&gt;&lt;li&gt;0: BERR interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: BERR interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                        </field>
                        <field derivedFrom="TXFEM">
                            <name>MTDWSM</name>
                            <description>Master Transaction done without stop mask. MTDWSM enables the interrupt bit MTDWS:&lt;ul&gt;&lt;li&gt;0: MTDWS interrupt is disabled.&lt;/li&gt;&lt;li&gt;1: MTDWS interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                        </field>
                        </fields>
                </register>
                <register>
                    <name>RISR</name>
                    <description>I2C raw interrupt status register</description>
                    <addressOffset>0x30</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000013</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>TXFE</name>
                            <description>TX FIFO empty. TXFE is set when TX FIFO is empty. This bit is self-cleared by writing in TX FIFO.&lt;ul&gt;&lt;li&gt;0: TX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: TX FIFO is empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFNE</name>
                            <description>TX FIFO nearly empty. TXFNE is set when the number of entries in TX FIFO is less than or equal to the threshold value programmed in the I2C_TFTR:THRESHOLD_TX register. It is self-cleared when the threshold level is over the programmed threshold.&lt;ul&gt;&lt;li&gt;0: Number of entries in TX FIFO greater than the TFTR:THRESHOLD_TX register.&lt;/li&gt;&lt;li&gt;1: Number of entries in TX FIFO less than or equal to the TFTR:THRESHOLD_TX register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFF</name>
                            <description>TX FIFO full. TXFF is set when a full condition occurs in TX FIFO. This bit is self-cleared when the TX FIFO is not full:&lt;ul&gt;&lt;li&gt;0: TX FIFO is not full.&lt;/li&gt;&lt;li&gt;1: TX FIFO is full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFOVR</name>
                            <description>TX FIFO overrun. TXFOVR is set when a write operation in TX FIFO is performed and TX FIFO is full. The application must avoid an overflow condition by a proper data flow control. Anyway in case of overrun, the application shall flush the transmitter (CR:FTX bit to set) because the TX FIFO content is corrupted (at least one word has been lost in FIFO). This interrupt is cleared by setting the related bit of the ICR register:&lt;ul&gt;&lt;li&gt;0: No overrun condition occurred in TX FIFO.&lt;/li&gt;&lt;li&gt;1: Overrun condition occurred in TX FIFO.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFE</name>
                            <description>RX FIFO empty. RXFE is set when the RX FIFO is empty. This bit is self-cleared when the slave RX FIFO is not empty:&lt;ul&gt;&lt;li&gt;0: RX FIFO is not empty..&lt;/li&gt;&lt;li&gt;1: RX FIFO is empty..&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFNF</name>
                            <description>RX FIFO nearly full. RXFNF is set when the number of entries in RX FIFO is greater than or equal to the threshold value programmed in the RFTR:THRESHOLD_RX register. Its self-cleared when the threshold level is under the programmed threshold:&lt;ul&gt;&lt;li&gt;0: Number of entries in the RX FIFO less than the RFTR:THRESHOLD_RX register.&lt;/li&gt;&lt;li&gt;1: Number of entries in the RX FIFO greater than or equal to the RFTR:THRESHOLD_RX register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFF</name>
                            <description>RX FIFO full. RXFF is set when a full condition occurs in RX FIFO. This bit is self-cleared when the data are read from the RX FIFO.&lt;ul&gt;&lt;li&gt;0: RX FIFO is not full.&lt;/li&gt;&lt;li&gt;1: RX FIFO is full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>LBR</name>
                            <description>Length number of bytes received. LBR is set in case of MR or WTS and when the number of bytes received is equal to the transaction length programmed in the MCR:LENGTH (master mode) or SMB_SCR:LENGTH (slave mode). On the assertion of this interrupt and when the bit CR:FRC_STRTCH is set, the hardware starts clock stretching, the CPU shall download the data byte (Command code, Byte Count, Data...) from RX FIFO, re-set the expected length of the transaction in SMB_SCR:LENGTH and clear the interrupt. When clearing this interrupt the hardware continues the transfer. This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: Length number of bytes is not received.&lt;/li&gt;&lt;li&gt;1: Length number of bytes is received.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSR</name>
                            <description>Read-from-slave request. RFSR is set when a read-from-slave "Slavetransmitter" request is received (I2C slave is addressed) from the I2C line. On the assertion of this interrupt the TX FIFO is flushed (pending data are cleared) and the CPU shall put the data in TX FIFO. This bit is self-cleared by writing data in FIFO. In case the FIFO is empty before the completion of the read operation, the RISR:RFSE interrupt bit is set.This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: Read-from-slave request has been served.&lt;/li&gt;&lt;li&gt;1: Read-from-slave request is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSE</name>
                            <description>Read-from-Slave empty. RFSE is set when a read-from-slave operation is in progress and TX FIFO is empty. On the assertion of this interrupt, the CPU shall download in TX FIFO the data required for the slave operation. This bit is self-cleared by writing in TX FIFO. At the end of the read-from-slave operation this bit is cleared although the TX FIFO is empty.&lt;ul&gt;&lt;li&gt;0: TX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: TX FIFO is empty with the read-from-slave operation in progress.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WTSR</name>
                            <description>Write-to-Slave request. WTSR is set when a write-to-slave operation is received (I2C slave is addressed) from the I2C line. This notification can be used by the application to program the DMA descriptor when required. This interrupt is cleared by setting the related bit of the ICR register:&lt;ul&gt;&lt;li&gt;0: No write-to-slave request pending.&lt;/li&gt;&lt;li&gt;1: Write-to-slave request is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTD</name>
                            <description>Master Transaction done. MTD is set when a master operation (master write or master read) has been executed after a stop condition. The application shall read the related transaction status (SR register), the pending data in the RX FIFO (only for a master read operation) and clear this interrupt (transaction acknowledgment). A subsequent master operation can be issued (writing the MCR register) after the clearing of this interrupt. A subsequent slave operation will be notified (RISR:WTSR and RISR:RFSR interrupt bits assertion) after clearing this interrupt, meanwhile the I2C clock line will be stretched low. This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: Master transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Master transaction done (ready for acknowledgment).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>STD</name>
                            <description>Slave Transaction done. STD is set when a slave operation (write-to-slave or read-from-slave) has been executed. The application shall read the related transaction status (SR register), the pending data in the RX FIFO (only for a write-to-slave operation) and clear this interrupt (transaction acknowledgment). A subsequent slave operation will be notified (RISR:WTSR and RISR:RFSR interrupt bits assertion) after clearing this interrupt, meanwhile the I2C clock line will be stretched low. A subsequent master operation can be issued (by writing the MCR register) after clearing this interrupt. This interrupt is cleared by setting the related bit of the ICR register:&lt;ul&gt;&lt;li&gt;0: Slave transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Slave transaction done (ready for acknowledgment).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>SAL</name>
                            <description>Slave Arbitration lost. SAL is set when the slave loses the arbitration during the data phase. A collision occurs when 2 devices transmit simultaneously 2 opposite values on the serial data line. The device that is pulling up the line, identifies the collision reading a 0 value on the sda_in signal, stops the transmission, releases the bus and waits for the idle state (STOP condition received) on the bus line. The device which transmits the first unique zero wins the bus arbitration. This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: No slave arbitration lost.&lt;/li&gt;&lt;li&gt;1: Slave arbitration lost.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MAL</name>
                            <description>Master arbitration lost. MAL is set when the master loses the arbitration. The status code word in the SR contains a specific error tag (CAUSE field) for this error condition. A collision occurs when 2 stations transmit simultaneously 2 opposite values on the serial line. The station that is pulling up the line, identifies the collision reading a 0 value on the sda_in signal, stops the transmission, leaves the bus and waits for the idle state (STOP condition received) on the bus line before retrying the same transaction. The station which transmits the first unique zero wins the bus arbitration. This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: No master arbitration lost.&lt;/li&gt;&lt;li&gt;1: Master arbitration lost.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BERR</name>
                            <description>Bus Error. BERR is set when an unexpected Start/Stop condition occurs during a transaction. The related actions are different, depending on the type of operation in progress.The status code word in the SR contains a specific error tag (CAUSE field) for this error condition. This interrupt is cleared by setting the related bit of the ICR register.&lt;ul&gt;&lt;li&gt;0: No bus error detection.&lt;/li&gt;&lt;li&gt;1: Bus error detection.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTDWS</name>
                            <description>Master transaction done without stop. MTDWS is set when a master operation (write or read) has been executed and a stop (MCR:P field) is not programmed. The application shall read the related transaction status (SR register), the pending data in the RX FIFO (only for a master read operation) and clear this interrupt (transaction acknowledgment). A subsequent master operation can be issued (by writing the MCR register) after clearing this interrupt. A subsequent slave operation will be notified (RISR:WTSR and RISR:RFSR interrupt bits assertion) after clearing this interrupt, meanwhile the I2C clock line will be stretched low. This interrupt is cleared by setting the related bit of the ICR register:&lt;ul&gt;&lt;li&gt;0: Master transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Master transaction done (ready for acknowledgment) and stop is not applied into the I2C bus.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        </fields>
                </register>
                <register>
                    <name>MISR</name>
                    <description>I2C masked interrupt status register</description>
                    <addressOffset>0x34</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>TXFEMIS</name>
                            <description>TX FIFO empty masked interrupt status.&lt;ul&gt;&lt;li&gt;0: TX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: TX FIFO is empty.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFNEMIS</name>
                            <description>TX FIFO nearly empty masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Number of entries in TX FIFO greater than the TFTR:THRESHOLD_TX register.&lt;/li&gt;&lt;li&gt;1: Number of entries in TX FIFO less than or equal to the TFTR:THRESHOLD_TX register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFFMIS</name>
                            <description>Tx FIFO full masked interrupt status.&lt;ul&gt;&lt;li&gt;0: TX FIFO is not full.&lt;/li&gt;&lt;li&gt;1: TX FIFO is full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TXFOVRMIS</name>
                            <description>Tx FIFO overrun masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No overrun condition occurred in TX FIFO.&lt;/li&gt;&lt;li&gt;1: Overrun condition occurred in TX FIFO.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFEMIS</name>
                            <description>RX FIFO empty masked interrupt status.&lt;ul&gt;&lt;li&gt;0: RX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: RX FIFO is empty..&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFNFMIS</name>
                            <description>RX FIFO nearly full masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Number of entries in the RX FIFO less than the RFTR:THRESHOLD_RX register.&lt;/li&gt;&lt;li&gt;1: Number of entries in the RX FIFO greater than or equal to the RFTR:THRESHOLD_RX register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RXFFMIS</name>
                            <description>RX FIFO full masked interrupt status.&lt;ul&gt;&lt;li&gt;0: RX FIFO is not full.&lt;/li&gt;&lt;li&gt;1: RX FIFO is full.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>LBRMIS</name>
                            <description>Length number of bytes received masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Length number of bytes is not received.&lt;/li&gt;&lt;li&gt;1: Length number of bytes is received.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSRMIS</name>
                            <description>Read-from-Slave request masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Read-from-slave request has been served.&lt;/li&gt;&lt;li&gt;1: Read-from-slave request is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSEMIS</name>
                            <description>Read-from-Slave empty masked interrupt status.&lt;ul&gt;&lt;li&gt;0: TX FIFO is not empty.&lt;/li&gt;&lt;li&gt;1: TX FIFO is empty with the read-from-slave operation in progress.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WTSRMIS</name>
                            <description>Write-to-Slave request masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No write-to-slave request pending.&lt;/li&gt;&lt;li&gt;1: Write-to-slave request is pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTDMIS</name>
                            <description>Master Transaction done masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Master transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Master transaction done (ready for acknowledgment).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>STDMIS</name>
                            <description>Slave Transaction done masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Slave transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Slave transaction done (ready for acknowledgment).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>SALMIS</name>
                            <description>Slave Arbitration lost masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No slave arbitration lost.&lt;/li&gt;&lt;li&gt;1: Slave arbitration lost.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MALMIS</name>
                            <description>Master Arbitration lost masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No master arbitration lost.&lt;/li&gt;&lt;li&gt;1: Master arbitration lost.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BERRMIS</name>
                            <description>Bus Error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No bus error detection.&lt;/li&gt;&lt;li&gt;1: Bus error detection.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTDWSMIS</name>
                            <description>Master Transaction done without stop masked interrupt status.&lt;ul&gt;&lt;li&gt;0: Master transaction acknowledged.&lt;/li&gt;&lt;li&gt;1: Master transaction done (ready for acknowledgment) and stop is not applied into the I2C bus.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TIMEOUTMIS</name>
                            <description>Timeout or Tlow error masked interrupt status.&lt;ul&gt;&lt;li&gt;0: No timeout error.&lt;/li&gt;&lt;li&gt;1: SCL remained LOW for 25 ms (Timeout).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>30</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ICR</name>
                    <description>I2C interrupt clear register</description>
                    <addressOffset>0x38</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <modifiedWriteValues>oneToClear</modifiedWriteValues>
                    <fields>
                        <field>
                            <name>TXFOVRIC</name>
                            <description>Tx FIFO overrun interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>LBRIC</name>
                            <description>Length number of bytes received interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSRIC</name>
                            <description>Read-from-Slave request interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>RFSEIC</name>
                            <description>Read-from-Slave empty interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>WTSRIC</name>
                            <description>Write-to-Slave request interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTDIC</name>
                            <description>Master Transaction done interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>STDIC</name>
                            <description>Slave Transaction done interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>SALIC</name>
                            <description>Slave Arbitration lost interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MALIC</name>
                            <description>Master Arbitration lost interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>BERRIC</name>
                            <description>Bus Error interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>MTDWSIC</name>
                            <description>Master Transaction done without stop interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TIMEOUTIC</name>
                            <description>Timeout or Tlow error interrupt clear.&lt;ul&gt;&lt;li&gt;0: Has no effect.&lt;/li&gt;&lt;li&gt;1: Clears interrupt pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>30</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>THDDAT</name>
                    <description>I2C hold time data</description>
                    <addressOffset>0x4C</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0014</resetValue>
                    <resetMask>0x01FF</resetMask>
                    <fields>
                        <field>
                            <name>THDDAT</name>
                            <description>Hold time data value. In master or slave mode, when the I2C controller detects a falling edge in the SCL line, the counter, which is loaded by the THDDAT, is launched. Once the THDDAT value is reached, the data is transferred.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>THDSTA_FST_STD</name>
                    <description>I2C hold time start condition F/S</description>
                    <addressOffset>0x50</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x003F00E2</resetValue>
                    <resetMask>0x01FF01FF</resetMask>
                    <fields>
                        <field>
                            <name>THDSTA_STD</name>
                            <description>Hold time start condition value for standard mode. When the start condition is asserted, the decimeter loads the value of THDSTA_STD for standard mode, once the THDSTA_STD value is reached, the SCL line asserts low.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                        <field>
                            <name>THDSTA_FST</name>
                            <description>Hold time start condition value for fast mode. When the start condition is asserted, the decimeter loads the value of THDSTA_FST for fast mode, once the THDSTA_FST value is reached, the SCL line assert slow.</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TSUSTA_FST_STD</name>
                    <description>I2C setup time start condition F/S</description>
                    <addressOffset>0x58</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x001D00E2</resetValue>
                    <resetMask>0x01FF01FF</resetMask>
                    <fields>
                        <field>
                            <name>TSUSTA_STD</name>
                            <description>Setup time start condition value for standard mode. After a non-stop on the SCL line the decimeter loads the value of TSUSTA_STD according to standard mode. Once the counter is expired, the start condition is generated.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                        <field>
                            <name>TSUSTA_FST</name>
                            <description>Setup time start condition value for fast mode. After a non-stop on the SCL line the decimeter loads the value of TSUSTA_FST according to fast mode. Once the counter is expired the start condition is generated.</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                    </fields>
                </register>
                </registers>
        </peripheral>
        <peripheral derivedFrom="I2C2">
            <name>I2C1</name>
            <description>I2C1</description>
            <baseAddress>0x40B00000</baseAddress>
            <interrupt>
                <name>I2C1</name>
                <description>I2C 1 interrupt</description>
                <value>15</value>
            </interrupt>
        </peripheral>
        <peripheral>
            <name>AHBUPCONV</name>
            <version>1.0</version>
            <description>AHB up/down converter converter</description>
            <groupName>AHBUPCONV</groupName>
            <baseAddress>0x40C00000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>COMMAND</name>
                    <description>AHB up/down converter command register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                    <fields>
                        </fields>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>MFT1</name>
            <version>1.0</version>
            <description>MFT1</description>
            <groupName>MFTX</groupName>
            <baseAddress>0x40D00000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <headerStructName>MFT</headerStructName>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>MFT1A</name>
                <description>Multi functional timer MFT1 interrupt A</description>
                <value>17</value>
            </interrupt>
            <interrupt>
                <name>MFT1B</name>
                <description>Multi functional timer MFT1 interrupt B</description>
                <value>18</value>
            </interrupt>
            <registers>
                <register>
                    <name>TNCNT1</name>
                    <description>Timer / Counter1 register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>TNCRA</name>
                    <description>Capture / Reload A register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>TNCRB</name>
                    <description>Capture / Reload B register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>TNCNT2</name>
                    <description>Timer / Counter2 register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                </register>
                <register>
                    <name>TNPRSC</name>
                    <description>Clock prescaler register</description>
                    <addressOffset>0x10</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0xFF</resetMask>
                </register>
                <register>
                    <name>TNCKC</name>
                    <description>Clock unit control register</description>
                    <addressOffset>0x14</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x3F</resetMask>
                    <fields>
                        <field>
                            <name>TNC1CSEL</name>
                            <description>Define the clock mode for timer/counter 1:&lt;ul&gt;&lt;li&gt;000b: No clock (Timer/Counter 1 stopped).&lt;/li&gt;&lt;li&gt;001b: Prescaled system clock.&lt;/li&gt;&lt;li&gt;010b: External event on TnB (mode 1 and 3 only).&lt;/li&gt;&lt;li&gt;011b: Pulse accumulate (mode 1 and 3 only).&lt;/li&gt;&lt;li&gt;100b: Low-speed clock.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>3</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>NO_CLOCK</name>
                                    <description>No clock (Timer/Counter 1 stopped)</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>PRESCALED</name>
                                    <description>Prescaled system clock pclk</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>EXTERNAL_EVENT</name>
                                    <description>External event on TnB</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>PULSE_ACCUMULATE</name>
                                    <description>Pulse accumulate</description>
                                    <value>3</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>LOW_SPEED_CLOCK</name>
                                    <description>Low-speed clock slow_clk_c</description>
                                    <value>4</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="TNC1CSEL">
                            <name>TNC2CSEL</name>
                            <description>Define the clock mode for timer/counter 2:&lt;ul&gt;&lt;li&gt;000b: No clock (Timer/Counter 1 stopped).&lt;/li&gt;&lt;li&gt;001b: Prescaled system clock.&lt;/li&gt;&lt;li&gt;010b: External event on TnB (mode 1 and 3 only).&lt;/li&gt;&lt;li&gt;011b: Pulse accumulate (mode 1 and 3 only).&lt;/li&gt;&lt;li&gt;100b: Low-speed clock.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TNMCTRL</name>
                    <description>Timer mode control register</description>
                    <addressOffset>0x18</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>TNMDSEL</name>
                            <description>MFTX mode select:&lt;ul&gt;&lt;li&gt;00b: Mode 1 or 1a: PWM mode and system timer or pulse train.&lt;/li&gt;&lt;li&gt;01b: Mode 2: Dual-input capture and system timer.&lt;/li&gt;&lt;li&gt;10b: Mode 3: Dual independent timer/counter.&lt;/li&gt;&lt;li&gt;11b: Mode 4: Single timer and single input capture.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>2</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>PWM</name>
                                    <description>PWM mode and system timer or pulse train</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DUAL_INPUT_CAPTURE</name>
                                    <description>Dual-input capture and system timer</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>DUAL_INDEPENDENT</name>
                                    <description>Dual independent timer/counter</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SINGLE</name>
                                    <description>Single timer and single input capture</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TNAEDG</name>
                            <description>TnA edge polarity:&lt;ul&gt;&lt;li&gt;0: Input is sensitive to falling edges.&lt;/li&gt;&lt;li&gt;1: Input is sensitive to rising edges.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FALLING_EDGE</name>
                                    <description>Input is sensitive to falling edges</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>RISING_EDGE</name>
                                    <description>Input is sensitive to rising edges</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field derivedFrom="TNAEDG">
                            <name>TNBEDG</name>
                            <description>TnB edge polarity:&lt;ul&gt;&lt;li&gt;0: Input is sensitive to falling edges.&lt;/li&gt;&lt;li&gt;1: Input is sensitive to rising edges.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNAEN</name>
                            <description>TnA enable:&lt;ul&gt;&lt;li&gt;0: TnA in disable.&lt;/li&gt;&lt;li&gt;1: TnA in enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TNA_IN_DISABLE</name>
                                    <description>TnA in disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TNA_IN_ENABLE</name>
                                    <description>TnA in enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TNBEN</name>
                            <description>TnB enable:&lt;ul&gt;&lt;li&gt;0: TnB in disable.&lt;/li&gt;&lt;li&gt;1: TnB in enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>TNB_IN_DISABLE</name>
                                    <description>TNB in disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TNB_IN_ENABLE</name>
                                    <description>TNB in enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TNAOUT</name>
                            <description>TnA output data:&lt;ul&gt;&lt;li&gt;0: Pin is low.&lt;/li&gt;&lt;li&gt;1: Pin is high.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>LOW</name>
                                    <description>Pin is low</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>HIGH</name>
                                    <description>Pin is high</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TNEN</name>
                            <description>MFTX enable:&lt;ul&gt;&lt;li&gt;0: MFTX disable.&lt;/li&gt;&lt;li&gt;1: MFTX enable.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>MFTX_DISABLE</name>
                                    <description>MFTX disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MFTX_ENABLE</name>
                                    <description>MFTX enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TNPTEN</name>
                            <description>Tn pulse-train mode enable:&lt;ul&gt;&lt;li&gt;0: Mode 1a not selected.&lt;/li&gt;&lt;li&gt;1: Mode 1a selected (if TnMDSEL = 00).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNPTSE</name>
                            <description>Tn pulse-train sofware trigger enable:&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Pulse-train generation trigger (in mode 1a)&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNPTET</name>
                            <description>Tn pulse-train event trigger:&lt;ul&gt;&lt;li&gt;0: No pulse-train event trigger occurred.&lt;/li&gt;&lt;li&gt;1: Pulse-train event trigger occurred (in mode 1a).&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TNICTRL</name>
                    <description>Timer interrupt control register</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0xFFFF</resetMask>
                    <fields>
                        <field>
                            <name>TNAPND</name>
                            <description>Timer interrupt A pending:&lt;ul&gt;&lt;li&gt;0: No interrupt source pending.&lt;/li&gt;&lt;li&gt;1: Interrupt source pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>TNBPND</name>
                            <description>Timer interrupt B pending:&lt;ul&gt;&lt;li&gt;0: No interrupt source pending.&lt;/li&gt;&lt;li&gt;1: Interrupt source pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>TNCPND</name>
                            <description>Timer interrupt C pending:&lt;ul&gt;&lt;li&gt;0: No interrupt source pending.&lt;/li&gt;&lt;li&gt;1: Interrupt source pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>TNDPND</name>
                            <description>Timer interrupt D pending:&lt;ul&gt;&lt;li&gt;0: No interrupt source pending.&lt;/li&gt;&lt;li&gt;1: Interrupt source pending.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>TNAIEN</name>
                            <description>Timer interrupt A enable:&lt;ul&gt;&lt;li&gt;0: Interrupt disabled.&lt;/li&gt;&lt;li&gt;1: Interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNBIEN</name>
                            <description>Timer interrupt B enable:&lt;ul&gt;&lt;li&gt;0: Interrupt disabled.&lt;/li&gt;&lt;li&gt;1: Interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNCIEN</name>
                            <description>Timer interrupt C enable:&lt;ul&gt;&lt;li&gt;0: Interrupt disabled.&lt;/li&gt;&lt;li&gt;1: Interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNDIEN</name>
                            <description>Timer interrupt D enable:&lt;ul&gt;&lt;li&gt;0: Interrupt disabled.&lt;/li&gt;&lt;li&gt;1: Interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TNICLR</name>
                    <description>Timer interrupt clear register</description>
                    <addressOffset>0x20</addressOffset>
                    <size>8</size>
                    <access>write-only</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x000F</resetMask>
                    <fields>
                        <field>
                            <name>TNACLR</name>
                            <description>Clear timer interrupt source A.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNBCLR</name>
                            <description>Clear timer interrupt source B.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNCCLR</name>
                            <description>Clear timer interrupt source C.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TNDCLR</name>
                            <description>Clear timer interrupt source D.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral derivedFrom="MFT1">
            <name>MFT2</name>
            <baseAddress>0x40E00000</baseAddress>
            <interrupt>
                <name>MFT2A</name>
                <description>Multi functional timer MFT2 interrupt A</description>
                <value>19</value>
            </interrupt>
            <interrupt>
                <name>MFT2B</name>
                <description>Multi functional timer MFT2 interrupt B</description>
                <value>20</value>
            </interrupt>
        </peripheral>        
        <peripheral>
            <name>RTC</name>
            <version>1.0</version>
            <description>Real-Time Counter</description>
            <groupName>TIMER</groupName>
            <baseAddress>0x40F00000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>RTC</name>
                <description>RTC interrupt</description>
                <value>21</value>
            </interrupt>
            <registers>
                <register>
                    <name>CWDR</name>
                    <description>Clockwatch Data Register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x02120000</resetValue>
                    <resetMask>0x3FFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CWSEC</name>
                            <description>RTC clockwatch second value. Clockwatch seconds: 0 to 59 (max 0x3B).</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWMIN</name>
                            <description>RTC clockwatch minute value. Clockwatch seconds: 0 to 59 (max 0x3B).</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWHOUR</name>
                            <description>RTC clockwatch hour value. Clockwatch seconds: 0 to 23 (max 0x17).</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYW</name>
                            <description>RTC clockwatch day of week value. Clockwatch day of week:&lt;ul&gt;&lt;li&gt;001b: Sunday.&lt;/li&gt;&lt;li&gt;010b: Monday.&lt;/li&gt;&lt;li&gt;011b: Tuesday.&lt;/li&gt;&lt;li&gt;100b: Wednesday.&lt;/li&gt;&lt;li&gt;101b: Thursday.&lt;/li&gt;&lt;li&gt;110b: Friday.&lt;/li&gt;&lt;li&gt;111b: Saturday.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYM</name>
                            <description>RTC clockwatch day of month value: 1 to 28/29/30 or 31. Range of value to program depends on the month:&lt;ul&gt;&lt;li&gt;1 to 28: February month, non-leap year.&lt;/li&gt;&lt;li&gt;1 to 29: February month, leap year.&lt;/li&gt;&lt;li&gt;1 to 30: April, June, September, November month.&lt;/li&gt;&lt;li&gt;1 to 31: January, March, May, August, October, December month.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWMONTH</name>
                            <description>RTC clockwatch month value:&lt;ul&gt;&lt;li&gt;0001b: January.&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;1100: December.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>4</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CWDMR</name>
                    <description>Clockwatch Data Match Register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x3FFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CWSECM</name>
                            <description>RTC clockwatch second match value:&lt;ul&gt;&lt;li&gt;00 0000 to 11 1011: (0 to 59 or 0x00 to 0x3B) clockwatch seconds.&lt;/li&gt;&lt;li&gt;11 1100 to 11 1111 - (60 to 63 or 0x3C to 0x3F).&lt;/li&gt;&lt;/ul&gt;Non-valid data, match never occurs.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWMINM</name>
                            <description>RTC clockwatch minute match value:&lt;ul&gt;&lt;li&gt;00 0000 to 11 1011: (0 to 59 or 0x00 to 0x3B) clockwatch minutes.&lt;/li&gt;&lt;li&gt;11 1100 to 11 1111 - (60 to 63 or 0x3C to 0x3F).&lt;/li&gt;&lt;/ul&gt;Non-valid data, match never occurs.</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWHOURM</name>
                            <description>RTC clockwatch hour match value:&lt;ul&gt;&lt;li&gt;00000b to 10111b: (0 to 23 or 0x00 to 0x17) hour match value.&lt;/li&gt;&lt;li&gt;11000b to 11111b - (24 to 31 or 0x18 to 0x1F).&lt;/li&gt;&lt;/ul&gt;Non-valid data, match never occurs.</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYWM</name>
                            <description>RTC clockwatch day of week match value:&lt;ul&gt;&lt;li&gt;000b: day of week is don't care in the comparison. (Default value after PORn).&lt;/li&gt;&lt;li&gt;001b to 111b: (1 to 7) day of week match value.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYMM</name>
                            <description>RTC clockwatch day of month match value:&lt;ul&gt;&lt;li&gt;0000b: (month is don't care in the comparison. Default value after PORn).&lt;/li&gt;&lt;li&gt;1 to 31: day of month match value.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWMONTHM</name>
                            <description>RTC clockwatch month match value:&lt;ul&gt;&lt;li&gt;0000b: (day of month is don't care in the comparison. Default value after PORn).&lt;/li&gt;&lt;li&gt;0001b to 1100b: (1 to 12) month match value.&lt;/li&gt;&lt;li&gt;1101b (13, 0xD) to 1111b (0xF) non-valid data, match never occurs.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>4</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CWDLR</name>
                    <description>Clockwatch Data Load Register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x3FFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CWSECL</name>
                            <description>RTC clockwatch second load value. Clockwatch seconds from 0 to 59 (0x3B). Other values must not be used.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWMINL</name>
                            <description>RTC clockwatch minute load value. Clockwatch minutes from 0 to 59 (0x3B). Other values must not be used.</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>6</bitWidth>
                        </field>
                        <field>
                            <name>CWHOURL</name>
                            <description>RTC clockwatch hour load value. Clockwatch hours from 0 to 23 (0x17). Other values must not be used.</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYWL</name>
                            <description>RTC clockwatch day of week load value. Clockwatch day of week:&lt;ul&gt;&lt;li&gt;000b: Must not be used.&lt;/li&gt;&lt;li&gt;001b: Sunday.&lt;/li&gt;&lt;li&gt;010b: Monday.&lt;/li&gt;&lt;li&gt;011b: Tuesday.&lt;/li&gt;&lt;li&gt;100b: Wednesday.&lt;/li&gt;&lt;li&gt;101b: Thursday.&lt;/li&gt;&lt;li&gt;110b: Friday.&lt;/li&gt;&lt;li&gt;111b: Saturday.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>3</bitWidth>
                        </field>
                        <field>
                            <name>CWDAYML</name>
                            <description>RTC clockwatch day of month load value. 1 to 28/29/30 or 31 depending on month:&lt;ul&gt;&lt;li&gt;1 to 28: February month, non-leap year.&lt;/li&gt;&lt;li&gt;1 to 29: February month, leap year.&lt;/li&gt;&lt;li&gt;1 to 30: April, June, September, November month.&lt;/li&gt;&lt;li&gt;1 to 31: January, March, May, August, October, December month.&lt;/li&gt;&lt;li&gt;Other values must not be used.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>5</bitWidth>
                        </field>
                        <field>
                            <name>CWMONTHL</name>
                            <description>RTC clockwatch month load value:&lt;ul&gt;&lt;li&gt;0001b: January.&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;1100: December.&lt;/li&gt;&lt;/ul&gt;Other values must not be used.</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>4</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CWYR</name>
                    <description>Clockwatch Year Register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x2000</resetValue>
                    <resetMask>0x3FFF</resetMask>
                    <fields>
                        <field>
                            <name>CWYEAR</name>
                            <description>RTC clockwatch year value. Clockwatch year, in BCD format is from 0 to 3999.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>14</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CWYMR</name>
                    <description>Clockwatch Year Match Register</description>
                    <addressOffset>0x10</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x2000</resetValue>
                    <resetMask>0x3FFF</resetMask>
                    <fields>
                        <field>
                            <name>CWYEARM</name>
                            <description>RTC clockwatch year match value. Clockwatch year match value is in BCD format from 0 to 3999.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>14</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CWYLR</name>
                    <description>Clockwatch Year Load Register</description>
                    <addressOffset>0x14</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x3FFF</resetMask>
                    <fields>
                        <field>
                            <name>CWYEARL</name>
                            <description>RTC clockwatch year load value. Clockwatch year load value is in BCD format from 0 to 3999.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>14</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CTCR</name>
                    <description>Control Trim and Counter Register</description>
                    <addressOffset>0x18</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00007FFF</resetValue>
                    <resetMask>0x0FFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>CKDIV</name>
                            <description>Clock divider factor. This value plus one represents the integer part of the CLK32K clock divider used to produce the reference 1 Hz clock.&lt;ul&gt;&lt;li&gt;0x000: CLK1HZ clock is similar to CLK32K for RTC timer and stopped for RTC clockwatch.&lt;/li&gt;&lt;li&gt;0x0001: 2 CLK32K clock cycles per CLK1HZ clock cycle.&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x7FFF: 32768 CLK32K clock cycles per CLK1HZ clock cycle (default value after PORn reset).&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0xFFFF: CLK32K clock cycles per CLK1HZ clock cycle.&lt;/li&gt;&lt;/ul&gt;Writing to this bit-field will be disregarded if CWEN = 1. A read returns the value of the CKDIV bit-field.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>15</bitWidth>
                        </field>
                        <field>
                            <name>CKDEL</name>
                            <description>Trim delete count. This value represents the number of CLK32K clock pulses to delete every 1023 CLK32K clock cycles to get a better reference 1 Hz clock for incrementing the RTC counter.&lt;ul&gt;&lt;li&gt;0x000: No CLK32K clock cycle is deleted every 1023 CLK1HZ clock cycles (default value after PORn reset).&lt;/li&gt;&lt;li&gt;0x001: 1 CLK32K clock cycle is deleted every 1023 CLK1HZ clock cycles.&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;0x3FF: 1023 CLK32K clock cycles are deleted every 1023 CLK1HZ clock cycles.&lt;/li&gt;&lt;/ul&gt;Writing to this bit-field will be disregarded if CWEN = 1. A read returns the value of the CKDEL bit-field.</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>10</bitWidth>
                        </field>
                        <field>
                            <name>CWEN</name>
                            <description>Clockwatch enable bit. When set to 1, the clockwatch is enabled. Once it is enabled, any write to this register has no effect until a power-on reset. A read returns the value of the CWEN bit value.</description>
                            <bitOffset>26</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IMSC</name>
                    <description>RTC interrupt mask register</description>
                    <addressOffset>0x1C</addressOffset>
                    <size>8</size>
                    <access>read-write</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x03</resetMask>
                    <fields>
                        <field>
                            <name>WIMSC</name>
                            <description>RTC clock watch interrupt enable bit:&lt;ul&gt;&lt;li&gt;When set to 0, clears the interrupt mask (default after PORn reset). The interrupt is disabled.&lt;/li&gt;&lt;li&gt;When set to 1, the interrupt for RTC clockwatch interrupt is enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TIMSC</name>
                            <description>RTC timer interrupt enable bit:&lt;ul&gt;&lt;li&gt;When set to 0, sets the mask for RTC timer interrupt (default after PORn reset). The interrupt is disabled.&lt;/li&gt;&lt;li&gt;When set to 1, clears this mask and enables the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>RIS</name>
                    <description>RTC raw interrupt status register</description>
                    <addressOffset>0x20</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x03</resetMask>
                    <fields>
                        <field>
                            <name>WRIS</name>
                            <description>RTC clock watch raw interrupt status bit. Gives the raw interrupt state (prior to masking) of the RTC clock watch interrupt.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TRIS</name>
                            <description>RTC timer raw interrupt status bit. Gives the raw interrupt state (prior to masking) of the RTC timer interrupt.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>MIS</name>
                    <description>RTC masked interrupt status register</description>
                    <addressOffset>0x24</addressOffset>
                    <size>8</size>
                    <access>read-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x03</resetMask>
                    <fields>
                        <field>
                            <name>WMIS</name>
                            <description>RTC clock watch interrupt status bit. Gives the masked interrupt status (after masking) of the RTC clock watch interrupt WINTR.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TMIS</name>
                            <description>RTC timer interrupt status bit. Gives the masked interrupt status (after masking) of the RTC timer interrupt TINTR.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>ICR</name>
                    <description>RTC interrupt clear register</description>
                    <addressOffset>0x28</addressOffset>
                    <size>8</size>
                    <access>write-only</access>
                    <resetValue>0x00</resetValue>
                    <resetMask>0x01</resetMask>
                    <modifiedWriteValues>oneToClear</modifiedWriteValues>
                    <fields>
                        <field>
                            <name>WIC</name>
                            <description>RTC clock watch interrupt clear register bit. Clears the RTC clock watch interrupt WINTR.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TIC</name>
                            <description>RTC timer interrupt clear register bit. Clears the RTC timer interrupt TINTR.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TDR</name>
                    <description>RTC timer load value</description>
                    <addressOffset>0x2C</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0xFFFFFFFF</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TCR</name>
                    <description>RTC timer control register</description>
                    <addressOffset>0x30</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <resetMask>0x1FFF</resetMask>
                    <fields>
                        <field>
                            <name>OS</name>
                            <description>RTC Timer one shot count.&lt;ul&gt;&lt;li&gt;0: Periodic mode (default). When reaching zero, the RTC timer raises its interrupt and is reloaded from the LD content.&lt;/li&gt;&lt;li&gt;1: One-shot mode. When reaching zero, the RTC timer raise its interrupt and stops.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>EN</name>
                            <description>RTC Timer enable bit.&lt;ul&gt;&lt;li&gt;0: The RTC timer is stopped on the next CLK32K cycle.&lt;/li&gt;&lt;li&gt;1: The RTC timer is enabled on the next CLK32K cycle.&lt;/li&gt;&lt;/ul&gt;When the RTC timer is stopped, the content of the counter is frozen. A read returns the value of the EN bit. This bit set by hardware when the TLR register is written to while the counter is stopped. When the device is active, this bit is cleared by hardware when the counter reaches zero in one-shot mode.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>S</name>
                            <description>RTC Timer self start bit. When written to 1b, each write in a load register or a pattern will set EN to 1b, so, start the counter in the next CLK32K cycle.</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>SP</name>
                            <description>RTC Timer Pattern size. Number of pattern bits crossed by the pointer. It defines the useful pattern size.</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>7</bitWidth>
                        </field>
                        <field>
                            <name>CLK</name>
                            <description>RTC Timer clock.&lt;ul&gt;&lt;li&gt;0: The RTC timer is clocked by CLK32K.&lt;/li&gt;&lt;li&gt;1: The RTC timer is clocked by the trimmed clock.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>KHZ32_CLK</name>
                                    <description>RTC timer is clocked by CLK32K</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>TRIMMED_CLK</name>
                                    <description>RTC timer is clocked by the trimmed clock</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>BYPASS_GATED</name>
                            <description>Enable or disable the internal clock gating:&lt;ul&gt;&lt;li&gt;0: The internal clock gating is activated.&lt;/li&gt;&lt;li&gt;1: No clock gating, clock is always enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>TLR1</name>
                    <description>RTC Timer first Load Register</description>
                    <addressOffset>0x34</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TLR2</name>
                    <description>RTC Timer second Load Register</description>
                    <addressOffset>0x38</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TPR1</name>
                    <description>RTC Timer Pattern Register (pattern[31:0])</description>
                    <addressOffset>0x3C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TPR2</name>
                    <description>RTC Timer Pattern Register (pattern[63:32])</description>
                    <addressOffset>0x40</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TPR3</name>
                    <description>RTC Timer Pattern Register (pattern[95:64])</description>
                    <addressOffset>0x44</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TPR4</name>
                    <description>RTC Timer Pattern Register (pattern[127:96])</description>
                    <addressOffset>0x48</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                <register>
                    <name>TIN</name>
                    <description>RTC Timer Interrupt Number Register</description>
                    <addressOffset>0x4C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>BLUE_CTRL</name>
            <version>1.0</version>
            <description>BLUE Controller</description>
            <groupName>BLUE_CTRL</groupName>
            <baseAddress>0x48000000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>BLUE_CTRL</name>
                <description>BLUE controller interrupt</description>
                <value>6</value>
            </interrupt>
            <registers>
                <register>
                    <name>TIMEOUT</name>
                    <description>Timeout programming register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        </fields>
                </register>
                <register>
                    <name>RADIO_CONFIG</name>
                    <description>Radio configuration register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        </fields>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>CKGEN_BLE</name>
            <version>1.0</version>
            <description>Clock Gen BLE</description>
            <groupName>CKGEN_BLE</groupName>
            <baseAddress>0x48100000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>REASON_RST</name>
                    <description>Indicates the reset reason from BLE</description>
                    <addressOffset>0x08</addressOffset>
                    <size>16</size>
                    <access>read-only</access>
                    <resetValue>0x0005</resetValue>
                    <resetMask>0x0FFF</resetMask>
                    <fields>
                        <field>
                            <name>BOR</name>
                            <description>Reset from BOR</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>POR</name>
                            <description>Reset from POR</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_IO9</name>
                            <description>Wakeup from external IO9</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_IO10</name>
                            <description>Wakeup from external IO10</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_IO11</name>
                            <description>Wakeup from external IO11</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_IO12</name>
                            <description>Wakeup from external IO12</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_IO13</name>
                            <description>Wakeup from external IO13</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP_BLUE</name>
                            <description>Wakeup coms from the timer 1 expiration in the wakeup control block of the BLE radio</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>WKP2_BLUE</name>
                            <description>Wakeup coms from the timer 2 expiration in the wakeup control block of the BLE radio</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CLK32K_COUNT</name>
                    <description>Counter of 32 kHz clock</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x000F</resetValue>
                    <resetMask>0x01FF</resetMask>
                    <fields>
                        <field>
                            <name>SLOW_COUNT</name>
                            <description>Program the window length (in slow clock period unit) for slow clock measurement</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>9</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CLK32K_PERIOD</name>
                    <description>Period of 32 kHz clock</description>
                    <addressOffset>0x10</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <fields>
                        <field>
                            <name>SLOW_PERIOD</name>
                            <description>Indicates slow clock period information. The result provided in this field corresponds to the length of SLOW_COUNT periods of the slow clock (32 kHz) measured in 16 MHz half-period unit. The measurement is done automatically each time the device enters in active2 mode using SLOW_COUNT = 16. A new calculation can be launched by writing zero in CLK32K_PERIOD register. In this case, the time window uses the value programmed in SLOW_COUNT field.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>19</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CLK32K_FREQ</name>
                    <description>Measurement of frequency of 32 kHz clock</description>
                    <addressOffset>0x14</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <fields>
                        <field>
                            <name>SLOW_FREQ</name>
                            <description>Value equal to 2^33 / SLOW_PERIOD</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>27</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CLK32K_IT</name>
                    <description>Interrupt event for 32 kHz clock measurement</description>
                    <addressOffset>0x18</addressOffset>
                    <size>16</size>
                    <access>read-write</access>
                    <resetValue>0x0000</resetValue>
                    <fields>
                        <field>
                            <name>CLK32K_MEAS_IRQ</name>
                            <description>When read, provides the status of the interrupt indicating slow lock measurement is finished:&lt;ul&gt;&lt;li&gt;0: No pending interrupt.&lt;/li&gt;&lt;li&gt;1: Pending interrupt.&lt;/li&gt;&lt;/ul&gt;When written, clears the interrupt:&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clear the interrupt.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral>
            <name>DMA</name>
            <version>1.0</version>
            <description>DMA</description>
            <groupName>DMA</groupName>
            <baseAddress>0xA0000000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>DMA</name>
                <description>DMA interrupt</description>
                <value>23</value>
            </interrupt>
            <registers>
                <register>
                    <name>ISR</name>
                    <description>DMA interrupt status register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <fields>
                        <field>
                            <name>GIF0</name>
                            <description>Channel 0 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 0.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 0.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF0</name>
                            <description>Channel 0 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 0.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 0.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF0</name>
                            <description>Channel 0 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 0.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 0.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF0</name>
                            <description>Channel 0 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 0.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 0.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF1</name>
                            <description>Channel 1 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 1.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF1</name>
                            <description>Channel 1 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 1.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF1</name>
                            <description>Channel 1 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 1.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF1</name>
                            <description>Channel 1 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 1.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 1.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF2</name>
                            <description>Channel 2 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 2.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 2.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF2</name>
                            <description>Channel 2 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 2.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 2.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF2</name>
                            <description>Channel 2 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 2.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 2.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF2</name>
                            <description>Channel 2 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 2.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 2.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF3</name>
                            <description>Channel 3 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 3.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 3.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF3</name>
                            <description>Channel 3 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 3.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 3.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF3</name>
                            <description>Channel 3 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 3.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 3.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF3</name>
                            <description>Channel 3 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 3.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 3.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF4</name>
                            <description>Channel 4 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 4.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 4.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF4</name>
                            <description>Channel 4 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 4.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 4.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF4</name>
                            <description>Channel 4 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 4.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 4.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF4</name>
                            <description>Channel 4 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 4.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 4.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF5</name>
                            <description>Channel 5 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 5.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 5.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF5</name>
                            <description>Channel 5 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 5.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 5.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>21</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF5</name>
                            <description>Channel 5 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 5.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 5.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>22</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF5</name>
                            <description>Channel 5 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 5.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 5.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF6</name>
                            <description>Channel 6 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 6.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 6.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF6</name>
                            <description>Channel 6 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 6.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 6.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF6</name>
                            <description>Channel 6 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 6.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 6.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>26</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF6</name>
                            <description>Channel 6 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 6.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 6.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>27</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>GIF7</name>
                            <description>Channel 7 global interrupt flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No TE, HT or TC event on channel 7.&lt;/li&gt;&lt;li&gt;1: A TE, HT or TC event occurred on channel 7.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TCIF7</name>
                            <description>Channel 7 transfer complete flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer complete (TC) on channel 7.&lt;/li&gt;&lt;li&gt;1: A transfer complete (TC) occurred on channel 7.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>29</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>HTIF7</name>
                            <description>Channel 7 half transfer flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No half transfer (HT) event on channel 7.&lt;/li&gt;&lt;li&gt;1: A half transfer (HT) event occurred on channel 7.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>30</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>TEIF7</name>
                            <description>Channel 7 transfer error flag. This bit is set by hardware. It is cleared by software writing 1 to the corresponding bit in the IFCR register.&lt;ul&gt;&lt;li&gt;0: No transfer error (TE) event on channel 7.&lt;/li&gt;&lt;li&gt;1: A transfer error (TE) occurred on channel 7.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>31</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>IFCR</name>
                    <description>DMA interrupt flag clear register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>write-only</access>
                    <resetValue>0x00000000</resetValue>
                    <fields>
                        <field>
                            <name>CGIF0</name>
                            <description>Channel 0 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF0</name>
                            <description>Channel 0 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF0</name>
                            <description>Channel 0 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF0</name>
                            <description>Channel 0 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF1</name>
                            <description>Channel 1 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF1</name>
                            <description>Channel 1 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF1</name>
                            <description>Channel 1 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF1</name>
                            <description>Channel 1 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF2</name>
                            <description>Channel 2 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF2</name>
                            <description>Channel 2 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>9</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF2</name>
                            <description>Channel 2 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF2</name>
                            <description>Channel 2 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>11</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF3</name>
                            <description>Channel 3 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF3</name>
                            <description>Channel 3 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>13</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF3</name>
                            <description>Channel 3 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF3</name>
                            <description>Channel 3 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF4</name>
                            <description>Channel 4 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF4</name>
                            <description>Channel 4 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>17</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF4</name>
                            <description>Channel 4 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>18</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF4</name>
                            <description>Channel 4 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>19</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF5</name>
                            <description>Channel 5 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>20</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF5</name>
                            <description>Channel 5 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>21</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF5</name>
                            <description>Channel 5 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>22</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF5</name>
                            <description>Channel 5 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>23</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF6</name>
                            <description>Channel 6 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>24</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF6</name>
                            <description>Channel 6 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>25</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF6</name>
                            <description>Channel 6 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>26</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF6</name>
                            <description>Channel 6 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>27</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CGIF7</name>
                            <description>Channel 7 global interrupt flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the GIF, TEIF, HTIF and TCIF flags in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>28</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTCIF7</name>
                            <description>Channel 7 transfer complete flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TCIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>29</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CHTIF7</name>
                            <description>Channel 7 half transfer flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding HTIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>30</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                        <field>
                            <name>CTEIF7</name>
                            <description>Channel 7 transfer error flag. This bit is set by software.&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clears the corresponding TEIF flag in the ISR register.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>31</bitOffset>
                            <bitWidth>1</bitWidth>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral>
            <name>DMA_CH0</name>
            <version>1.0</version>
            <description>DMA channel</description>
            <groupName>DMA_CH</groupName>
            <baseAddress>0xA0000008</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <headerStructName>DMA_CH</headerStructName>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>CCR</name>
                    <description>DMA channel configuration register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000FFFF</resetMask>
                    <fields>
                        <field>
                            <name>EN</name>
                            <description>DMA channel enable.&lt;ul&gt;&lt;li&gt;0: DMA channel disabled.&lt;/li&gt;&lt;li&gt;1: DMA channel enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>DMA channel disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>DMA channel enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TCIE</name>
                            <description>Transfer complete interrupt enable.&lt;ul&gt;&lt;li&gt;0: TC interrupt disabled.&lt;/li&gt;&lt;li&gt;1: TC interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Interrupt source disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Interrupt source enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>HTIE</name>
                            <description>Half transfer interrupt enable.&lt;ul&gt;&lt;li&gt;0: HT interrupt disabled.&lt;/li&gt;&lt;li&gt;1: HT interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Interrupt source disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Interrupt source enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>TEIE</name>
                            <description>Transfer error interrupt enable.&lt;ul&gt;&lt;li&gt;0: TE interrupt disabled.&lt;/li&gt;&lt;li&gt;1: TE interrupt enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Interrupt source disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Interrupt source enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>DIR</name>
                            <description>Data transfer direction.&lt;ul&gt;&lt;li&gt;0: Read from peripheral.&lt;/li&gt;&lt;li&gt;1: Read from memory.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>4</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>FROM_PERIPHERAL</name>
                                    <description>Read from peripheral</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>FROM_MEMORY</name>
                                    <description>Read from memory</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>CIRC</name>
                            <description>Circular mode.&lt;ul&gt;&lt;li&gt;0: Circular mode disabled.&lt;/li&gt;&lt;li&gt;1: Circular mode enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>5</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Circular mode disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Circular mode enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>PINC</name>
                            <description>Peripheral increment mode.&lt;ul&gt;&lt;li&gt;0: Peripheral increment disabled.&lt;/li&gt;&lt;li&gt;1: Peripheral increment enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>6</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Peripheral increment disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Peripheral increment enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MINC</name>
                            <description>Memory increment mode.&lt;ul&gt;&lt;li&gt;0: Memory increment disabled.&lt;/li&gt;&lt;li&gt;1: Memory increment enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>7</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>DISABLE</name>
                                    <description>Memory increment disable</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>ENABLE</name>
                                    <description>Memory increment enable</description>
                                    <value>1</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>PSIZE</name>
                            <description>Peripheral size.&lt;ul&gt;&lt;li&gt;00b: Size 8 bits.&lt;/li&gt;&lt;li&gt;01b: Size 16 bits.&lt;/li&gt;&lt;li&gt;10b: Size 32 bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>8</bitOffset>
                            <bitWidth>2</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SIZE8BIT</name>
                                    <description>Size 8 bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SIZE16BIT</name>
                                    <description>Size 16 bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SIZE32BIT</name>
                                    <description>Size 32 bits</description>
                                    <value>2</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MSIZE</name>
                            <description>Memory size.&lt;ul&gt;&lt;li&gt;00b: Size 8 bits.&lt;/li&gt;&lt;li&gt;01b: Size 16 bits.&lt;/li&gt;&lt;li&gt;10b: Size 32 bits.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>10</bitOffset>
                            <bitWidth>2</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>SIZE8BIT</name>
                                    <description>Size 8 bits</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SIZE16BIT</name>
                                    <description>Size 16 bits</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>SIZE32BIT</name>
                                    <description>Size 32 bits</description>
                                    <value>2</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>PL</name>
                            <description>Channel priority level.&lt;ul&gt;&lt;li&gt;00b: Low priority.&lt;/li&gt;&lt;li&gt;01b: Medium priority.&lt;/li&gt;&lt;li&gt;10b: High priority.&lt;/li&gt;&lt;li&gt;11b: Very high priority.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>12</bitOffset>
                            <bitWidth>2</bitWidth>
                            <access>read-write</access>
                            <enumeratedValues>
                                <enumeratedValue>
                                    <name>LOW</name>
                                    <description>Low priority</description>
                                    <value>0</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>MEDIUM</name>
                                    <description>Medium priority</description>
                                    <value>1</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>HIGH</name>
                                    <description>High priority</description>
                                    <value>2</value>
                                </enumeratedValue>
                                <enumeratedValue>
                                    <name>VERY_HIGH</name>
                                    <description>Very high priority</description>
                                    <value>3</value>
                                </enumeratedValue>
                            </enumeratedValues>
                        </field>
                        <field>
                            <name>MEM2MEM</name>
                            <description>Memory to memory mode.&lt;ul&gt;&lt;li&gt;0: Memory to memory mode disabled.&lt;/li&gt;&lt;li&gt;0: Memory to memory mode enabled.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>14</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>RESERVED1</name>
                            <description>Reserved</description>
                            <bitOffset>15</bitOffset>
                            <bitWidth>17</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CNDTR</name>
                    <description>DMA channel number of data register.</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000FFFF</resetMask>
                    <fields>
                        <field>
                            <name>NDT</name>
                            <description>Number of data to be transferred (0 up to 65535). This register can only be written when the channel is disabled. Once the channel is enabled, this register is read-only, indicating the remaining bytes to be transmitted. This register decrements after each DMA transfer. Once the transfer is completed, this register can either stay at zero or be reloaded automatically by the value previously programmed if the channel is configured in auto-reload mode. If this register is zero, no transaction can be served whether the channel is enabled or not.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>16</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>RESERVED1</name>
                            <description>Reserved</description>
                            <bitOffset>16</bitOffset>
                            <bitWidth>16</bitWidth>
                            <access>read-only</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CPAR</name>
                    <description>DMA channel peripheral address register</description>
                    <addressOffset>0x08</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>PA</name>
                            <description>Base address of the peripheral data register from/to which the data will be read/written. When PSIZE is 01 (16-bit), the PA[0] bit is ignored. Access is automatically aligned to a halfword address. When PSIZE is 10 (32-bit), PA[1:0] are ignored. Access is automatically aligned to a word address.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                            <access>read-write</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>CMAR</name>
                    <description>DMA channel memory address register</description>
                    <addressOffset>0x0C</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0xFFFFFFFF</resetMask>
                    <fields>
                        <field>
                            <name>MA</name>
                            <description>Base address of the memory area from/to which the data will be read/written. When MSIZE is 01 (16-bit), the MA[0] bit is ignored. Access is automatically aligned to a halfword address. When MSIZE is 10 (32-bit), MA[1:0] are ignored. Access is automatically aligned to a word address.</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>32</bitWidth>
                            <access>read-write</access>
                        </field>
                    </fields>
                </register>
            </registers>
        </peripheral>
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH1</name>
            <baseAddress>0xA000001C</baseAddress>
        </peripheral>   
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH2</name>
            <baseAddress>0xA0000030</baseAddress>
        </peripheral>   
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH3</name>
            <baseAddress>0xA0000044</baseAddress>
        </peripheral>   
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH4</name>
            <baseAddress>0xA0000058</baseAddress>
        </peripheral>   
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH5</name>
            <baseAddress>0xA000006C</baseAddress>
        </peripheral>   
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH6</name>
            <baseAddress>0xA0000080</baseAddress>
        </peripheral>
        <peripheral derivedFrom="DMA_CH0">
            <name>DMA_CH7</name>
            <baseAddress>0xA0000094</baseAddress>
        </peripheral>
        <peripheral>
            <name>RNG</name>
            <version>1.0</version>
            <description>RNG</description>
            <groupName>RNG</groupName>
            <baseAddress>0xB0000000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <registers>
                <register>
                    <name>CR</name>
                    <description>RNG configuration register</description>
                    <addressOffset>0x00</addressOffset>
                    <size>32</size>
                    <access>read-write</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000FFFF</resetMask>
                    <fields>
                        <field>
                            <name>DIS</name>
                            <description>Set the state of the random number generator.&lt;ul&gt;&lt;li&gt;0: RNG is enable.&lt;/li&gt;&lt;li&gt;1: RNG is disabled. The internal free-running oscillators are put in power-down mode and the RNG clock is stopped at the input of the block.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>TST_CLK</name>
                            <description>RNG test clock bit. Writing this bit with 1b starts the logic that detects the presence of the CLK. Then wait (with a timeout of at least four RNGCLK cycles) for REVCLK = 1b in SR register. If REVCLK = 0b after timeout elapsed, it means that RNGCLK is not present and reading VAL register will trigger an AHB error response. For security reason, software should check before reading random values that the RNGCLK is present.</description>
                            <bitOffset>3</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>SR</name>
                    <description>RNG status register</description>
                    <addressOffset>0x04</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000FFFF</resetMask>
                    <fields>
                        <field>
                            <name>RDY</name>
                            <description>New random value ready.&lt;ul&gt;&lt;li&gt;0: The RNG_VAL register value is not yet valid. If performing a read access to VAL, the host will be put on hold (by wait-states insertion on the AHB bus) until a random value is available.&lt;/li&gt;&lt;li&gt;1: The VAL register contains a valid random number.&lt;/li&gt;&lt;/ul&gt;This bit remains at 0 when the RNG is disabled (RNGDIS bit = 1b in CR)</description>
                            <bitOffset>0</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-only</access>
                        </field>
                        <field>
                            <name>REVCLK</name>
                            <description>REVCLK clock reveal bit. A write with 1b to bit TSTCLK in CR resets this bit. If the RNGCLK is present, this bit will be 1b after four RNGCLK cycles after the end of the write to RNG_CR.If REVCLK = 0b after this period, it means the RNGCLK is not present and reading VAL will trigger a AHB error response.</description>
                            <bitOffset>1</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                        <field>
                            <name>FAULT</name>
                            <description>Fault reveal bit. This bit is set by hardware when a faulty sequence of bits occurs. The faulty sequences are:&lt;ul&gt;&lt;li&gt;0: Sequence of more than 32 consecutive bits of same value (0b or 1b).&lt;/li&gt;&lt;li&gt;1: Sequence of more than 16 consecutive alternation of 0b and 1b (010101...01b).&lt;/li&gt;&lt;/ul&gt;Writing this bit:&lt;ul&gt;&lt;li&gt;0: No effect.&lt;/li&gt;&lt;li&gt;1: Clear the bit.&lt;/li&gt;&lt;/ul&gt;</description>
                            <bitOffset>2</bitOffset>
                            <bitWidth>1</bitWidth>
                            <access>read-write</access>
                        </field>
                    </fields>
                </register>
                <register>
                    <name>VAL</name>
                    <description>RNG 16 bit random value</description>
                    <addressOffset>0x08</addressOffset>
                    <size>32</size>
                    <access>read-only</access>
                    <resetValue>0x00000000</resetValue>
                    <resetMask>0x0000FFFF</resetMask>
                </register>
                </registers>
        </peripheral>
        <peripheral>
            <name>PKA</name>
            <version>1.0</version>
            <description>PKA</description>
            <groupName>PKA</groupName>
            <baseAddress>0xC0000000</baseAddress>
            <size>32</size>
            <access>read-write</access>
            <addressBlock>
                <offset>0</offset>
                <size>0x1000</size>
                <usage>registers</usage>
            </addressBlock>
            <interrupt>
                <name>PKA</name>
                <description>PKA interrupt</description>
                <value>22</value>
            </interrupt>
            <registers>
                </registers>
        </peripheral>
    </peripherals>
</device>