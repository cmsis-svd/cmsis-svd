<?xml version="1.0" encoding="UTF-8"?>

<!-- This file was automatically generated (2020-01-21 13:20:27) -->

<device schemaVersion="1.2" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD.xsd">
  <vendor>EtaCompute</vendor>
  <vendorID>ETA</vendorID>
  <name>ECM3532</name>
  <series>ECM35xx</series>
  <version>1.0.0</version>
  <description>
    ARM Cortex-M3 and Dual MAC DSP, DIAL Technology Subthreshold
  </description>
  <licenseText>
    Copyright (C) 2018 Eta Compute, Inc. All rights reserverd.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
  </licenseText>
  <cpu>
    <name>CM3</name> 
    <revision>r1p1</revision>
    <endian>little</endian>
    <mpuPresent>true</mpuPresent>
    <fpuPresent>false</fpuPresent>
    <fpuDP>false</fpuDP>
    <icachePresent>false</icachePresent>
    <dcachePresent>false</dcachePresent>
    <itcmPresent>false</itcmPresent>
    <dtcmPresent>false</dtcmPresent>
    <nvicPrioBits>3</nvicPrioBits>
    <vendorSystickConfig>false</vendorSystickConfig> 
  </cpu>
  <addressUnitBits>8</addressUnitBits>
  <width>32</width>
  <size>32</size>
  <access>read-write</access>
  <resetValue>0x00000000</resetValue>
  <resetMask>0xFFFFFFFF</resetMask>
  <peripherals>
    <peripheral>
      <name>GPIO</name>
      <version>1.0</version>
      <description>
        The General Purpose I/O (GPIO) Device provides programmable access to the pins of the chip from within the M3 complex.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x40010000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x400</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>CSR</name>
          <description>
            Control and Status Register for GPIO inside of M3 Complex.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_TICK_HI</name>
              <description>
                The M3 TICK counter is 36 bits long. The upper 4 bits, M3_TICK[35:32], can be read here when the counter is frozen.
              </description>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TICK2GPIOIN</name>
              <description>
                Enable a few clock sources as inputs for GPIO[7:0] instead of the usual pad inputs. This assumes these GPIOs are normally used as outputs to drive LEDs on a board. This allow these bits to simultaneously serve as dedicated outputs and also as dedicated inputs.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable ticks to GPIO inputs.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Do not use the tick inputs.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M3_TICK</name>
          <description>
            This register accumulates tick counts at the rate of the M3 oscillator. Firmware controls when it starts counting and when it stops counting. It is intended to measure the duration of firmware execution regions in core (M3) oscillator ticks.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>COUNT</name>
              <description>
                This register accumulates tick counts at the rate of the M3 oscillator. Firmware first issues a start command, which clears the count and then begins counting up.  Firmware then issues a stop command which freezes the count so it can be read. Write 0x474F to clear and restart the counter. Write 0x4E4F to freeze the count. Write 0xAAAA to resume counting where it left off.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CLEAR_AND_START</name>
                  <description>
                    First clear the counter and then begin counting M3 oscillator ticks.
                  </description>
                  <value>18255</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREEZE</name>
                  <description>
                    Freeze the counter so it can be read.
                  </description>
                  <value>20047</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESUME</name>
                  <description>
                    Resume counting from where it was stopped.
                  </description>
                  <value>43690</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>XTERN_STATUSA</name>
          <description>
            Quick read of various external status bits.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO_PM_MODE</name>
              <description>
                This read only bit indicates the state of the GPIO PM MODE pin. If it is one then bootrom firmware must check GPIO[28]. If that is zero then bootrom firmware has to decde GPIO[31:29].
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Perform normal customer facing bootmode.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VALIDATION</name>
                  <description>
                    Select validdation bootmode from GPIO[31:29], provided GPIO[28] == zero.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FLUSH_FLASH</name>
              <description>
                This read only bit indicates that a debugger has been detected on the SWD interface while INFO page indicates that the FLASH is not to be preserved in this case.  This bit is used in the boot ROM.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_SECURE_BOOT</name>
              <description>
                This read only bit indicates that a secure boot protocol will be used at power up to provide a hardware root of trust state for the code to be executed in flash segment zero.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_PRESERVE_FLASH</name>
              <description>
                This read only bit indicates that the FLASH will be preserved when a debugger is attached to the SWD port.  Zero indiates that it will be erased when a debugger is attached to hide the contents from view.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_PRESERVE_SRAM</name>
              <description>
                This read only bit indicates that the SRAM will be preserved when a debugger is attached to the SWD port.  Zero indiates that it will be erased when a debugger is attached to hide the contents from view.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_DEBUG_ENABLE</name>
              <description>
                This read only bit indicates whether the SWD port is enabled for debug. Zero indiates that a debugger can not be connected through the SWD port.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_CUST_UNLOCK</name>
              <description>
                This read only bit indicates whether the customer section of the INFO page is unlocked for further programming. This is represents the state for the last 3072 bytes in the INFO page. If this bit is set to zero then INFO page can not be erased.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INFO_ETA_UNLOCK</name>
              <description>
                This read only bit indicates whether the Eta Compute section of the INFO page is unlocked for further programming. This is represents the state for the first 1024 bytes in the INFO page. If this bit is set to zero then INFO page can not be erased.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_FREQ_TOG</name>
              <description>
                A toggle on this read only bit indicates that the DSP frequency counter has produced a fresh value.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FREQ_TOG</name>
              <description>
                A toggle on this read only bit indicates that the M3 frequency counter has produced a fresh value.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR_INT</name>
              <description>
                This read only bit provides access to the RTC TIMER interrupt status bit.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_FLAG</name>
              <description>
                This read only bit toggles everytime the RTC time of day counter increments (once per second). It is used to guarantee safe reads of the current time of day.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1_RX_EMPTY</name>
              <description>
                This read only bit tells driver level code whent there is at least one byte to the UART1 receiver FIFO.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1_TX_FULL</name>
              <description>
                This read only bit tells driver level code whent there is room to add at least one more byte to the UART1 transmitter FIFO.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RX_EMPTY</name>
              <description>
                This read only bit tells driver level code whent there is at least one byte to the UART0 receiver FIFO.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_TX_FULL</name>
              <description>
                This read only bit tells driver level code whent there is room to add at least one more byte to the UART0 transmitter FIFO.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WARM_START_MODE</name>
              <description>
                These read only bits tell the BOOTROM how to warm start and if it should warm start. Anything greater than 0x8 is a warm start.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL_COLD_START</name>
                  <description>
                    Normal cold start in SRAM or flash.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FORCE_COLD_START_IN_FLASH</name>
                  <description>
                    Force cold start in flash even if valid SRAM program present.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_IN</name>
          <description>
            Data INPUT for each PAD.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Input bits from each Pad/Pin
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_OUT</name>
          <description>
            Data Output for each PAD.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set or clear output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_OUT_SET</name>
          <description>
            Set 1 to set Data Output to one.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 to set output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_OUT_CLR</name>
          <description>
            Set 1 to set Data Output to zero.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 to clear output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_OUT_TOG</name>
          <description>
            Set 1 to toggle Data Output to zero.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 toggle output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_ENABLE</name>
          <description>
            Data Output Enable for each PAD.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 to enable output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_ENABLE_SET</name>
          <description>
            Set Data Output Enable for each PAD.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 to set enable output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_ENABLE_CLR</name>
          <description>
            Clear Data Output Enable for each PAD.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 to clr enable output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA_ENABLE_TOG</name>
          <description>
            Toggle Data Output Enable for each PAD.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>IO31</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO30</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[30:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO29</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO28</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[28:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO27</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO26</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO25</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO24</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO23</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO22</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO21</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO20</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO19</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO18</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO17</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO16</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO15</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO14</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO13</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO12</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO11</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO10</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO9</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO8</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO7</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO6</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO5</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO4</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO3</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO2</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO1</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO0</name>
              <description>
                Set to 1 toggle enable output bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPEC_READ_A</name>
          <description>
            Provide a read only value for speculative read support on the peripheral bus.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read Only Value of a speculative read.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPEC_READ_B</name>
          <description>
            Provide a read only value for speculative read support on the peripheral bus.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read Only Value of a speculative read.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPEC_READ_C</name>
          <description>
            Provide a read only value for speculative read support on the peripheral bus.
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read Only Value of a speculative read.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPEC_READ_D</name>
          <description>
            Provide a read only value for speculative read support on the peripheral bus.
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read Only Value of a speculative read.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPEC_READ_STAT</name>
          <description>
            Provide a status bit for each of the four speculative read contexts.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPEC_D</name>
              <description>
                Speculative read data available for read. Write a one to this bit to clear it.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    Result is ready.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPEC_C</name>
              <description>
                Speculative read data available for read. Write a one to this bit to clear it.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    Result is ready.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPEC_B</name>
              <description>
                Speculative read data available for read. Write a one to this bit to clear it.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    Result is ready.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SPEC_A</name>
              <description>
                Speculative read data available for read. Write a one to this bit to clear it.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    Result is ready.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ASYNC_BUS</name>
          <description>
            Control fields for the asynchronous buses.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RST_AHB2PERIPH</name>
              <description>
                Flush the buffer and reset the state of the AHB2PERIPH logic. This will also issue a reset request on all async buses.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_PWM</name>
              <description>
                Actual reset response from the slave.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_RTC</name>
              <description>
                Actual reset response from the slave
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_UST</name>
              <description>
                Actual reset response from the slave
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_GPIO_SOCCTRL</name>
              <description>
                Actual reset response from the slave.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_I2C</name>
              <description>
                Actual reset response from the slave.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_STATE_ADC</name>
              <description>
                Actual reset response from the slave.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Slave reset
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ACTIVE</name>
                  <description>
                    Slave active
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_PWM</name>
              <description>
                Issue a reset request from the PWM async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_RTC</name>
              <description>
                Issue a reset request from the RTC async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_UST</name>
              <description>
                Issue a reset request from the UST async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_GPIO_SOCCTRL</name>
              <description>
                Issue a reset request from the GPIO/SOCCTRL async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_I2C</name>
              <description>
                Issue a reset request from the I2C async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_REQ_ADC</name>
              <description>
                Issue a reset request from the ADC async bus master. Field will remain set until reset is complete.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Assert the reset request.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HFO_FREQ</name>
          <description>
            This register contains the frequency counter for the HFO.  It counts the number of HFO clocks that occur between two rising edges of the 32KHz  clock. NOTE: while this counter measures for the period of one 32KHz clock it does not do it every clock.  This register will update every 4 32KHz clocks.
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLAG</name>
              <description>
                This toggles for every counter update (once every 4x32KHz clocks).
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                This counter tells the approximate frequency of the HFO.
              </description>
              <bitRange>[9:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FLASH_INFO_RD_ENABLE</name>
          <description>
            Provide a read only view of the flash read protection word obtained from the flash INFO page during POR sequencing. This value is saved in AO and restored at each subsequent M3 power up event even though the FLASH may have been forced off at power up. Thus these protections exist from before reset is removed from the M3 until it is powered down. Each bit in this register corresponds to one 16KB segment in flash.
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When a bit is set to zero then the corresponding 16KB segment in flash is read protected. Neither the M3 nor the DSP can read a value from the affected segment. It can be fetched for execution but not loaded into a register. This also applies to attempts from a debugger to read the value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FLASH_INFO_WRT_ENABLE</name>
          <description>
            Provide a read only view of the flash write protection word obtained from the flash INFO page during POR sequencing. This value is saved in AO and restored at each subsequent M3 power up event even though the FLASH may have been forced off at power up. Thus these protections exist from before reset is removed from the M3 until it is powered down. Each bit in this register corresponds to one 16KB segment in flash.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When a bit is set to zero then the corresponding 16KB segment in flash is write protected. The flash controller will will not allow any page in the segment to be erased or programmd.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG0_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG1_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PWM</name>
      <version>1.0</version>
      <description>
        The PWM module contains four PWM generators. The PWM generators are configured with a command FIFO which sets their config, period, pulse start, and pulse end internal registers. A channel multiplexer steers PWM signals to any of the 16 output pins. The PWM supports synchronous channel changes to avoid glitches on the output.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50000000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x80</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>PWM</name>
        <value>14</value>
        <description>PWM Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CTRL</name>
          <description>
            Control register for the PWM peripheral.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>SFTRST</name>
              <description>
                Soft reset which resets the entire PWM to its POR state.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RST</name>
                  <description>
                    Reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLKSRC</name>
              <description>
                Counter reference for the PWM generators. The registers always run on the 2MHz clock.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>32KHZ</name>
                  <description>
                    32KHz oscillator.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ</name>
                  <description>
                    2MHz oscillator.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_EN_OVR</name>
              <description>
                Force the clock enable for this module ON to prevent clock gating at the HFO. Intended for debug purposes.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Prevent HFO clock gating.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Allow HFO clock gating when block is inactive.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[22:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_INT</name>
              <description>
                The Command FIFO low interrupt enable.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_LOW</name>
              <description>
                If enabled, the Command FIFO will trigger an interrupt at a level less than or equal to this value.
              </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT3</name>
              <description>
                PWM3s default drive when idle.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT2</name>
              <description>
                PWM2s default drive when idle.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT1</name>
              <description>
                PWM1s default drive when idle.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT0</name>
              <description>
                PWM0s default drive when idle.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MODE</name>
          <description>
            Start/stop register for PWM. Simultaneously write multiple fields to start PWMs in lockstep.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SET3</name>
              <description>
                Apply PWM mode.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Set PWM to MODE.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SET2</name>
              <description>
                Apply PWM mode.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Set PWM to MODE.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SET1</name>
              <description>
                Apply PWM mode.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Set PWM to MODE.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SET0</name>
              <description>
                Apply PWM mode.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Set PWM to MODE.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE3</name>
              <description>
                Set PWM mode.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>START</name>
                  <description>
                    Start PWM.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    Stop PWM after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    Stop PWM after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ISTOP</name>
                  <description>
                    Stop PWM immediately.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE2</name>
              <description>
                Set PWM mode.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>START</name>
                  <description>
                    Start PWM.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    Stop PWM after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    Stop PWM after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ISTOP</name>
                  <description>
                    Stop PWM immediately.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE1</name>
              <description>
                Set PWM mode.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>START</name>
                  <description>
                    Start PWM.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    Stop PWM after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    Stop PWM after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ISTOP</name>
                  <description>
                    Stop PWM immediately.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE0</name>
              <description>
                Set PWM mode.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>START</name>
                  <description>
                    Start PWM.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    Stop PWM after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    Stop PWM after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ISTOP</name>
                  <description>
                    Stop PWM immediately.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STAT</name>
          <description>
            PWM status register.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_EMPTY</name>
              <description>
                Indicates if the Command FIFO is empty.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EMPTY</name>
                  <description>
                    Empty.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_FULL</name>
              <description>
                Indicates if the Command FIFO is full.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FULL</name>
                  <description>
                    Full.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_SIZE</name>
              <description>
                Current consumption of the Command FIFO from 0 -> 15. Check CFIFO_FULL to see if consumption is 16.
              </description>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE3</name>
              <description>
                Current running state of the PWMs.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    PWM Running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    PWM will stop after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    PWM will stop after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    PWM stopped.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE2</name>
              <description>
                Current running state of the PWMs.
              </description>
              <bitRange>[13:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    PWM Running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    PWM will stop after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    PWM will stop after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    PWM stopped.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE1</name>
              <description>
                Current running state of the PWMs.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    PWM Running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    PWM will stop after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    PWM will stop after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    PWM stopped.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE0</name>
              <description>
                Current running state of the PWMs.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    PWM Running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTOP</name>
                  <description>
                    PWM will stop after the current program.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CSTOP</name>
                  <description>
                    PWM will stop after the current cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    PWM stopped.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VAL3</name>
              <description>
                Current value driven by the PWM3 module.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VAL2</name>
              <description>
                Current value driven by the PWM2 module.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VAL1</name>
              <description>
                Current value driven by the PWM1 module.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VAL0</name>
              <description>
                Current value driven by the PWM0 module.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT</name>
          <description>
            WARNING: READ SIDE EFFECT.  Interrupt status register. Reading interrupt status resets any pending interrupt requests.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CFIFO_INT</name>
              <description>
                Indicates if the Command FIFO has triggered a low interrupt.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT3</name>
              <description>
                Indicates if PWM3 has triggered a cycle interrupt.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT2</name>
              <description>
                Indicates if PWM2 has triggered a cycle interrupt.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT1</name>
              <description>
                Indicates if PWM1 has triggered a cycle interrupt.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT0</name>
              <description>
                Indicates if PWM0 has triggered a cycle interrupt.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT3</name>
              <description>
                Indicates if PWM3 has triggered a program interrupt.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT2</name>
              <description>
                Indicates if PWM2 has triggered a program interrupt.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT1</name>
              <description>
                Indicates if PWM1 has triggered a program interrupt.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT0</name>
              <description>
                Indicates if PWM0 has triggered a program interrupt.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INT</name>
                  <description>
                    Interrupt asserted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CHAN_CFG</name>
          <description>
            PWM channel configuration register.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC7</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC6</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC5</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC4</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC3</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC2</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC1</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SYNC0</name>
              <description>
                Synchronous transition bit. Disable for instantaneous MUX changes, otherwise the MUX will wait for current cycle to end, disable, then wait for next cycle to end before enabling.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT7</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT6</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT5</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT4</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT3</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT2</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT1</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DFLT0</name>
              <description>
                Default drive value when channel is disabled.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CHAN_MUX</name>
          <description>
            Selects which PWM to assign to the output channels.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN7</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN6</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN5</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN4</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN3</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN2</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN1</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN0</name>
              <description>
                Channel enable bit.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL7</name>
              <description>
                PWM to assign to channel #7.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL6</name>
              <description>
                PWM to assign to channel #6.
              </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL5</name>
              <description>
                PWM to assign to channel #5.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL4</name>
              <description>
                PWM to assign to channel #4.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL3</name>
              <description>
                PWM to assign to channel #3.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL2</name>
              <description>
                PWM to assign to channel #2.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL1</name>
              <description>
                PWM to assign to channel #1.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL0</name>
              <description>
                PWM to assign to channel #0.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Assign PWM3 to channel.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Assign PWM2 to channel.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Assign PWM1 to channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Assign PWM0 to channel.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFIFO</name>
          <description>
            Writes a command into the command FIFO. Writing the MSbyte commits all four bytes to the FIFO. Reading this register returns the next command waiting to come out of the FIFO. The WAIT field prevents the command at the top of the FIFO from being popped until the end of the currently running PWM program.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>SEL</name>
              <description>
                PWM generator selected for this command.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PWM0</name>
                  <description>
                    Write to PWM0.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM1</name>
                  <description>
                    Write to PWM1.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM2</name>
                  <description>
                    Write to PWM2.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWM3</name>
                  <description>
                    Write to PWM3.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>REG</name>
              <description>
                PWM register selected for this command.
              </description>
              <bitRange>[29:28]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CFG</name>
                  <description>
                    Write to CFG register.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PER</name>
                  <description>
                    Write to PER register.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PSTRT</name>
                  <description>
                    Write to PSTRT register.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PEND</name>
                  <description>
                    Write to PEND register.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WAIT</name>
              <description>
                Write this command after the currently running program has finished.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                PWM register data. Derive format from the relevant CFG, PER, PSTRT, and PEND registers. There are helper enumerations below for setting bits in a CFG command.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CYCLE_INT</name>
                  <description>
                    (For CFG command) Set bit-19 to trigger interrupt at the end of each PWM cycle.
                  </description>
                  <value>524288</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PROG_INT</name>
                  <description>
                    (For CFG command) Set bit-18 bit to trigger interrupt at the end of this program.
                  </description>
                  <value>262144</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PULSE_DRIVE</name>
                  <description>
                    (For CFG command) Set bit-17 for standard pulse output drive (Pulse is high), otherwise pulse is inverted (Pulse is low).
                  </description>
                  <value>131072</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ONESHOT</name>
                  <description>
                    (For CFG command) Set bit-16 to do only COUNT pulses and then stop. Disable this bit to run forever. CFIFO WAIT command will always load after COUNT pulses regardless of oneshot state.
                  </description>
                  <value>65536</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG0</name>
          <description>
            PWM count and configuration register.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT</name>
              <description>
                Trigger interrupt at the end of each PWM cycle.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT</name>
              <description>
                Trigger interrupt at the end of each program.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PULSE_DRIVE</name>
              <description>
                PWM pulse drive polarity.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ONESHOT</name>
              <description>
                Enable to do only COUNT pulses and then stop. Disable to run forever. CFIFO WAIT command will always load after COUNT pulses regardless of oneshot state.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Number of PWM cycles (N-1 PWM cycles).
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG1</name>
          <description>
            PWM count and configuration register.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT</name>
              <description>
                Trigger interrupt at the end of each PWM cycle.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT</name>
              <description>
                Trigger interrupt at the end of each program.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PULSE_DRIVE</name>
              <description>
                PWM pulse drive polarity.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ONESHOT</name>
              <description>
                Enable to do only COUNT pulses and then stop. Disable to run forever. CFIFO WAIT command will always load after COUNT pulses regardless of oneshot state.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Number of PWM cycles (N-1 PWM cycles).
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG2</name>
          <description>
            PWM count and configuration register.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT</name>
              <description>
                Trigger interrupt at the end of each PWM cycle.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT</name>
              <description>
                Trigger interrupt at the end of each program.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PULSE_DRIVE</name>
              <description>
                PWM pulse drive polarity.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ONESHOT</name>
              <description>
                Enable to do only COUNT pulses and then stop. Disable to run forever. CFIFO WAIT command will always load after COUNT pulses regardless of oneshot state.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Number of PWM cycles (N-1 PWM cycles).
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFG3</name>
          <description>
            PWM count and configuration register.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_INT</name>
              <description>
                Trigger interrupt at the end of each PWM cycle.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG_INT</name>
              <description>
                Trigger interrupt at the end of each program.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PULSE_DRIVE</name>
              <description>
                PWM pulse drive polarity.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HI</name>
                  <description>
                    High.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LO</name>
                  <description>
                    Low.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>ONESHOT</name>
              <description>
                Enable to do only COUNT pulses and then stop. Disable to run forever. CFIFO WAIT command will always load after COUNT pulses regardless of oneshot state.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EN</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIS</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Number of PWM cycles (N-1 PWM cycles).
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PER0</name>
          <description>
            PWM period register.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER</name>
              <description>
                Period of PWM (N-1 clock cycles).
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PER1</name>
          <description>
            PWM period register.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER</name>
              <description>
                Period of PWM (N-1 clock cycles).
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PER2</name>
          <description>
            PWM period register.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER</name>
              <description>
                Period of PWM (N-1 clock cycles).
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PER3</name>
          <description>
            PWM period register.
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER</name>
              <description>
                Period of PWM (N-1 clock cycles).
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PSTRT0</name>
          <description>
            PWM pulse start register.
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PSTRT</name>
              <description>
                Pulse start of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PSTRT1</name>
          <description>
            PWM pulse start register.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PSTRT</name>
              <description>
                Pulse start of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PSTRT2</name>
          <description>
            PWM pulse start register.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PSTRT</name>
              <description>
                Pulse start of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PSTRT3</name>
          <description>
            PWM pulse start register.
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PSTRT</name>
              <description>
                Pulse start of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PEND0</name>
          <description>
            PWM pulse end register.
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PEND</name>
              <description>
                Pulse end of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PEND1</name>
          <description>
            PWM pulse end register.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PEND</name>
              <description>
                Pulse end of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PEND2</name>
          <description>
            PWM pulse end register.
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PEND</name>
              <description>
                Pulse end of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PEND3</name>
          <description>
            PWM pulse end register.
          </description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PEND</name>
              <description>
                Pulse end of PWM period.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DBG_READ_ONLY</name>
          <description>
            This register provides a read only test value for checking IP connectivity to AHB.
          </description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                First 7 numbers in the fibonacci sequence.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>RTC</name>
      <version>1.0</version>
      <description>
        The real time clock (RTC) is part of the Always On block. In addition to maintaining the real time epoch for the SOC, it also contains all of the control registers of AO block, e.g. registers for the power controller.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50010000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x400</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>RTC0</name>
        <value>10</value>
        <description>RTC0 Interrupt Number</description>
      </interrupt>
      <interrupt>
        <name>RTC1</name>
        <value>11</value>
        <description>RTC1 Interrupt Number</description>
      </interrupt>
      <interrupt>
        <name>RTC_WDT</name>
        <value>15</value>
        <description>RTC_WDT Interrupt Number</description>
      </interrupt>
      <interrupt>
        <name>RTC_TMR</name>
        <value>16</value>
        <description>RTC_TMR Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>AO_CSR</name>
          <description>
            Configuration and status bits for the always on block, which includes the RTC, WDT, POWER, etc.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WARM_START_MODE</name>
              <description>
                BOOTROM assumes 0x00 is a cold start and any non-zero value is a warm start. This value is also visible in the external status register in the GPIO inside the M3 complex. NOTE: a value written to this value survives all resets except the master POR that happens at true first chip power up.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AO_REVID</name>
          <description>
            Revision ID for the entire chip. This displays any mods for each of the 6 metal layers, poly layer mods and also an overall all layer change stepping number.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>REV_ALL_LAYER</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_POLY</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[27:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M6</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M5</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[19:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M4</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M3</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[11:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M2</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>REV_M1</name>
              <description>
                Firt mask set is 0x0.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSRA</name>
          <description>
            Configuration and status bits for the real time clock (RTC).
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER_MINUTE</name>
              <description>
                Set to 1 to interrrupt every minute.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER_SECOND</name>
              <description>
                Set to 1 to interrrupt every second.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_DAY_DATE</name>
              <description>
                Set to 1 to match the day or date.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_MONTHS</name>
              <description>
                Set to 1 to match the current month.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_HOURS</name>
              <description>
                Set to 1 to match the current hour.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_MINUTES</name>
              <description>
                Set to 1 to match the current minutes.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_SECONDS</name>
              <description>
                Set to 1 to match the current minutes.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_ENABLE</name>
              <description>
                Interrupt enable bit for ALARM A comparison interrupts.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_STAT</name>
              <description>
                Interrupt status bit for ALARM A comparison (set by an exact match).  Write one to this bit to clear it.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSRB</name>
          <description>
            Configuration and status bits for the real time clock (RTC).
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER_MINUTE</name>
              <description>
                Set to 1 to interrrupt every minute.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PER_SECOND</name>
              <description>
                Set to 1 to interrrupt every second.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_DAY_DATE</name>
              <description>
                Set to 1 to match the day or date.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_MONTHS</name>
              <description>
                Set to 1 to match the current month.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_HOURS</name>
              <description>
                Set to 1 to match the current hour.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_MINUTES</name>
              <description>
                Set to 1 to match the current minutes.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MATCH_SECONDS</name>
              <description>
                Set to 1 to match the current minutes.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_ENABLE</name>
              <description>
                Interrupt enable bit for ALARM B comparison interrupts.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_STAT</name>
              <description>
                Interrupt status bit for ALARM B comparison (set by an exact match).  Write one to this bit to clear it.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TODA</name>
          <description>
            Current time of day as recorded in the RTC. NOTE: This register must be written 32 bits at a time. The counter updates on the last byte written.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MONTH</name>
              <description>
                Current Value of Month (1..12) in the time of day.
              </description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATE</name>
              <description>
                Current Value of Date (0..3,0..9) in the time of day.
              </description>
              <bitRange>[26:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOURS</name>
              <description>
                Current Value of Hours (0..2,0..9) in the time of day.
              </description>
              <bitRange>[20:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MINUTES</name>
              <description>
                Current Value of Minutes (0..5,0..9) in the time of day.
              </description>
              <bitRange>[14:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SECONDS</name>
              <description>
                Current Value of Seconds(0..5,0..9 in the time of day.
              </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TODB</name>
          <description>
            Current time of day as recorded in the RTC. NOTE: Write to Time of Day B (TODB) before writing to Time of Day A (TODA).  This register must be written 32 bits at a time. The counter updates on the last byte written.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TWELVE_HOUR</name>
              <description>
                Set to 1 for 12 hour mode. Set to 0 for 24 hour mode.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CENTURY</name>
              <description>
                Current Value of Century (0..1) in the time of day.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DAY</name>
              <description>
                Current Value of Year (1..7) in the time of day.
              </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>YEAR</name>
              <description>
                Current Value of Year (0..9,0..9) in the time of day.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARMA</name>
          <description>
            ALARM value to match against the current time of day. NOTE: ALARM A interrupt should not be enabled when this register is written. The ALARM A interrupt should be cleared after this register is written.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MONTH</name>
              <description>
                Value of Month (1..12)  to be compared against the time of day.
              </description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATE</name>
              <description>
                Value of Date (0..3,0..9) to be compared against the time of day.
              </description>
              <bitRange>[26:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DAY</name>
              <description>
                Set to one to match alarm on day instead of date.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOURS</name>
              <description>
                Value of Hours (0..2,0..9) to be compared against the time of day.
              </description>
              <bitRange>[19:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MINUTES</name>
              <description>
                Value of Minutes (0..5,0..9) to be compared against the time of day.
              </description>
              <bitRange>[13:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SECONDS</name>
              <description>
                Value of Seconds(0..5,0..9) to be compared against the time of day.
              </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ALARMB</name>
          <description>
            ALARM value to match against the current time of day. NOTE: ALARM B interrupt should not be enabled when this register is written. The ALARM B interrupt should be cleared after this register is written.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MONTH</name>
              <description>
                Value of Month (1..12)  to be compared against the time of day.
              </description>
              <bitRange>[31:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATE</name>
              <description>
                Value of Date (0..3,0..9) to be compared against the time of day.
              </description>
              <bitRange>[26:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DAY</name>
              <description>
                Set to one to match alarm on day instead of date.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOURS</name>
              <description>
                Value of Hours (0..2,0..9) to be compared against the time of day.
              </description>
              <bitRange>[19:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MINUTES</name>
              <description>
                Value of Minutes (0..5,0..9) to be compared against the time of day.
              </description>
              <bitRange>[13:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SECONDS</name>
              <description>
                Value of Seconds(0..5,0..9) to be compared against the time of day.
              </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDT_COUNTER</name>
          <description>
            WDT COUNTER: This register decrements toward zero. If it gets there and resets are enabled then a WDT is issued. This can have the aeffect of waking up the peripheral block and then the M3. The peripheral rstgen status will reflect both a POR and a WDT reset cause in this case. If an interrupt occurs it can also wake up the peripheral block and M3.  If the interrupt causes the wake up then it will also be forwarded to the NVIC once the M3 is powered up and out of reset. Write any value to byte 0 of this register to cause the counter to be reloaded from WDT_RELOAD register.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Current Value of WDT COUNTER
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDT_ALARM</name>
          <description>
            WDT ALARM: The contents of this register are matched agains the counter. If the counter value falls below the alarm value then a WDT interrupt status bit is set to one. If this interrupt is enable to cause a power up then the WDT interrupt can power up the peripheral block and the M3.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>INT_STAT</name>
              <description>
                This bit is set to one if a watch dog timer alarm interrupt has been detected. It is clear by writing a one to this bit.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CLEAR</name>
                  <description>
                    Clear the watch dog timer interrupt status bit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESET_REQ</name>
              <description>
                This bit is set to one if the watch dog timer counter reaches zero. If the RESET enable bit is also a 1 then this will trigger the cascade of powering up the M3 and then giving it a watch dog timer reset.  Firmware can write this bit to either zero or one.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CLEAR</name>
                  <description>
                    Clear the watch dog timer reset request bit.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Set the watch dog timer reset request bit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RUNNING</name>
              <description>
                This bit is set to one if the watch dog timer counter running (decrementing). Clear the enable WDT operation bit reset this read only bit.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[28:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWRACK</name>
              <description>
                This read only bit shows the state of the power up acknowledge sent from the power controller.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWRREQ</name>
              <description>
                This read only bit shows the state of the power up request sent to the power controller.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ_EN</name>
              <description>
                Set to one to enable the WDT to interupt the M3. Note an interrupt request will power up the M3 if necessary.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable the watch dog timer interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable the watch dog timer interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>POR</name>
              <description>
                Set to one to enable the WDT to POR the chip.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable watch dog timer POR.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable watch dog timer POR.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RESET</name>
              <description>
                Set to one to enable the WDT to reset the chip.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable watch dog timer resets.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable watch dog timer resets.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT_RUN</name>
              <description>
                Set to one to enable WDT operation.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable the watch dog timer.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable the watch dog timer.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                Alarm value to compare against the WDT couner.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>WDT_RELOAD</name>
          <description>
            This register holds the value to be reloaded into the counter for each restart of the WDT. Anytime byte 0 of the counter is written then the entire counter is reloaded from this value. In addition, writing to this registers loads the counter from the data written to the RELOAD register. For normal operation, set up the bits in the ALARM register and then write the reload value to this register. This will start the watchdog operation.
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                Load this value into the counter each time a write is directed to byte zero of the counter.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR</name>
          <description>
            This register controls the 1KHz timer in the always on block. This timer can be used to wake up the M3 from a complete power down state. If the M3 is powered up at the time this timer interrupts, then the M3 simply receives a timer interrupt. NOTE: if the M3 is awakened from a power down state it will receive a full POR restart before it gets the interrupt. The NVIC interrupt enable will have been reset so the interrupt will not fire until the NVIC is re-enabled.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TESTMODE</name>
              <description>
                Write a one to this bit to enable a test mode in which the counter performs a right shift operation, inserting zeroes, instead of decrementing the count. This means the whole set of counter flip flops can be excercised in 20 clocks instead of 512K clocks. The decrementer can be checked independently with 20 initial patterns then checking the roll overs at each stage.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DECREMENT</name>
                  <description>
                    Run the timer in one shot mode (default).
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RIGHT_SHIFT</name>
                  <description>
                    Let the timer run with a periodic reload when it reaches zero.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIODIC</name>
              <description>
                Write a one to this bit to enable a periodic mode in which the counter will be automatically reloaded and restarted when it reaches zero.
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ONESHOT</name>
                  <description>
                    Run the timer in one shot mode.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Let the timer run with a periodic reload when it reaches zero.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER</name>
              <description>
                Write a one to this bit to enable the counter to decrement.
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Stop the timer.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Let the timer run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_ENABLE</name>
              <description>
                Write a one to this bit to enable the interrupt status bit to cause an interrupt to the M3 and if necessary, a power up of the M3.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_STAT</name>
              <description>
                This bit is set when the counter decrements from one to zero. It is cleared by writing a one to it.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Values written to this bit field update the counter. This counter decrements at a 1KHz rate. When it reaches zero, then its interrupt is generated.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TMR_RELOAD</name>
          <description>
            This register holds the reload count value
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Values written to this bit field update the counter when it reaches 0x0 in periodic mode.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEND_POR</name>
          <description>
            Write 0xdeadd00d to this register to force a full POR to the chip. This is useful after writing the flash INFO page. This will also force the default settings in to the buck converters. A chip can be recovered from a dead brick state by erasing the flash and issuing this command. NOTE: to erase the flash, the buck converters may have to be restored to a working voltage first. The de-bricking bootmode will do this as well as erasing the customer portion of the INFO page.
          </description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>KEY</name>
              <description>
                The POR is forced to the whole chip when this field is written with 0xdeadd00d.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UNLOCK_DEBUG</name>
          <description>
            Write the appropriate value to this register to unlock the SWD port, even if it is locked out in the flash INFO page.
          </description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>KEY</name>
              <description>
                The SWD debugger port is unlocked by writing the appropriate 32-bit value here. Writing any else will turn this override feature back off. If the override is set, this register will read back 0x00000001.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PWR</name>
          <description>
            This register holds the bit fields that control the power state of the SOC. The default operation when the POWER_DOWN bit is written to one is to turn off ALL power domains except the always on domain.  The default behavior on power up is to power up everything but the ADC and the DSP. This can be overridden somewhat using the force bits in this register. The general should only modify the force bits and write to the power down bit. NOTE: the apparent reset or default state of these bits will be different depending on whether the M3 is starting up from a cold start or a warm start.
          </description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>POWER_DOWN</name>
              <description>
                Write a one to this bit or use the set register to set this bit. Either operation will initiate a power down sequence that will power down the M3 and all of its memories that are to be powered off.  If the peripheral power domain is not forced to remain on then it will also be powered down in response to setting this bit. Shutting down the peripheral domain will power down the ADC.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_PWR_UP_CMPLT</name>
              <description>
                This read only bit indicates when the flash VREF has fully charged and the PDM signal has been removed.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WAKE_PIN_STATE</name>
              <description>
                This read only bit indicates the current value presented to the WAKE pin of the chip. The WAKE pin is one thing that can wake up the M3.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_PWR_STATE</name>
              <description>
                This read only bit indicates the current power state of the ADC. In general, the power on of the ADC will appear to be instantaneous to an M3 program.  This bit provides a mechanism to interlock the firmware power up code.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_PWR_STATE</name>
              <description>
                This read only bit indicates the current power state of the DSP. In general, the power on of the DSP will appear to be instantaneous to an M3 program.  This bit provides a mechanism to interlock the firmware power up code.
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_V25</name>
              <description>
                Set this bit to zero to turn off the flash FLASH 2.5V. Set this bit to one to turn on the FLASH 2.5V.
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_PDM</name>
              <description>
                Set this bit to zero to turn off the flash PDM signal.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_VREF</name>
              <description>
                Set this bit to zero to turn off the voltage reference for the flash.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK_FORCE</name>
              <description>
                Write a one to this bit to force the MEM BUCK converter to remain ON even when the M3 itself is powered OFF. The default behavior is to power down the MEM BUCK converter when the M3 powers off.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK_FORCE</name>
              <description>
                Write a one to this bit to force the M3 BUCK converter to remain ON even when the M3 itself is powered OFF. The default behavior is to power down the M3 BUCK converter when the M3 powers off.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH_FORCE</name>
              <description>
                Write a one to this bit to force the M3 FLASH power domain to remain OFF even when the M3 itself is powered back up.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567_FORCE</name>
              <description>
                Write a one to this bit to force the M3 SRAM4567 power domain to remain ON even when the M3 itself is powered down.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23_FORCE</name>
              <description>
                Write a one to this bit to force the M3 SRAM23 power domain to remain ON even when the M3 itself is powered down.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1_FORCE</name>
              <description>
                Write a one to this bit to force the M3 SRAM1 power domain to remain ON even when the M3 itself is powered down.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0_FORCE</name>
              <description>
                Write a one to this bit to force the M3 SRAM0 power domain to remain ON even when the M3 itself is powered down.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH_FORCE</name>
              <description>
                Write a one to this bit to force the PERIPH power domain to remain ON even when the M3, DSP, and ADC are powered down.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO_FROZEN</name>
              <description>
                Write a zero to this bit to force the GPIO latch in the peripheral block to flow through to the pins again. The GPIO data out enable out type signals are frozen in their final state before the M3 is reset, isolated and powered. This happens automatically on a power down of the M3. When the M3 comes back in a warm start the GPIO latches are frozen until firmware clears this bit. A cold start does not set hthis bit.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH</name>
              <description>
                Write a zero to this bit to turn off power in the M3 FLASH power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. In addition, this bit can be forced to remain off even if the M3 is powered up from a wake event. This is useful for various power saving modes where the program is running as a warm start program in one or more of the SRAMs.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567</name>
              <description>
                Write a zero to this bit to turn off power in the M3 SRAM4567 power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. In addition, this bit can be forced to remain on even if the M3 is powered down.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23</name>
              <description>
                Write a zero to this bit to turn off power in the M3 SRAM23 power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. In addition, this bit can be forced to remain on even if the M3 is powered down.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1</name>
              <description>
                Write a zero to this bit to turn off power in the M3 SRAM1 power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. In addition, this bit can be forced to remain on even if the M3 is powered down.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0</name>
              <description>
                Write a zero to this bit to turn off power in the M3 SRAM0 power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. In addition, this bit can be forced to remain on even if the M3 is powered down.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_BUCK</name>
              <description>
                Set this bit to one to turn on the DSP BUCK. Set to zero to turn it off. NOTE the DSP BUCK converter does NOT automatically get turned on when the chip powers up the first time.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK</name>
              <description>
                Write a zero to this bit to turn off the MEM BUCK converter.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK</name>
              <description>
                Write a zero to this bit to turn off the M3 BUCK converter.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Write a zero to this bit to turn off power in the ADC power domain.  This bit is NOT set automatically at initial power provisioning.  It can *NOT* be turned back on automatically in response to a wake up event. It can, however, be left on during an M3 power request. This would only make since if peripheral power were left on. Thus turning off the peripheral power will this area of the chip off as well.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Write a zero to this bit to turn off power in the DSP power domain. Writing zero will also power down the DSP SRAMs. This bit is NOT set automatically at initial power provisioning.  It can *NOT* be turned back on automatically in response to a wake up event. It is ALWAYS automatically turned off as part of every power down sequence. This bit also controls the power state of the DSP PMEM, XMEM, and YMEM.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3</name>
              <description>
                Write a zero to this bit to turn off power in the M3 power domain. Writing zero will also power down the M3 SRAMs, Flash, and Bootrom. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH</name>
              <description>
                Write a zero to this bit to turn off power in the peripheral power domain. This bit is set automatically at initial power provisioning.  Can be turned back on automatically in response to a wake up event. Note that turning on this bit will also turn on the high frequency oscillator (HFO).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PWR_SET</name>
          <description>
            The bits in this register correspond to bits in the PWR register. Writing a one to one of the bits in this register cause the correponding bit in the PWR register to be set. These bits always read back as zero.
          </description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>POWER_DOWN</name>
              <description>
                Writing a one to this bit will initiate a power down sequence.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_V25</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_PDM</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_VREF</name>
              <description>
                Set this bit to zero to turn of the voltage reference for the flash.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH_FORCE</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO_FROZEN</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_BUCK</name>
              <description>
                Write a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK</name>
              <description>
                Write a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK</name>
              <description>
                Write a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH</name>
              <description>
                Writing a one to this bit will set the corresponding bit in the PWR register.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PWR_CLEAR</name>
          <description>
            The bits in this register correspond to bits in the PWR register. Writing a one to one of the bits in this register cause the correponding bit in the PWR register to be cleared. These bits always read back as zero.
          </description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>POWER_DOWN</name>
              <description>
                Writing a one to this bit will have no effect.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_V25</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[26:26]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_PDM</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLASH_VREF</name>
              <description>
                Set this bit to zero to turn of the voltage reference for the flash.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH_FORCE</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO_FROZEN</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_FLASH</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM4567</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM23</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM1</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_SRAM0</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_BUCK</name>
              <description>
                Write a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEM_BUCK</name>
              <description>
                Write a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_BUCK</name>
              <description>
                Write a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIPH</name>
              <description>
                Writing a one to this bit will clear the corresponding bit in the PWR register.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>OSC_CSR</name>
          <description>
            Control bits headed either for the 8MHz high frequency osciallator (HFO) or to the 32KHz low frequency oscillator (LFO).
          </description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>HFO_CLK_GATE</name>
              <description>
                Writing a one to this bit will stop the HFO clock while it's trim values are changed. Firmware has to stop this clock when changing the value in the HFO_TRIM and HFO_TRIM_DIV bit fields.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BUCK_HF_CLK_SRC</name>
              <description>
                Set to one to select the 2MHz integrated crystal oscillator as the source for all of the buck converters external reference clock. Set to zero to use the on chip HFO as the source.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_OSC_DLY_SEL</name>
              <description>
                These settings will be defined after characterization.
              </description>
              <bitRange>[27:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_OSC_DLY_SEL</name>
              <description>
                These settings will be defined after characterization.
              </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HFO_TRIM</name>
              <description>
                These settings will be defined after characterization.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LFO_3NA_DIS</name>
              <description>
                Set to one to disable voltage mode operation reference current.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LFO_36NA_DIS</name>
              <description>
                Set to one to disable current mode operation reference current.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LFO_36NA_TRIM</name>
              <description>
                Set the current mode reference trim value into this bit field. These settings will be defined after characterization.
              </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LFO_TRIM</name>
              <description>
                Output frequency trim settings. These settings will be defined after characterization.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMIC_AO_CSR</name>
          <description>
            Control bits headed for the PMIC. These are all captured in the PMIC by LOAD_L. The LOAD_L pulse is automatically generated whenever this register is written, provided that the WRITE bit is written as a one on the same cycle.
          </description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WRITE</name>
              <description>
                Set this write only bit to one to issue a LOAD_L pulse to the PMIC causing it to capture the values from this register.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC</name>
              <description>
                Selects which clock source to use for the divider in the peripheral which can drive the AO PMIC.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Select the 8MHz HFO clock source into the divider.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Select the 32KHz clock source into the divider.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC_DIV</name>
              <description>
                Selects which HFO divider to use as an external clock for this PMIC.
              </description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 2MHz or 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 1MHz or 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 500KHz or 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 250KHz or 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 125KHz or 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 62500Hz or 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz (only 32KHz source).
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz (only 32KHz source).
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BYPASS_PU</name>
              <description>
                Inside the PMIC, this value bypasses the normal internal generation of the pull up pulse width. It substitutes the PU_BYPASS value instead.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select normal operation in which PMIC controls pull down pulse width.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OVERRIDE</name>
                  <description>
                    OVERRIDE automatic control function in PMIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_REF_EXT</name>
              <description>
                Inside the PMIC, this value selects between REF_CLK_PWR_UP and REF_CLK input to the PMIC.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INITIAL</name>
                  <description>
                    Select initial operation by using the internal reference clock.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select the reference clock that is supplied to the PMIC block.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_MODE</name>
              <description>
                Inside the PMIC, this value selects between frequency and voltage mode and selects the target voltage in volatage mode.
              </description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>VOLTAGE_600MV</name>
                  <description>
                    Select voltage mode and target 600mV.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_700MV</name>
                  <description>
                    Select voltage mode and target 700mV.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_900MV</name>
                  <description>
                    Select voltage mode and target 900mV.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_1200MV</name>
                  <description>
                    Select voltage mode and target 1200mV.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_MODE</name>
                  <description>
                    Select frequency mode with VMIN and VMAX protection.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMIN</name>
                  <description>
                    Select frequency mode with VMIN protection.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMAX</name>
                  <description>
                    Select frequency mode with maximum voltage limiting to XXXmV.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_NO_VLIM</name>
                  <description>
                    Select frequency mode with NO minimum or maximum voltage limiting.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VREG_TRIM</name>
              <description>
                Inside the PMIC, this value selects a trim offset for the target voltage.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_PD</name>
              <description>
                Inside the PMIC, this value controls the switch drivers pull DOWN pulse width. It defaults to the 900mV setting at reset. This value is ignored during initialization.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PU_BYPASS</name>
              <description>
                Inside the PMIC, this value controls the switch drivers pull UP pulse width. This value is only used in the driver if BYPASS_PU is also a one.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMIC_MEM_CSR</name>
          <description>
            Control bits headed for the PMIC. These are all captured in the PMIC by LOAD_L. The LOAD_L pulse is automatically generated whenever this register is written, provided that the WRITE bit is written as a one on the same cycle.
          </description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>READY</name>
              <description>
                The PMIC reports not ready, 0x0, whenever it is powered up. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STABLE</name>
              <description>
                This bit reports not stable, 0x0, whenever its target voltage is changed by firmware. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WRITE</name>
              <description>
                Set this write only bit to one to issue a LOAD_L pulse to the PMIC causing it to capture the values from this register.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC</name>
              <description>
                Selects which clock source to use for the divider in the peripheral which can drive the MEM PMIC.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Select the 8MHz HFO clock source into the divider.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Select the 32KHz clock source into the divider.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC_DIV</name>
              <description>
                Selects which HFO divider to use as an external clock for this PMIC.
              </description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 2MHz or 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 1MHz or 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 500KHz or 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 250KHz or 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 125KHz or 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 62500Hz or 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz (only 32KHz source).
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz (only 32KHz source).
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BYPASS_PU</name>
              <description>
                Inside the PMIC, this value bypasses the normal internal generation of the pull down pulse width. It substitutes the PU_BYPASS value instead.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select normal operation in which PMIC controls pull up pulse width.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OVERRIDE</name>
                  <description>
                    OVERRIDE automatic control function in PMIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_REF_EXT</name>
              <description>
                Inside the PMIC, this value selects between REF_CLK_PWR_UP and REF_CLK input to the PMIC.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INITIAL</name>
                  <description>
                    Select initial operation by using the internal reference clock.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select the reference clock that is supplied to the PMIC block.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_MODE</name>
              <description>
                Inside the PMIC, this value selects between frequency and voltage mode and selects the target voltage in volatage mode.
              </description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>VOLTAGE_600MV</name>
                  <description>
                    Select voltage mode and target 600mV.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_700MV</name>
                  <description>
                    Select voltage mode and target 700mV.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_900MV</name>
                  <description>
                    Select voltage mode and target 900mV.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_1200MV</name>
                  <description>
                    Select voltage mode and target 1200mV.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_MODE</name>
                  <description>
                    Select frequency mode with VMIN and VMAX protection.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMIN</name>
                  <description>
                    Select frequency mode with VMIN protection.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMAX</name>
                  <description>
                    Select frequency mode with maximum voltage limiting to XXXmV.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_NO_VLIM</name>
                  <description>
                    Select frequency mode with NO minimum or maximum voltage limiting.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VREG_TRIM</name>
              <description>
                Inside the PMIC, this value selects a trim offset for the target voltage.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_PD</name>
              <description>
                Inside the PMIC, this value controls the switch drivers PULL UP pulse width. It defaults to the 900mV setting at reset. This value is ignored during initialization.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PU_BYPASS</name>
              <description>
                Inside the PMIC, this value controls the switch drivers pull UP pulse width. This value is only used in the driver if BYPASS_PU is also a one.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMIC_M3_CSR</name>
          <description>
            Control bits headed for the PMIC. These are all captured in the PMIC by LOAD_L. The LOAD_L pulse is automatically generated whenever this register is written, provided that the WRITE bit is written as a one on the same cycle.
          </description>
          <addressOffset>0x78</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>READY</name>
              <description>
                The PMIC reports not ready, 0x0, whenever it is powered up. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STABLE</name>
              <description>
                This bit reports not stable, 0x0, whenever its target voltage is changed by firmware. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WRITE</name>
              <description>
                Set this write only bit to one to issue a LOAD_L pulse to the PMIC causing it to capture the values from this register.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC</name>
              <description>
                Selects which clock source to use for the divider in the peripheral which can drive the M3 PMIC.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Select the 8MHz HFO clock source into the divider.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Select the 32KHz clock source into the divider.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC_DIV</name>
              <description>
                Selects which HFO divider to use as an external clock for this PMIC.
              </description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 2MHz or 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 1MHz or 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 500KHz or 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 250KHz or 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 125KHz or 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 62500Hz or 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz (only 32KHz source).
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz (only 32KHz source).
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_VREG</name>
              <description>
                Set to one to monitor VDD_M3 after the power switch. Set to zero to monitor before the switch.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>REG_OUTPUT</name>
                  <description>
                    Select monitoring the regulator output.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>POST_SWITCH</name>
                  <description>
                    Select monitoring the voltage after it is switched.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FMODE_RST_L_N</name>
              <description>
                Inside the PMIC, this value forces a reset to the frequency mode counters. This should be 0 before switching to frequency mode. After the switch this should be set to one.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Select RESET operation for the frequency mode of operation.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select NORMAL operation for the frequency mode of operation.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_REF_EXT</name>
              <description>
                Inside the PMIC, this value selects between REF_CLK_PWR_UP and REF_CLK input to the PMIC.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INITIAL</name>
                  <description>
                    Select initial operation by using the internal reference clock.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select the reference clock that is supplied to the PMIC block.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_MODE</name>
              <description>
                Inside the PMIC, this value selects between frequency and voltage mode and selects the target voltage in volatage mode.
              </description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>VOLTAGE_600MV</name>
                  <description>
                    Select voltage mode and target 600mV.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_700MV</name>
                  <description>
                    Select voltage mode and target 700mV.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_900MV</name>
                  <description>
                    Select voltage mode and target 900mV.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_1200MV</name>
                  <description>
                    Select voltage mode and target 1200mV.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_MODE</name>
                  <description>
                    Select frequency mode with VMIN and VMAX protection.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMIN</name>
                  <description>
                    Select frequency mode with VMIN protection.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMAX</name>
                  <description>
                    Select frequency mode with maximum voltage limiting to XXXmV.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_NO_VLIM</name>
                  <description>
                    Select frequency mode with NO minimum or maximum voltage limiting.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VREG_TRIM</name>
              <description>
                Inside the PMIC, this value selects a trim offset for the target voltage.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_PD</name>
              <description>
                Inside the PMIC, this value controls the switch drivers UP pulse width. It defaults to the 900mV setting at reset. This value is ignored during initialization.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PU_BYPASS</name>
              <description>
                Inside the PMIC, this value controls the switch drivers pull UP pulse width. This value is only used in the driver if BYPASS_PU is also a one.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMIC_M3_CSR2</name>
          <description>
            This register contains the frequency target value for the M3 PMIC.
          </description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FREQ_TARGET</name>
              <description>
                This field defines the target frequency of the M3 PMIC based on this equation: FREQ_TARGET = ((Oscillator Clock / Reference Clock) / 2)
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>LDO_CSR</name>
          <description>
            Control bits headed for the LDO. These are all direct drive from the RTC register bits to analog trim inputs. Changing a bit here will have a direct affect on the analog trim for the LDO.
          </description>
          <addressOffset>0x80</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VREF_TRIM</name>
              <description>
                Voltage reference trim.
              </description>
              <bitRange>[9:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LDO_BALLAST</name>
              <description>
                Enables a ballast load current for LDO output.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable load current.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable load current.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMIC_FREF_AO_CSR</name>
          <description>
            This register contains the AO state dividers for the 3 PMIC clock references.
          </description>
          <addressOffset>0x84</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_DSP_CLK_SRC</name>
              <description>
                This field selects whether the HFO or the 32KHz XTAL is used for the PMIC external reference. It is used when the M3 is powered down.
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Use 32KHz crystal (default)
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Use HFO as the source.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BUCK_DSP_SEL_LOW</name>
              <description>
                This field defines the frequency divider applied to the 32KHz low frequency reference.
              </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_M3_CLK_SRC</name>
              <description>
                This field selects whether the HFO or the 32KHz XTAL is used for the PMIC external reference. It is used when the M3 is powered down.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Use 32KHz crystal (default)
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Use HFO as the source.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_M3_SEL_LOW</name>
              <description>
                This field defines the frequency divider applied to the 32KHz low frequency reference.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_MEM_CLK_SRC</name>
              <description>
                This field selects whether the HFO or the 32KHz XTAL is used for the PMIC external reference. It is used when the M3 is powered down.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Use 32KHz crystal (default)
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Use HFO as the source.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_MEM_SEL_LOW</name>
              <description>
                This field defines the frequency divider applied to the 32KHz low frequency reference.
              </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_AO_CLK_SRC</name>
              <description>
                This field selects whether the HFO or the 32KHz XTAL is used for the PMIC external reference. It is used when the M3 is powered down.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Use 32KHz crystal (default)
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Use HFO as the source.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_AO_SEL_LOW</name>
              <description>
                This field defines the frequency divider applied to the 32KHz low frequency reference.
              </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 62, i.e. 512Hz.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUCK_DSP_CSR</name>
          <description>
            Control bits headed for the BUCK. These are all captured in the BUCK by LOAD_L. The LOAD_L pulse is automatically generated whenever this register is written, provided that the WRITE bit is written as a one on the same cycle.
          </description>
          <addressOffset>0x88</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>READY</name>
              <description>
                The BUCK reports not ready, 0x0, whenever it is powered up. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STABLE</name>
              <description>
                This bit reports not stable, 0x0, whenever its target voltage is changed by firmware. Firmware can use this bit to know when the target voltage has been reached.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WRITE</name>
              <description>
                Set this write only bit to one to issue a LOAD_L pulse to the BUCK causing it to capture the values from this register.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC</name>
              <description>
                Selects which clock source to use for the divider in the peripheral which can drive the DSP BUCK.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HFO</name>
                  <description>
                    Select the 8MHz HFO clock source into the divider.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>XTAL</name>
                  <description>
                    Select the 32KHz clock source into the divider.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_OSC_DIV</name>
              <description>
                Selects which HFO divider to use as an external clock for this BUCK.
              </description>
              <bitRange>[27:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1BY1</name>
                  <description>
                    Divider is set for 1 divided by 1, i.e. 2MHz or 32768Hz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY2</name>
                  <description>
                    Divider is set for 1 divided by 2, i.e. 1MHz or 16384Hz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY4</name>
                  <description>
                    Divider is set for 1 divided by 4, i.e. 500KHz or 8192Hz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY8</name>
                  <description>
                    Divider is set for 1 divided by 8, i.e. 250KHz or 4096Hz.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY16</name>
                  <description>
                    Divider is set for 1 divided by 16, i.e. 125KHz or 2048Hz.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY32</name>
                  <description>
                    Divider is set for 1 divided by 32, i.e. 62500Hz or 1024Hz.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY64</name>
                  <description>
                    Divider is set for 1 divided by 64, i.e. 512Hz (only 32KHz source).
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1BY128</name>
                  <description>
                    Divider is set for 1 divided by 128, i.e. 256Hz (only 32KHz source).
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_VREG</name>
              <description>
                Set to one to monitor VDD_DSP after the power switch. Set to zero to monitor before the switch.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>REG_OUTPUT</name>
                  <description>
                    Select monitoring the regulator output.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>POST_SWITCH</name>
                  <description>
                    Select monitoring the voltage after it is switched.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FMODE_RST_L_N</name>
              <description>
                Inside the BUCK, this value forces a reset to the frequency mode counters. This should be 0 before switching to frequency mode. After the switch this should be set to one.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Select RESET operation for the frequency mode of operation.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select NORMAL operation for the frequency mode of operation.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_REF_EXT</name>
              <description>
                Inside the BUCK, this value selects between REF_CLK_PWR_UP and REF_CLK input to the BUCK.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INITIAL</name>
                  <description>
                    Select initial operation by using the internal reference clock.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select the reference clock that is supplied to the BUCK block.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OP_MODE</name>
              <description>
                Inside the BUCK, this value selects between frequency and voltage mode and selects the target voltage in volatage mode.
              </description>
              <bitRange>[21:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>VOLTAGE_600MV</name>
                  <description>
                    Select voltage mode and target 600mV.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_700MV</name>
                  <description>
                    Select voltage mode and target 700mV.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_900MV</name>
                  <description>
                    Select voltage mode and target 900mV.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VOLTAGE_1200MV</name>
                  <description>
                    Select voltage mode and target 1200mV.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_MODE</name>
                  <description>
                    Select frequency mode with VMIN and VMAX protection.
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMIN</name>
                  <description>
                    Select frequency mode with VMIN protection.
                  </description>
                  <value>5</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQ_VMAX</name>
                  <description>
                    Select frequency mode with maximum voltage limiting to XXXmV.
                  </description>
                  <value>6</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREQUENCY_NO_VLIM</name>
                  <description>
                    Select frequency mode with NO minimum or maximum voltage limiting.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>VREG_TRIM</name>
              <description>
                Inside the BUCK, this value selects a trim offset for the target voltage.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_PD</name>
              <description>
                Inside the BUCK, this value controls the switch drivers UP pulse width. It defaults to the 900mV setting at reset. This value is ignored during initialization.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PU_BYPASS</name>
              <description>
                Inside the BUCK, this value controls the switch drivers pull  UP pulse width. This value is only used in the driver if BYPASS_PU is also a one.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BUCK_DSP_CSR2</name>
          <description>
            This register contains the frequency target value for the DSP BUCK.
          </description>
          <addressOffset>0x8c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FREQ_TARGET</name>
              <description>
                This field defines the target frequency of the DSP BUCK based on this equation: FREQ_TARGET = ((Oscillator Clock / Reference Clock) / 2)
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PULL_ENABLE</name>
          <description>
            Pull Up or Down Resistor Enable register for the GPIO. The PADs have 2 resistors in them. One for pulling up and one for pulling down. Bits in this register enable a resistor in the corresponding pad. Which resistor (up or down) is selected in the IO_GPIO8_PULL_DIRECTION register.
          </description>
          <addressOffset>0x90</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to enable the pull up or down resistor in the GPIO PAD.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PULL_DIRECTION</name>
          <description>
            Pull Up or Down Enable register for the GPIO.
          </description>
          <addressOffset>0x94</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to select the pull up resistor in the GPIO PAD. Set to 0 to select the pull down resistor in the GPIO PAD. NOTE: Use IO_GPIO8_PULL_ENABLE to actually turn on the resistor in the pad.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI0_CTRL</name>
          <description>
            This register controls various pad functions for
SPI0_CLK, SPI0_MOSI and SPI0_MISO. Unless otherwise stated,
these pins affect these pads in any padmux configuration.
          </description>
          <addressOffset>0x98</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI2_DYNAMIC_MISO_PULL_DISABLE_ALT</name>
              <description>
                If 0, SPI0_MISO_RE determines if the pull is active. If 1, the SPI state machine can disable the pull (up or down)
when it expects the remote device to be driving the MISO line. This should save power during transfers.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI2_DYNAMIC_MISO_PULL_DISABLE</name>
              <description>
                If 0, SPI0_MISO_RE determines if the pull is active. If 1, the SPI state machine can disable the pull (up or down)
when it expects the remote device to be driving the MISO line. This should save power during transfers.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1_DYNAMIC_MISO_PULL_DISABLE</name>
              <description>
                If 0, SPI0_MISO_RE determines if the pull is active. If 1, the SPI state machine can disable the pull (up or down)
when it expects the remote device to be driving the MISO line. This should save power during transfers.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_DYNAMIC_MISO_PULL_DISABLE</name>
              <description>
                If 0, SPI0_MISO_RE determines if the pull is active. If 1, the SPI state machine can disable the pull (up or down)
when it expects the remote device to be driving the MISO line. This should save power during transfers.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MISO_RE</name>
              <description>
                If 0, SPI0_MISO has no pull up or pull down enabled. Set to 1 to enable the weak internal pull up or pull down.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MISO_PU</name>
              <description>
                If SPI0_MISO_RE is clear, this bit has no effect. If SPI0_MISO_RE is set, then this bit selects
if the pull is high (1) or if it is low (0).
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MOSI_RE</name>
              <description>
                If 0, SPI0_MOSI has no pull up or pull down enabled. Set to 1 to enable the weak internal pull up or pull down.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MOSI_PU</name>
              <description>
                If SPI0_MOSI_RE is clear, this bit has no effect. If SPI0_MOSI_RE is set, then this bit selects
if the pull is high (1) or if it is low (0).
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_SCLK_RE</name>
              <description>
                If 0, SPI0_SCLK has no pull up or pull down enabled. Set to 1 to enable the weak internal pull up or pull down.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_SCLK_PU</name>
              <description>
                If SPI0_SCLK_RE is clear, this bit has no effect. If SPI0_SCLK_RE is set, then this bit selects
if the pull is high (1) or if it is low (0).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART0_CTRL</name>
          <description>
            This register controls various pad functions for
UART0_RX,and UART0_CTS. Unless otherwise stated,
these pins affect these pads in any padmux configuration.
          </description>
          <addressOffset>0x9c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_CTS_RE</name>
              <description>
                If 0, UART0_CTS has no pull up or pull down enabled. Set to 1 to enable the weak internal pull up or pull down.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_CTS_PU</name>
              <description>
                If UART0_CTS_RE is clear, this bit has no effect. If UART0_CTS_RE is set, then this bit selects
if the pull is high (1) or if it is low (0).
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RX_RE</name>
              <description>
                If 0, UART0_RX has no pull up or pull down enabled. Set to 1 to enable the weak internal pull up or pull down.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RX_PU</name>
              <description>
                If UART0_RX_RE is clear, this bit has no effect. If UART0_RX_RE is set, then this bit selects
if the pull is high (1) or if it is low (0).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AO_CSR2</name>
          <description>
            This register contains status and controls for the always on block.
          </description>
          <addressOffset>0xa0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TWO_INDUCTOR_MODE</name>
              <description>
                This read only  value shows the state of the flip flop that captures the state of the WAKE pin shortly after POR.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FOUR_INDUCTOR</name>
                  <description>
                    Assumes M3 and DSP are each on their own PMIC.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TWO_INDUCTOR</name>
                  <description>
                    Assumes M3 and DSP tied to AO PMIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT_CLK_DIS</name>
              <description>
                Set this bit to one to disable the RTC WDT clock for lower power.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR_CLK_DIS</name>
              <description>
                Set this bit to one to disable the RTC TMR clock for lower power.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OVRD_CLK_GATE_HFO2PMIC</name>
              <description>
                Set this bit to one to disable the source clock gating of the HFO divider to PMIC external clock input.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PM_PD_DISABLE</name>
              <description>
                Set this bit to one to disable the pull down resistor in the GPIO_PM PAD.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WAKE_POLARITY</name>
              <description>
                Set this bit to one to invert the expected polarity of the WAKE pin input.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WAKE_RE</name>
              <description>
                Set this bit to one to enable the pull resistor (default). Set to zero to disable.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WAKE_PU</name>
              <description>
                Set this bit to one to select a pull up direction. Set this bit to zero to select a pull down direction for the pad resistors.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BROWNOUT</name>
          <description>
            This register contains the status and controls for the brown out detector. One can monitor the state of the BOD coming from analog here. In addition this register contains two interrupt status bits:  one for BOD rising and one for BOD falling.  Finally, it contains two interrupt enable bits that enable the status bits to the NVIC
          </description>
          <addressOffset>0xa4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BOD_STATE</name>
              <description>
                This read only bit provides the current state of the brown out detector signal (BOD) coing from analog.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLIP</name>
              <description>
                Set this bit to one to immediately complement the polarity of the input from the analog brown out detector.  This allows for program testing in a program synchronous way.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TEST</name>
              <description>
                Set this bit to one to enable 1KHz test clock to XOR with analog brownout detetor input. This will cause the interrupts to fire up every millisecond and down every millisecond, but separated in time by 500 microseconds. This allows for program testing at a more systems level.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ_ENABLE_UP</name>
              <description>
                Set this bit to one to enable IRQ_UP to the NVIC.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ_UP</name>
              <description>
                This bit is set when the BOD goes from zero to one. Write a one to this bit to clear it.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Interrupt status bit is not set.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Interrupt status bit is set.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ_ENABLE_DOWN</name>
              <description>
                Set this bit to one to enable IRQ_dOWN to the NVIC.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ_DOWN</name>
              <description>
                This bit is set when the BOD goes from one to zero. Write a one to this bit to clear it.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Interrupt status bit is not set.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Interrupt status bit is set.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>OSC_CSR2</name>
          <description>
            Control bits headed for the 16MHz very high frequency audio crystal osciallator (VHFO).
          </description>
          <addressOffset>0xb0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VHFO_TRIM_CL</name>
              <description>
                Sets the CL trim for the 16MHz oscillator.
              </description>
              <bitRange>[8:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VHFO_TRIM_GM</name>
              <description>
                Sets the GM trim for the 16MHz oscillator.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VHFO_PD_N</name>
              <description>
                Write 1 to this bit to power up the VHFO.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>
                    VHFO is powered off.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>
                    VHFO is powered on.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLKOUT_CFG</name>
          <description>
            Configuration register for CLKOUT.
          </description>
          <addressOffset>0xc0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN</name>
              <description>
                Enables the CLKOUT logic.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLED</name>
                  <description>
                    CLKOUT is disabled
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLED</name>
                  <description>
                    CLKOUT is enabled
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLKOUT_CTRL</name>
          <description>
            Control register for CLKOUT.
          </description>
          <addressOffset>0xc4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL</name>
              <description>
                One-hot register which selects the active source of CLKOUT.
              </description>
              <bitRange>[8:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NONE</name>
                  <description>
                    CLKOUT is disabled
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>32KHZ</name>
                  <description>
                    32kHz
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>16KHZ</name>
                  <description>
                    16kHz
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8KHZ</name>
                  <description>
                    8kHz
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4KHZ</name>
                  <description>
                    4kHz
                  </description>
                  <value>8</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ</name>
                  <description>
                    2MHz
                  </description>
                  <value>16</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1MHZ</name>
                  <description>
                    1MHz
                  </description>
                  <value>32</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>512KHZ</name>
                  <description>
                    512kHz
                  </description>
                  <value>64</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>256KHZ</name>
                  <description>
                    256kHz
                  </description>
                  <value>128</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ADC_TOGGLE</name>
                  <description>
                    ADC Toggle Signal
                  </description>
                  <value>256</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DRIFT_PPQ</name>
          <description>
            This register holds a signed 32-bit oscillator drift value in units of PPQ.  Setting this register to a non-zero value will activate the drift integrator and trigger 16kHz clock insertions/skips in the event of DRIFT_INTEG overflow/underflow.
          </description>
          <addressOffset>0xd0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                signed 32-bit oscillator drift value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DRIFT_INTEG</name>
          <description>
            This register holds the accumulated PPQ drift.  This register can be written with any initial value.
          </description>
          <addressOffset>0xd4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                signed 32-bit accumulated drift value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DRIFT_STAT</name>
          <description>
            This register holds various status bits for the drift correction logic.
          </description>
          <addressOffset>0xd8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE</name>
              <description>
                This bit enables the integrator for drift correction.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SKIP_TOG</name>
              <description>
                This bit shows the current state of the skip cycle toggle signal. It can be overwritten.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADD_TOG</name>
              <description>
                This bit shows the current state of the add cycle toggle signal. It can be overwritten.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>NVRAMA</name>
          <description>
            This register holds a 32-bit value for the application in 32-bits of non-volatile storage.  NOTE: a value written to this register survives all resets except the master POR that happens at true first chip power up.
          </description>
          <addressOffset>0xe0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                32-bits of non-volatile storage.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>NVRAMB</name>
          <description>
            This register holds a 32-bit value for the application in 32-bits of non-volatile storage.  NOTE: a value written to this register survives all resets except the master POR that happens at true first chip power up.
          </description>
          <addressOffset>0xe4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                32-bits of non-volatile storage.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>NVRAMC</name>
          <description>
            This register holds a 32-bit value for the application in 32-bits of non-volatile storage.  NOTE: a value written to this register survives all resets except the master POR that happens at true first chip power up.
          </description>
          <addressOffset>0xe8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                32-bits of non-volatile storage.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>NVRAMD</name>
          <description>
            This register holds a 32-bit value for the application in 32-bits of non-volatile storage.  NOTE: a value written to this register survives all resets except the master POR that happens at true first chip power up.
          </description>
          <addressOffset>0xec</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                32-bits of non-volatile storage.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG</name>
          <description>
            Provide debug controls for the blocks in the always on block.
          </description>
          <addressOffset>0xf0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>FPANEL_FRAME</name>
              <description>
                Use this bit in diagnostics to count front panel frames.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WEIRD</name>
              <description>
                This bit provides a read only view of the WEIRD flip flop for diagnostic purposes.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[29:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BUCK_DSP_BYPASS_PU</name>
              <description>
                Inside the DSP PMIC, this value bypasses the normal internal generation of the pull down pulse width. It substitutes the PU_BYPASS value instead.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select normal operation in which PMIC controls pull down pulse width.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OVERRIDE</name>
                  <description>
                    OVERRIDE automatic control function in PMIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PMIC_M3_BYPASS_PU</name>
              <description>
                Inside the M3 PMIC, this value bypasses the normal internal generation of the pull down pulse width. It substitutes the PU_BYPASS value instead.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Select normal operation in which PMIC controls pull down pulse width.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>OVERRIDE</name>
                  <description>
                    OVERRIDE automatic control function in PMIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FORCE_MEM_CLKS</name>
              <description>
                Force memory clocks to remain on. This one resets to one to guarantee memories will come up.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FAST_CLOCK</name>
              <description>
                Select fast clock for time of day testing and debug.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONTHS_SKIP</name>
              <description>
                Assume a carry out on every RTC increment. Makes years pass by in seconds.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DAYS_SKIP</name>
              <description>
                Assume a carry out on every RTC increment.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOURS_SKIP</name>
              <description>
                Assume a carry out on every RTC increment. Makes days pass by in seconds.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MINUTES_SKIP</name>
              <description>
                Assume a carry out on every RTC increment. Makes hours pass by in seconds.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SECONDS_SKIP</name>
              <description>
                Assume a carry out on every RTC increment. Makes minutes pass by in seconds.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_READ_WRITE</name>
          <description>
            Provide a read/write register for diagnostics.
          </description>
          <addressOffset>0xf4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read/Write Register for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG0_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0xf8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG1_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0xfc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SPI0</name>
      <version>1.0</version>
      <description>
        SPI System Control Block Registers.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50020000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SPI0</name>
        <value>6</value>
        <description>SPI0 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CONFIG</name>
          <description>
            SPI configuration register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPIRDY_ACT_LOW</name>
              <description>
                If 1, SPI Ready (from SPI_RDY or MISO) will be treated as active low (e.g. if 0, then we are
ready and no flow control active). If 0 it is active high.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIS_RX_FIFO</name>
              <description>
                If 1, RX FIFO is disabled and will not receive any further data.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_LEVEL_TRIG</name>
              <description>
                Program to the level that you want RX_FIFO_HIT_LEVEL to be set. If this reg is
2, then RX_FIFO_HIT_LEVEL will be set if the number of entries in RX_FIFO are
2 or greater.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_SLVRDY</name>
              <description>
                If 1, SPI_RDY going low can stall the SPI transfers until it goes back high.
Takes effect at byte boundaries. Note SLVRDY_IS_MISO can change if SPI_RDY or
SPI_MISO is used as flow control.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_OVFLW_DROPHEAD</name>
              <description>
                If 0, if the RX FIFO has an overflow, the first entries it received will be
preserved. If 1, the most recent entries will be preserved. Note if 1, the
RX_FIFO Overflow sticky bit will never bet set
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLVRDY_IS_MISO</name>
              <description>
                This bit has no effect if EN_SLVRDY is 0. If SLVRDY_IS_MISO is 0, then the RDY signal
comes from SPI_RDY. If SLVRDY_IS_MISO is 1, RDY comes from MISO. Note MISO data is
not very helpful in this mode, but is not automatically disabled. Use RXDROP_CNT or
CONFIG.DIS_RX_FIFO to drop RX data if needed.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>END</name>
              <description>
                If 0, transmit msbit first. If 1 send lsbit first.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CPHA</name>
              <description>
                If CPHA=1 and CPOL=0, drive on PE and sample on NE. If CPHA=0 and CPOL=0, drive on
NE and sample on PE. Swapping CPOL=1 will swap the PE and NE above.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CPOL</name>
              <description>
                CPOL indicates idle clock steady state. CPOL=0 and SPICLK will default to low.
CPOL=1 and SPICLK will default to high.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RD_PUSHES_TX_FIFO</name>
              <description>
                If set to 1, the TX FIFO will empty as normal, but for every read pop that
occurs, a new TX will be pushed into the FIFO. This can be useful for
a sequence of indeterminate length to save the processor from pushing data into the
TX FIFO or using dummy bytes.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_1BYTE_FIFO_DATA</name>
          <description>
            SPI read and write data register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads return receive data from SPI. Writes send data to transmit of SPI.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLKDIV</name>
          <description>
            SPI clock divider register.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ICG</name>
              <description>
                The delay bewteen each command will be ((ICG*2)+1) * PeriphClk period (125ns).
              </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IBG</name>
              <description>
                The delay bewteen each byte will be (IBG+1) * PeriphClk period (125ns).
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLKDIV</name>
              <description>
                Controls SPI clock rate. SPI_CLK freq is PeriphClk (125ns) / (CLKDIV+1). Min
legal value is 1. However, for value of 1 or 2, additional settings are
required. Specifically:
Value 1 (4MHz) requires CONFIG2.RX_SAMPLE_TIME = 2 and CONFIG2.DISABLE_MISO_METAFLOP = 1 to operate.
Value 2 (2.6MHz) requires CONFIG2.RX_SAMPLE_TIME = 1 to operate.
Value 3 and above operate normally without additional settings.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>
            SPI status register. Note that ANDing this register with INT_EN will effectively give you the unmasked interrupts.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_DUP</name>
              <description>
                This is a duplicate of STATUS.RX_FIFO_HIT_LEVEL presented here for interrupt simplicity.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD14</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA_DUP</name>
              <description>
                This is a duplicate of STATUS.RXFIFO_HAS_1DATA presented here for interrupt simplicity.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD12</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY</name>
              <description>
                This goes high when busy goes from high to low. This bit will be set until
it is cleared by a W1C to this location or soft reset or CONFIG2.CLR_STICKY
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY</name>
              <description>
                This goes high when busy goes from low to high. This bit will be set until
it is cleared by a W1C to this location or soft reset or CONFIG2.CLR_STICKY
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE</name>
              <description>
                This is exactly the inverse of STATUS.START_BUSY and when it goes high, the
command is done and a new transaction can start. It is presented here for
regularity in the interrupts.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE</name>
              <description>
                If 1, all current transmits in TX_FIFO (including DUMMY_BYTES)
are complete and on the wire. Note that just because the
transmits are complete, the SPI transaction is not yet
completed until the CS deasserts. Look at
STATUS.START_BUSY or STATUS.CMD_IS_DONE to determine if the command is done.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL</name>
              <description>
                If 1, then there is at least CONFIG.FIFO_LEVEL_TRIG Byte(s) of data
waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA or TXRX_2BYTE_FIFO_DATA or
RX_4BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE</name>
              <description>
                If 1, then there is at least CONFIG.FIFO_LEVEL_TRIG Byte(s) of space available on
TX_FIFO. If 0, there isn't that much space. Write TXRX_1BYTE_FIFO_DATA or
TXRX_2BYTE_FIFO_DATA to push more data.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA</name>
              <description>
                If 1, then there is at least 1 byte of data waiting in RX FIFO.
Read TXRX_1BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_1SPACE</name>
              <description>
                If 1, then there is at least 1 byte of space to put onto the TX FIFO queue by writing to
TXRX_1BYTE_FIFO_DATA. If 0, there isn't. Note, actual space available can be derived
by reading TX_FIFO_DEBUG.ENTRIES and subtracting that from MAX entries (16).
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS_SEL</name>
              <description>
                Select which of the 4 chip selects to be used. 0=CS0, 1=CS1, 2=CS2 and 3=CS3.
Note this bit is latched when start is written and is ignored until the next start.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_CS</name>
              <description>
                If 1, CS stays active until this bit is cleared. If written to 0 the CS will go inactive
after all data in TX FIFO (and DUMMY_BYTES) has been transmitted. Note this bit
can be changed in mid transaction without issue.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>START_BUSY</name>
              <description>
                Write to 1 to start transaction. Read back to determine if the SM is
START_BUSY (1) or if has gone back to idle (0). Note that this will only
go to idle (0) when the entier command is finished (CS deasserted) which is
not the same as the TX FIFO being empty.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO_DEBUG</name>
          <description>
            SPI TX FIFO debug register
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. Newest entries are dropped. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Current number of entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO_DEBUG</name>
          <description>
            SPI RX FIFO debug register
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when RX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when RX FIFO overflows. See CONFIG.RX_OVFLW_KEEPHEAD for additional details on drop
behavior.  Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_RDY</name>
              <description>
                Live value of SPI_RDY
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Current number of entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RXDROP_CNT</name>
          <description>
            RX Drop Byte Count
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Indicates how many RX bytes to silently drop before triggering an interrupt or rxfifo_has_data. Note, this should be written before the command begins to avoid cornercase issues.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>GENERAL_DEBUG</name>
          <description>
            SPI General Debug Fields
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_BIT_BANG</name>
              <description>
                If set, the BB_SPI_MOSI, BB_SPI_CS_N and BB_SPI_CLK control the SPI interface.
The internal SM has no effect and can be placed in SOFT_RESET. However, the
CONFIG2.CLK_ON bit should be set, or else the clock may gate off due to apparent
quiescence.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_MOSI</name>
              <description>
                Value to drive on of SPI_MOSI
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_CS_N</name>
              <description>
                Value to drive on SPI_CS_N. Note the CS will be asserted on the CS specified in STATUS.CS_SEL
which is only selected when STATUS.START_BUSY is written. So to use this feature,
set START_BUSY and then operate the bit bang mode. After wards, you should finish the
command by writing at least one byte to TX_FIFO and making sure STATUS.HOLD_CS is low.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_CLK</name>
              <description>
                Value to drive on SPI_CLK
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_MISO</name>
              <description>
                Current value of SPI_MISO input
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_MOSI</name>
              <description>
                Current value of expected SPI_MOSI output
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_CS_N</name>
              <description>
                Current value of expected expected SPI_CS_N output
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_CLK</name>
              <description>
                Current value of expected SPI_CLK output
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE_REG</name>
              <description>
                Current state of primary State Machine. States are listed in normal order of execution.
0x0=STATE_IDLE
0x1=STATE_TX_ASSERT_CS
0x3=STATE_TRANS_BIT7
0x2=STATE_TRANS_BIT6
0x6=STATE_TRANS_BIT5
0x7=STATE_TRANS_BIT4
0x5=STATE_TRANS_BIT3
0x4=STATE_TRANS_BIT2
0xc=STATE_TRANS_BIT1
0xd=STATE_TRANS_BIT0
0xf=STATE_TRANS_PUSH
0xe=STATE_TX_DEASS_CS
0xb=STATE_TRANS_W4D
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_EN</name>
          <description>
            SPI Interrupt Enable Registger. Note that ANDing this register with STATUS will effectively give you the unmasked interrupts.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_EN1</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt
for spi_int1. Reading from TXRX_2BYTE_FIFO_DATA will force the interrupt to go low
for at least one cycle, perhaps more if the RX FIFO is now empty. This is used for SPI Source Ready.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN2</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an
interrupt for spi_int2. Writing to TXRX_2BYTE_FIFO_DATA will force the interrupt to go
low for at least one cycle, perhaps more if the TX FIFO fills. This is used for SPI Destination Ready.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN1</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for
spi_int1. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty. This is used for SPI Source Ready.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN2</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt
for spi_int2. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least
one cycle, perhaps more if the TX FIFO fills. This is used for SPI Destination Ready.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY_EN0</name>
              <description>
                Enables STATUS.NE_BUSY_STICKY to set spi0_int
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY_EN0</name>
              <description>
                Enables STATUS.PE_BUSY_STICKY to set spi0_int
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE_EN0</name>
              <description>
                Enables STATUS.CMD_IS_DONE to set spi0_int
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE_EN0</name>
              <description>
                Enables STATUS.XMIT_COMPLETE to set spi0_int
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_EN0</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for
spi_int0. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN0</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an
interrupt for spi_int0. Writing to TXRX_2BYTE_FIFO_DATA will force the interrupt to go
low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN0</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for
spi_int0. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN0</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt
for spi_int0. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least
one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_2BYTE_FIFO_DATA</name>
          <description>
            SPI read and write data register.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                2 byte reads return receive data from SPI. 2 byte writes send data to transmit of SPI.
By default, data is presented in little endian so bit [7:0] will have the first byte that was
received or to be transmitted, bit [15:8] will have the second byte received or to be
transmitted. By setting CONFIG2.TX_BYTE2_END or CONFIG2.RX_BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            SPI configuration2 register.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_BYTE2_END</name>
              <description>
                Only used for 16 or 32 bit transfers. If 0, then the first byte received on MISO is in position
data[7:0], the second is data[15:8]. Similarly, if 0, then 4 byte read will have the first byte
received in position data[7:0], the next byte in [15:8], etc. If 1, vice versa and first byte is in
position [15:8] for 2 byte read and [31:24] in 4 byte read. This affects only RX side
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_BYTE2_END</name>
              <description>
                Only used for 16 or 32 bit transfers. If 0, data[7:0] is transmitted on MOSI before data[15:8]. If 1,
vice versa. This affects only TX side
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AGGR_CLK_GATING</name>
              <description>
                If set to 1, a more aggressive clock gating scheme is enacted that will clock the gate even if the
command is  still in flight, but the FIFOs, etc. have emptied (i.e. processor has starved FIFOs). If
0, we only gate when the command is complete.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                This bit provides an override to the clock gate enable. If 0, the clock will only run if the local state
machine is busy. If 1, the clock will always run.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>
                If 1, all FIFO / SM in SPI will be held in reset. If 0, normal operation. To do a soft reset, you must write
this to 1 and then back to 0 to remove the reset. It is recommened to perform a read operation in between
writing the reset to 1 and then 0 to ensure the logic has enough time to see the reset.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLR_STICKY</name>
              <description>
                If 1, clear sticky bits in registers. If 0, normal operation. To clear sticky bits, you must
write this to 1 and then back to 0 to remove the clear. It is recommened to perform a read
operation in between writing the reset to 1 and then 0 to ensure the logic has enough time to
see the clear.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STALL_IF_RXFULL</name>
              <description>
                If 1, the TX side will stall if RX FIFO is full. If 0, then the TX side will transmit
without being flow controlled by RX FIFO full.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_MISO_METAFLOP</name>
              <description>
                0 is the normal, recommended flow. If 1, the 2 CLKIN delay of MISO is bypassed allowing for
faster operation at the risk of metastablity if MISO changes near sample time. Normally MISO
should change with >100 ns setup / hold with respect to SPI clock, so it may be a viable risk.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_LOOPBACK</name>
              <description>
                0 is the normal flow. If 1, MISO comes directly from MOSI. Note that CSN and SPI_CLK are
still output and are effectively ignored in loopback mode.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_SAMPLE_TIME</name>
              <description>
                Used to adjust receive sample time. Can be modified to increase max speed at cost of
setup, metastability flops. Normal flow uses 2 delay FF of early signal. (i.e. delay[1].
00=delay[1], 01=delay[0],  10=early,  11=delay[2]
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DUMMY_BYTE_CNT</name>
          <description>
            spi transmit dummy byte count
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Every write to this register increments the DUMMY_BYTE_COUNT by the value written. The DUMMY bytes are pushed
onto the tail of the TX FIFO. This is useful for a SPI read command to save the processor for
sending uninteresting TX data to keep the RX flow going. The counter can hold 16 bits worth (64K-1) of dummy bytes
and each dummy byte is necessarily a transmit of 0x00. A read of
this field will indicate the current dummy byte count left that have not already been pushed into the TX FIFO.

Note that since every SPI RX entry requires one SPI TX entry, the Dummy Byte Count is generally set to the
length in bytes of the receive portion of the SPI transactions.

Note that the CS_HOLD bit can be cleared once the dummy bytes have been written and the logic will
keep the CS asserted until both the TX FIFO and then the Dummy Bytes have been exhausted. Note once
any dummy bytes are written, the user should not write to the TX FIFO again as this will cause
corruption. The max value allowed in the DUMMY_BYTE counter is 0xffff (64K-1)
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CS_CONFIG</name>
          <description>
            SPI Chip select config
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS3_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS2_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS1_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS0_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_4BYTE_FIFO_DATA</name>
          <description>
            SPI read data register. Note this register is disabled in DSP instances.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                4 byte reads return receive data from SPI. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received, etc. up to bit [31:24] having the
fourth byte received. By setting CONFIG2.RX_BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ACT</name>
          <description>
            SPI Active Interrupts. This is effectively STATUS ANDed with INT_EN
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY_ACT</name>
              <description>
                STATUS.NE_BUSY_STICKY is set and active
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY_ACT</name>
              <description>
                STATUS.PE_BUSY_STICKY is set and active
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE_ACT</name>
              <description>
                STATUS.CMD_IS_DONE is set and active
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE_ACT</name>
              <description>
                STATUS.XMIT_COMPLETE is set and active
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_ACT</name>
              <description>
                STATUS.RX_FIFO_HIT_LEVEL is set and active
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_LEVEL_SPACE is set and active
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_ACT</name>
              <description>
                STATUS.RXFIFO_HAS_DATA is set and active
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_SPACE is set and active
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SLAVE_MODE</name>
          <description>
            SPI Slave Mode configuraiton
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLED_TX_FIFO_DATA</name>
              <description>
                Has no effect unless DISABLE_TX_FIFO is set.
If DISABLE_TX_FIFO is set, this bit determines
what data is sent to the remote slave. Note we transmit 1 byte
of data at a time, so changing this will only change values on the byte
boundary.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_TX_FIFO</name>
              <description>
                If set, TX FIFO is disabled and we always transmit DISABLED_TX_FIFO_DATA data.
Internally the TX FIFO contents are not modified, but the slave thinks
the TX FIFO is full of bytes consisting of DISABLED_TX_FIFO_DATA.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_ALL</name>
              <description>
                If set to 1, rhe SPI is in neither master of slave mode. This mode may be
useful when transitioning between master / slave. ... but I suspect a
reset will be sufficient.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLAVE_EN</name>
              <description>
                If set to 1, the logic acts like a slave mode. If 0, it will act like a
master if DISABLE_ALL is also 0. In slave mode, busy is determined by
the incomming chip select going active.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SPI1</name>
      <version>1.0</version>
      <description>
        SPI System Control Block Registers.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50020100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>SPI1</name>
        <value>7</value>
        <description>SPI1 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CONFIG</name>
          <description>
            SPI configuration register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPIRDY_ACT_LOW</name>
              <description>
                If 1, SPI Ready (from SPI_RDY or MISO) will be treated as active low (e.g. if 0, then we are
ready and no flow control active). If 0 it is active high.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIS_RX_FIFO</name>
              <description>
                If 1, RX FIFO is disabled and will not receive any further data.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_LEVEL_TRIG</name>
              <description>
                Program to the level that you want RX_FIFO_HIT_LEVEL to be set. If this reg is
2, then RX_FIFO_HIT_LEVEL will be set if the number of entries in RX_FIFO are
2 or greater.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_SLVRDY</name>
              <description>
                If 1, SPI_RDY going low can stall the SPI transfers until it goes back high.
Takes effect at byte boundaries. Note SLVRDY_IS_MISO can change if SPI_RDY or
SPI_MISO is used as flow control.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_OVFLW_DROPHEAD</name>
              <description>
                If 0, if the RX FIFO has an overflow, the first entries it received will be
preserved. If 1, the most recent entries will be preserved. Note if 1, the
RX_FIFO Overflow sticky bit will never bet set
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLVRDY_IS_MISO</name>
              <description>
                This bit has no effect if EN_SLVRDY is 0. If SLVRDY_IS_MISO is 0, then the RDY signal
comes from SPI_RDY. If SLVRDY_IS_MISO is 1, RDY comes from MISO. Note MISO data is
not very helpful in this mode, but is not automatically disabled. Use RXDROP_CNT or
CONFIG.DIS_RX_FIFO to drop RX data if needed.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>END</name>
              <description>
                If 0, transmit msbit first. If 1 send lsbit first.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CPHA</name>
              <description>
                If CPHA=1 and CPOL=0, drive on PE and sample on NE. If CPHA=0 and CPOL=0, drive on
NE and sample on PE. Swapping CPOL=1 will swap the PE and NE above.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CPOL</name>
              <description>
                CPOL indicates idle clock steady state. CPOL=0 and SPICLK will default to low.
CPOL=1 and SPICLK will default to high.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RD_PUSHES_TX_FIFO</name>
              <description>
                If set to 1, the TX FIFO will empty as normal, but for every read pop that
occurs, a new TX will be pushed into the FIFO. This can be useful for
a sequence of indeterminate length to save the processor from pushing data into the
TX FIFO or using dummy bytes.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_1BYTE_FIFO_DATA</name>
          <description>
            SPI read and write data register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads return receive data from SPI. Writes send data to transmit of SPI.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLKDIV</name>
          <description>
            SPI clock divider register.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ICG</name>
              <description>
                The delay bewteen each command will be ((ICG*2)+1) * PeriphClk period (125ns).
              </description>
              <bitRange>[11:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IBG</name>
              <description>
                The delay bewteen each byte will be (IBG+1) * PeriphClk period (125ns).
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLKDIV</name>
              <description>
                Controls SPI clock rate. SPI_CLK freq is PeriphClk (125ns) / (CLKDIV+1). Min
legal value is 1. However, for value of 1 or 2, additional settings are
required. Specifically:
Value 1 (4MHz) requires CONFIG2.RX_SAMPLE_TIME = 2 and CONFIG2.DISABLE_MISO_METAFLOP = 1 to operate.
Value 2 (2.6MHz) requires CONFIG2.RX_SAMPLE_TIME = 1 to operate.
Value 3 and above operate normally without additional settings.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>
            SPI status register. Note that ANDing this register with INT_EN will effectively give you the unmasked interrupts.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_DUP</name>
              <description>
                This is a duplicate of STATUS.RX_FIFO_HIT_LEVEL presented here for interrupt simplicity.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD14</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA_DUP</name>
              <description>
                This is a duplicate of STATUS.RXFIFO_HAS_1DATA presented here for interrupt simplicity.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD12</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY</name>
              <description>
                This goes high when busy goes from high to low. This bit will be set until
it is cleared by a W1C to this location or soft reset or CONFIG2.CLR_STICKY
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY</name>
              <description>
                This goes high when busy goes from low to high. This bit will be set until
it is cleared by a W1C to this location or soft reset or CONFIG2.CLR_STICKY
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE</name>
              <description>
                This is exactly the inverse of STATUS.START_BUSY and when it goes high, the
command is done and a new transaction can start. It is presented here for
regularity in the interrupts.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE</name>
              <description>
                If 1, all current transmits in TX_FIFO (including DUMMY_BYTES)
are complete and on the wire. Note that just because the
transmits are complete, the SPI transaction is not yet
completed until the CS deasserts. Look at
STATUS.START_BUSY or STATUS.CMD_IS_DONE to determine if the command is done.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL</name>
              <description>
                If 1, then there is at least CONFIG.FIFO_LEVEL_TRIG Byte(s) of data
waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA or TXRX_2BYTE_FIFO_DATA or
RX_4BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE</name>
              <description>
                If 1, then there is at least CONFIG.FIFO_LEVEL_TRIG Byte(s) of space available on
TX_FIFO. If 0, there isn't that much space. Write TXRX_1BYTE_FIFO_DATA or
TXRX_2BYTE_FIFO_DATA to push more data.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA</name>
              <description>
                If 1, then there is at least 1 byte of data waiting in RX FIFO.
Read TXRX_1BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_1SPACE</name>
              <description>
                If 1, then there is at least 1 byte of space to put onto the TX FIFO queue by writing to
TXRX_1BYTE_FIFO_DATA. If 0, there isn't. Note, actual space available can be derived
by reading TX_FIFO_DEBUG.ENTRIES and subtracting that from MAX entries (16).
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS_SEL</name>
              <description>
                Select which of the 4 chip selects to be used. 0=CS0, 1=CS1, 2=CS2 and 3=CS3.
Note this bit is latched when start is written and is ignored until the next start.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_CS</name>
              <description>
                If 1, CS stays active until this bit is cleared. If written to 0 the CS will go inactive
after all data in TX FIFO (and DUMMY_BYTES) has been transmitted. Note this bit
can be changed in mid transaction without issue.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>START_BUSY</name>
              <description>
                Write to 1 to start transaction. Read back to determine if the SM is
START_BUSY (1) or if has gone back to idle (0). Note that this will only
go to idle (0) when the entier command is finished (CS deasserted) which is
not the same as the TX FIFO being empty.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO_DEBUG</name>
          <description>
            SPI TX FIFO debug register
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. Newest entries are dropped. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Current number of entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO_DEBUG</name>
          <description>
            SPI RX FIFO debug register
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when RX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when RX FIFO overflows. See CONFIG.RX_OVFLW_KEEPHEAD for additional details on drop
behavior.  Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_RDY</name>
              <description>
                Live value of SPI_RDY
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Current number of entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RXDROP_CNT</name>
          <description>
            RX Drop Byte Count
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Indicates how many RX bytes to silently drop before triggering an interrupt or rxfifo_has_data. Note, this should be written before the command begins to avoid cornercase issues.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>GENERAL_DEBUG</name>
          <description>
            SPI General Debug Fields
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_BIT_BANG</name>
              <description>
                If set, the BB_SPI_MOSI, BB_SPI_CS_N and BB_SPI_CLK control the SPI interface.
The internal SM has no effect and can be placed in SOFT_RESET. However, the
CONFIG2.CLK_ON bit should be set, or else the clock may gate off due to apparent
quiescence.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_MOSI</name>
              <description>
                Value to drive on of SPI_MOSI
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_CS_N</name>
              <description>
                Value to drive on SPI_CS_N. Note the CS will be asserted on the CS specified in STATUS.CS_SEL
which is only selected when STATUS.START_BUSY is written. So to use this feature,
set START_BUSY and then operate the bit bang mode. After wards, you should finish the
command by writing at least one byte to TX_FIFO and making sure STATUS.HOLD_CS is low.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SPI_CLK</name>
              <description>
                Value to drive on SPI_CLK
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_MISO</name>
              <description>
                Current value of SPI_MISO input
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_MOSI</name>
              <description>
                Current value of expected SPI_MOSI output
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_CS_N</name>
              <description>
                Current value of expected expected SPI_CS_N output
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI_CLK</name>
              <description>
                Current value of expected SPI_CLK output
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE_REG</name>
              <description>
                Current state of primary State Machine. States are listed in normal order of execution.
0x0=STATE_IDLE
0x1=STATE_TX_ASSERT_CS
0x3=STATE_TRANS_BIT7
0x2=STATE_TRANS_BIT6
0x6=STATE_TRANS_BIT5
0x7=STATE_TRANS_BIT4
0x5=STATE_TRANS_BIT3
0x4=STATE_TRANS_BIT2
0xc=STATE_TRANS_BIT1
0xd=STATE_TRANS_BIT0
0xf=STATE_TRANS_PUSH
0xe=STATE_TX_DEASS_CS
0xb=STATE_TRANS_W4D
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_EN</name>
          <description>
            SPI Interrupt Enable Registger. Note that ANDing this register with STATUS will effectively give you the unmasked interrupts.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_EN1</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt
for spi_int1. Reading from TXRX_2BYTE_FIFO_DATA will force the interrupt to go low
for at least one cycle, perhaps more if the RX FIFO is now empty. This is used for SPI Source Ready.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN2</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an
interrupt for spi_int2. Writing to TXRX_2BYTE_FIFO_DATA will force the interrupt to go
low for at least one cycle, perhaps more if the TX FIFO fills. This is used for SPI Destination Ready.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN1</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for
spi_int1. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty. This is used for SPI Source Ready.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN2</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt
for spi_int2. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least
one cycle, perhaps more if the TX FIFO fills. This is used for SPI Destination Ready.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY_EN0</name>
              <description>
                Enables STATUS.NE_BUSY_STICKY to set spi0_int
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY_EN0</name>
              <description>
                Enables STATUS.PE_BUSY_STICKY to set spi0_int
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE_EN0</name>
              <description>
                Enables STATUS.CMD_IS_DONE to set spi0_int
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE_EN0</name>
              <description>
                Enables STATUS.XMIT_COMPLETE to set spi0_int
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_EN0</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for
spi_int0. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN0</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an
interrupt for spi_int0. Writing to TXRX_2BYTE_FIFO_DATA will force the interrupt to go
low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN0</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for
spi_int0. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at
least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN0</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt
for spi_int0. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least
one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_2BYTE_FIFO_DATA</name>
          <description>
            SPI read and write data register.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                2 byte reads return receive data from SPI. 2 byte writes send data to transmit of SPI.
By default, data is presented in little endian so bit [7:0] will have the first byte that was
received or to be transmitted, bit [15:8] will have the second byte received or to be
transmitted. By setting CONFIG2.TX_BYTE2_END or CONFIG2.RX_BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            SPI configuration2 register.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_BYTE2_END</name>
              <description>
                Only used for 16 or 32 bit transfers. If 0, then the first byte received on MISO is in position
data[7:0], the second is data[15:8]. Similarly, if 0, then 4 byte read will have the first byte
received in position data[7:0], the next byte in [15:8], etc. If 1, vice versa and first byte is in
position [15:8] for 2 byte read and [31:24] in 4 byte read. This affects only RX side
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_BYTE2_END</name>
              <description>
                Only used for 16 or 32 bit transfers. If 0, data[7:0] is transmitted on MOSI before data[15:8]. If 1,
vice versa. This affects only TX side
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AGGR_CLK_GATING</name>
              <description>
                If set to 1, a more aggressive clock gating scheme is enacted that will clock the gate even if the
command is  still in flight, but the FIFOs, etc. have emptied (i.e. processor has starved FIFOs). If
0, we only gate when the command is complete.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                This bit provides an override to the clock gate enable. If 0, the clock will only run if the local state
machine is busy. If 1, the clock will always run.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>
                If 1, all FIFO / SM in SPI will be held in reset. If 0, normal operation. To do a soft reset, you must write
this to 1 and then back to 0 to remove the reset. It is recommened to perform a read operation in between
writing the reset to 1 and then 0 to ensure the logic has enough time to see the reset.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLR_STICKY</name>
              <description>
                If 1, clear sticky bits in registers. If 0, normal operation. To clear sticky bits, you must
write this to 1 and then back to 0 to remove the clear. It is recommened to perform a read
operation in between writing the reset to 1 and then 0 to ensure the logic has enough time to
see the clear.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STALL_IF_RXFULL</name>
              <description>
                If 1, the TX side will stall if RX FIFO is full. If 0, then the TX side will transmit
without being flow controlled by RX FIFO full.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_MISO_METAFLOP</name>
              <description>
                0 is the normal, recommended flow. If 1, the 2 CLKIN delay of MISO is bypassed allowing for
faster operation at the risk of metastablity if MISO changes near sample time. Normally MISO
should change with >100 ns setup / hold with respect to SPI clock, so it may be a viable risk.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_LOOPBACK</name>
              <description>
                0 is the normal flow. If 1, MISO comes directly from MOSI. Note that CSN and SPI_CLK are
still output and are effectively ignored in loopback mode.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_SAMPLE_TIME</name>
              <description>
                Used to adjust receive sample time. Can be modified to increase max speed at cost of
setup, metastability flops. Normal flow uses 2 delay FF of early signal. (i.e. delay[1].
00=delay[1], 01=delay[0],  10=early,  11=delay[2]
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_DUMMY_BYTE_CNT</name>
          <description>
            spi transmit dummy byte count
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                Every write to this register increments the DUMMY_BYTE_COUNT by the value written. The DUMMY bytes are pushed
onto the tail of the TX FIFO. This is useful for a SPI read command to save the processor for
sending uninteresting TX data to keep the RX flow going. The counter can hold 16 bits worth (64K-1) of dummy bytes
and each dummy byte is necessarily a transmit of 0x00. A read of
this field will indicate the current dummy byte count left that have not already been pushed into the TX FIFO.

Note that since every SPI RX entry requires one SPI TX entry, the Dummy Byte Count is generally set to the
length in bytes of the receive portion of the SPI transactions.

Note that the CS_HOLD bit can be cleared once the dummy bytes have been written and the logic will
keep the CS asserted until both the TX FIFO and then the Dummy Bytes have been exhausted. Note once
any dummy bytes are written, the user should not write to the TX FIFO again as this will cause
corruption. The max value allowed in the DUMMY_BYTE counter is 0xffff (64K-1)
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CS_CONFIG</name>
          <description>
            SPI Chip select config
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS3_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS2_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS1_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CS0_POL</name>
              <description>
                If 0, the CS is active low and will default to 1 until the device is selected and then drive to a 0. If 1, it is reversed (active high)
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_4BYTE_FIFO_DATA</name>
          <description>
            SPI read data register. Note this register is disabled in DSP instances.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                4 byte reads return receive data from SPI. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received, etc. up to bit [31:24] having the
fourth byte received. By setting CONFIG2.RX_BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ACT</name>
          <description>
            SPI Active Interrupts. This is effectively STATUS ANDed with INT_EN
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_BUSY_STICKY_ACT</name>
              <description>
                STATUS.NE_BUSY_STICKY is set and active
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_BUSY_STICKY_ACT</name>
              <description>
                STATUS.PE_BUSY_STICKY is set and active
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_IS_DONE_ACT</name>
              <description>
                STATUS.CMD_IS_DONE is set and active
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE_ACT</name>
              <description>
                STATUS.XMIT_COMPLETE is set and active
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL_ACT</name>
              <description>
                STATUS.RX_FIFO_HIT_LEVEL is set and active
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_LEVEL_SPACE is set and active
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_ACT</name>
              <description>
                STATUS.RXFIFO_HAS_DATA is set and active
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_SPACE is set and active
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SLAVE_MODE</name>
          <description>
            SPI Slave Mode configuraiton
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLED_TX_FIFO_DATA</name>
              <description>
                Has no effect unless DISABLE_TX_FIFO is set.
If DISABLE_TX_FIFO is set, this bit determines
what data is sent to the remote slave. Note we transmit 1 byte
of data at a time, so changing this will only change values on the byte
boundary.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_TX_FIFO</name>
              <description>
                If set, TX FIFO is disabled and we always transmit DISABLED_TX_FIFO_DATA data.
Internally the TX FIFO contents are not modified, but the slave thinks
the TX FIFO is full of bytes consisting of DISABLED_TX_FIFO_DATA.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_ALL</name>
              <description>
                If set to 1, rhe SPI is in neither master of slave mode. This mode may be
useful when transitioning between master / slave. ... but I suspect a
reset will be sufficient.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLAVE_EN</name>
              <description>
                If set to 1, the logic acts like a slave mode. If 0, it will act like a
master if DISABLE_ALL is also 0. In slave mode, busy is determined by
the incomming chip select going active.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>UART0</name>
      <version>1.0</version>
      <description>
        The UART Device provides a UART serial port communication peripheral for the chip. It also provides for on-chip loop back with a second uart on the same chip.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50020200</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x80</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UART0</name>
        <value>4</value>
        <description>UART0 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CFG_STATUS</name>
          <description>
            Configuration and status bits for the UART.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_ONE_STOP</name>
              <description>
                Set to send only one STOP bit, sends two STOP bits by default, if this bit is not set.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Sends one STOP bit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CLEAR</name>
                  <description>
                    Sends two STOP bits.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_FULL</name>
              <description>
                This bit field returns a 1 if the FIFO count is at 16. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_PARITY_TYPE</name>
              <description>
                Set to one to cause the transmitter to generate even parity, if parity is enabled in the CFG_A register.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EVEN</name>
                  <description>
                    Generate Even Parity.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ODD</name>
                  <description>
                    Generate Odd Parity.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_SHIFT_DIR</name>
              <description>
                Writing one to  this bit causes the UART to assume MSB first shifting. NOTE: this bit only controls the shift direction for the transmitter side. See the BAUDRATE_HIGH register for a bit that controls the receiver side of the UART.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSB</name>
                  <description>
                    Most significant bit first.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LSB</name>
                  <description>
                    Least significant bit first.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_POLARITY</name>
              <description>
                This bit defines mark space polarity for the TX pin.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Start equals one stop equals zero and data bit inverted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Start equals zero, stop equals one.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BREAK</name>
              <description>
                Writing one to  this bit causes the TX pun to pulled to the break state. This is always the opposite state from the signals idle state.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables the transmitter section to use hardware flow control.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables the transmitter section from using hardware flow control.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS_POLARITY</name>
              <description>
                This bit defines polarity of the CTS pin. Normal polarity for this UART is defined such that a
zero/low on the CTS pin means I am clear to send.  It appears that it is more common in the industry
for the opposite polarity to be used. Thus the default is set to zero.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Clear to send is zero, stop sending is one.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Clear to send is one, stop sending is zero.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS_PIN</name>
              <description>
                This read only bit can be used to determine the state of the CTS input pin.  NOTE: The pin value comes on to the chip and goes directly to this status bit without passing through the polarity setting logic.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS</name>
              <description>
                Writing one to  this bit enables the use of the CTS input pin to throttle the transmitter section for hardware flow control purposes.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables the transmitter section to use hardware flow control.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables the transmitter section from using hardware flow control.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_EN</name>
              <description>
                Writing one to  this bit enables the transmitter functions. Writing a zero has most of the effects of resetting just the transmitter section.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enables the transmitter section to run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Turns off the transmitter section.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_EMPTY</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is at 0. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_SHIFT_DIR</name>
              <description>
                Writing one to  this bit causes the UART to assume MSB first shifting. NOTE: this bit only controls the shift direction for the receiver side. See CFG_B for the transmitter shift direction control.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSB</name>
                  <description>
                    Shifts data into the receiver MSB first.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LSB</name>
                  <description>
                    Shifts data into the receiver LSB first.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_AUTO</name>
              <description>
                Use automatic hardware algorithm to control the RTS pin state. This is based on RX FIFO high water mark. This is based on RX FIFO high water mark comparator.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables automatic RTS flow control in hardware.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disables automatic RTS flow control in hardware. Use the RTS_STATE value instead.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_POLARITY</name>
              <description>
                This bit defines polarity of the RTS pin. Normal polarity for this UART is defined such that a
zero/low on the RTS pin means you are clear to send.  It appears that it is more common in the
industry for the opposite polarity to be used. Thus the default is set to zero.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Request to send is zero, stop sending is one.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Request to send is one, stop sending is zero.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_POLARITY</name>
              <description>
                This bit defines mark space polarity for the RX pin.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Start equals one stop equals zero and data bit inverted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Start equals zero, stop equals one.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_PARITY_TYPE</name>
              <description>
                Writing one to  this bit causes the UART receiver to compute EVEN parity for received frames. NOTE: this bit only controls the parity type for the receiver side. See the BAUDRATE_HIGH register for a bit that controls the transmitter side of the UART.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EVEN</name>
                  <description>
                    Check for even parity on received frames and check for even parity on received frames.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ODD</name>
                  <description>
                    Check for odd parity on received frames and check for odd parity on received frames.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TX_PARITY</name>
              <description>
                Writing one to  this bit causes the UART to insert a parity bit into transmitted frames and to check for parity on received frames.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables parity generation and checking.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disables parity generation and checking.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_STATE</name>
              <description>
                The value in this bit field defines the state of the RTS when it is not automatically controlled by the high water mark in the RX FIFO.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Asserts the RTS signal telling the other end it is free to transmit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Deasserts the RTS signal telling the other end to stop transmitting.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_CONTROL</name>
              <description>
                Writing one to  this bit causes the UART to force the RTS pin to the HALT state. This signals the remote transmitter to stop sending bytes on its TX line. Firmware can use this pin to effect longer HALT times, independent of the normal RTS control mechanism.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FORCE</name>
                  <description>
                    Force the RTS pin to the HALT state.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREE</name>
                  <description>
                    Release the RTS pin to follow either the definition in the RTS_STATE bit or the state defined by the RTS_AUTO pin and the RX FIFO.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_EN</name>
              <description>
                Writing one to  this bit enables the receiver functions. Writing a zero has most of the effects of resetting just the receiver section.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enables the receiver section to run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Turns off the receiver section.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO</name>
          <description>
            Reciever FIFO register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMEOUT</name>
              <description>
                This bit field returns a 1 if the RX FIFO Time Out expired.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HWM</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is above the high water mark.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EMPTY</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is at 0. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FRAME_ERROR</name>
              <description>
                This is not an interrupt status bit. It is an extension of the RX_FIFO_DATA register and obeys the same valid semantics as that register.  When a data byte is valid in the RX_FIFO_DATA register then this bit reflects its framing error status. If it is zero then no error is being reported for the data byte in the RX_FIFO_DATA register. If it is a one than an error occurred when that byte was received from the UART_RX pin.  Popping the RX FIFO by writing anything to he RX_FIFO_DATA register also advances this bit to correspond to the new value in the RX_FIFO_DATA register.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates a framing error has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no framing error has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_PARITY_ERROR</name>
              <description>
                This is not an interrupt status bit. It is an extension of the RX_FIFO_DATA register and obeys the same valid semantics as that register.  When a data byte is valid in the RX_FIFO_DATA register then this bit reflects its parity error status. If it is zero then no error is being reported for the data byte in the RX_FIFO_DATA register. If it is a one than an error occurred when that byte was received from the UART_RX pin.  Popping the RX FIFO by writing anything to he RX_FIFO_DATA register also advances this bit to correspond to the new value in the RX_FIFO_DATA register.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates a parity error has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no parity error has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DEPTH</name>
              <description>
                Reads back the current RX FIFO depth.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads back the current RX FIFO data at the top of the FIFO.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO</name>
          <description>
            Transmitter FIFO register.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_LWM</name>
              <description>
                This bit field returns a 1 if the FIFO count is below its low water mark.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_EMPTY</name>
              <description>
                This bit field returns a 1 if the FIFO count is at 0.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_BUSY</name>
              <description>
                This bit field returns a 1 if the TX FSM is not in its idle state.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                This bit field returns the number of entries currently in the TX FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                This bit field returns the value of the most recently pushed TX data item.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PHASE</name>
          <description>
            Any bit with a value of one in this byte will increase the baudrate divider by one count when it is reloaded.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SHIFT_TX</name>
              <description>
                Starting with data bit 0 and proceeding through the first stop bit, each corresponding bit in this bit will increment the reload count by 1 when the count is reloaded.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SHIFT_RX</name>
              <description>
                Starting with data bit 0 and proceeding through the first stop bit, each corresponding bit in this bit will increment the reload count by 1 when the count is reloaded.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT</name>
          <description>
            Interrupt status register.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                This interrupt is reported when the receiver has detected at least one parity error or at least one frame error.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                This interrupt is reported when the TX FIFO is empty and the TX SERIALIZER is no longer busy. This indicates that the last stop bit of the last byte has left the chip.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                This interrupt is occurs when the TX FIFO count falls below its low water mark.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                This interrupt is reported when the RX DESERIALIZER detects that a break condition is no longer being signaled on the UART_RX pad.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                RX FIFO time out detected. This occurs when the FIFO is not empty for 8 character times. When the FIFO goes non-empty, a timer is started. Everytime a character goes into the FIFO from the UART receiver, the timer is restarted.  If it reaches N character times with the FIFO non-empty then this interrupt bit is set.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                RX FIFO is at or above high water marker. Requesting an interrupt for immediate serviceing of the FIFO.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT_CLEAR</name>
          <description>
            Clear corresponding interrupt status register bits.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE_SET</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE_CLEAR</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BAUDRATE</name>
          <description>
            The initial baud rate divisor will be the value set here plus 1.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIVISOR</name>
              <description>
                8MHz input clock is divided by DIVISOR+1.
              </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            This register holds a clock enable insurance policy bit.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                Set this bit to one to force the UART clock enable to always remain asserted.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG</name>
          <description>
            Debug control register.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>UART_RX</name>
              <description>
                This read only bit field provides visibility to the UART RX pin state.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_BREAK_DETECT</name>
              <description>
                This read only bit field provides visibility to the UART RX break detector state.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[29:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TWIN_LOOPBACK</name>
              <description>
                Writing one to  this bit causes the UART to cross connect its twins signals in a NULL modem configuration with hardware flow controll looped back as well.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables loopback.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables loopback.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SELF_LOOPBACK</name>
              <description>
                Writing one to  this bit causes the UART to cross connect its own signals in a NULL modem configuration with hardware flow controll looped back as well. Setting with TWIN_LOOPBACK produces unpredictable results.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables loopback.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables loopback.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_C</name>
              <description>
                This bit field selects one of 4 values to present on debug pin C. This pin is presented on GPIO[0] for uart0 and GPIO[3] for uart1.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_DATA</name>
                  <description>
                    Marks the synchronized internal state of UART_RX pin on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_STEP</name>
                  <description>
                    Shows the TX step clock on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_LWM</name>
                  <description>
                    Shows the state of the TX FiFO low water mark status on a GPIO pin.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_EMPTY</name>
                  <description>
                    Shows the state of the RX FIFO empty status on a GPIO pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_B</name>
              <description>
                This bit field selects one of 4 values to present on debug pin B. This pin is presented on GPIO[1] for uart0 and GPIO[4] for uart1.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_STEP</name>
                  <description>
                    Marks the RX step state on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_STOP</name>
                  <description>
                    Marks the TX stop bit on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_FULL</name>
                  <description>
                    Shows the state of the TX FiFO full status.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_HWM</name>
                  <description>
                    Shows the state of the RX FIFO high water mark.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_A</name>
              <description>
                This bit field selects one of 4 values to present on debug pin A. This pin is presented on GPIO[2] for uart0 and GPIO[5] for uart1.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_START</name>
                  <description>
                    Marks the RX start bit on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_START</name>
                  <description>
                    Marks the TX start bit on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_EMPTY</name>
                  <description>
                    Shows the state of the TX FiFO empty status.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_TIMEOUT</name>
                  <description>
                    Indicates when the RX TIME OUT counter is running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_READ_ONLY</name>
          <description>
            Debug read only register.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                A readable test value for testing the bus to the UART.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>UART1</name>
      <version>1.0</version>
      <description>
        The UART Device provides a UART serial port communication peripheral for the chip. It also provides for on-chip loop back with a second uart on the same chip.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50020300</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x80</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>UART1</name>
        <value>5</value>
        <description>UART1 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CFG_STATUS</name>
          <description>
            Configuration and status bits for the UART.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_ONE_STOP</name>
              <description>
                Set to send only one STOP bit, sends two STOP bits by default, if this bit is not set.
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SET</name>
                  <description>
                    Sends one STOP bit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CLEAR</name>
                  <description>
                    Sends two STOP bits.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_FULL</name>
              <description>
                This bit field returns a 1 if the FIFO count is at 16. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_PARITY_TYPE</name>
              <description>
                Set to one to cause the transmitter to generate even parity, if parity is enabled in the CFG_A register.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EVEN</name>
                  <description>
                    Generate Even Parity.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ODD</name>
                  <description>
                    Generate Odd Parity.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_SHIFT_DIR</name>
              <description>
                Writing one to  this bit causes the UART to assume MSB first shifting. NOTE: this bit only controls the shift direction for the transmitter side. See the BAUDRATE_HIGH register for a bit that controls the receiver side of the UART.
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSB</name>
                  <description>
                    Most significant bit first.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LSB</name>
                  <description>
                    Least significant bit first.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_POLARITY</name>
              <description>
                This bit defines mark space polarity for the TX pin.
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Start equals one stop equals zero and data bit inverted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Start equals zero, stop equals one.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BREAK</name>
              <description>
                Writing one to  this bit causes the TX pun to pulled to the break state. This is always the opposite state from the signals idle state.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables the transmitter section to use hardware flow control.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables the transmitter section from using hardware flow control.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS_POLARITY</name>
              <description>
                This bit defines polarity of the CTS pin. Normal polarity for this UART is defined such that a
zero/low on the CTS pin means I am clear to send.  It appears that it is more common in the industry
for the opposite polarity to be used. Thus the default is set to zero.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Clear to send is zero, stop sending is one.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Clear to send is one, stop sending is zero.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS_PIN</name>
              <description>
                This read only bit can be used to determine the state of the CTS input pin.  NOTE: The pin value comes on to the chip and goes directly to this status bit without passing through the polarity setting logic.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CTS</name>
              <description>
                Writing one to  this bit enables the use of the CTS input pin to throttle the transmitter section for hardware flow control purposes.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables the transmitter section to use hardware flow control.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables the transmitter section from using hardware flow control.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_EN</name>
              <description>
                Writing one to  this bit enables the transmitter functions. Writing a zero has most of the effects of resetting just the transmitter section.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enables the transmitter section to run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Turns off the transmitter section.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_EMPTY</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is at 0. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_SHIFT_DIR</name>
              <description>
                Writing one to  this bit causes the UART to assume MSB first shifting. NOTE: this bit only controls the shift direction for the receiver side. See CFG_B for the transmitter shift direction control.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MSB</name>
                  <description>
                    Shifts data into the receiver MSB first.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LSB</name>
                  <description>
                    Shifts data into the receiver LSB first.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_AUTO</name>
              <description>
                Use automatic hardware algorithm to control the RTS pin state. This is based on RX FIFO high water mark. This is based on RX FIFO high water mark comparator.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables automatic RTS flow control in hardware.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disables automatic RTS flow control in hardware. Use the RTS_STATE value instead.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_POLARITY</name>
              <description>
                This bit defines polarity of the RTS pin. Normal polarity for this UART is defined such that a
zero/low on the RTS pin means you are clear to send.  It appears that it is more common in the
industry for the opposite polarity to be used. Thus the default is set to zero.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Request to send is zero, stop sending is one.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Request to send is one, stop sending is zero.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_POLARITY</name>
              <description>
                This bit defines mark space polarity for the RX pin.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>INVERTED</name>
                  <description>
                    Start equals one stop equals zero and data bit inverted.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Start equals zero, stop equals one.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_PARITY_TYPE</name>
              <description>
                Writing one to  this bit causes the UART receiver to compute EVEN parity for received frames. NOTE: this bit only controls the parity type for the receiver side. See the BAUDRATE_HIGH register for a bit that controls the transmitter side of the UART.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EVEN</name>
                  <description>
                    Check for even parity on received frames and check for even parity on received frames.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ODD</name>
                  <description>
                    Check for odd parity on received frames and check for odd parity on received frames.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TX_PARITY</name>
              <description>
                Writing one to  this bit causes the UART to insert a parity bit into transmitted frames and to check for parity on received frames.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables parity generation and checking.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disables parity generation and checking.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_STATE</name>
              <description>
                The value in this bit field defines the state of the RTS when it is not automatically controlled by the high water mark in the RX FIFO.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Asserts the RTS signal telling the other end it is free to transmit.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Deasserts the RTS signal telling the other end to stop transmitting.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RTS_CONTROL</name>
              <description>
                Writing one to  this bit causes the UART to force the RTS pin to the HALT state. This signals the remote transmitter to stop sending bytes on its TX line. Firmware can use this pin to effect longer HALT times, independent of the normal RTS control mechanism.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FORCE</name>
                  <description>
                    Force the RTS pin to the HALT state.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FREE</name>
                  <description>
                    Release the RTS pin to follow either the definition in the RTS_STATE bit or the state defined by the RTS_AUTO pin and the RX FIFO.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_EN</name>
              <description>
                Writing one to  this bit enables the receiver functions. Writing a zero has most of the effects of resetting just the receiver section.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enables the receiver section to run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Turns off the receiver section.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO</name>
          <description>
            Reciever FIFO register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMEOUT</name>
              <description>
                This bit field returns a 1 if the RX FIFO Time Out expired.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HWM</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is above the high water mark.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EMPTY</name>
              <description>
                This bit field returns a 1 if the RX FIFO count is at 0. This bit is also visible in the GPIO external status register.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FRAME_ERROR</name>
              <description>
                This is not an interrupt status bit. It is an extension of the RX_FIFO_DATA register and obeys the same valid semantics as that register.  When a data byte is valid in the RX_FIFO_DATA register then this bit reflects its framing error status. If it is zero then no error is being reported for the data byte in the RX_FIFO_DATA register. If it is a one than an error occurred when that byte was received from the UART_RX pin.  Popping the RX FIFO by writing anything to he RX_FIFO_DATA register also advances this bit to correspond to the new value in the RX_FIFO_DATA register.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates a framing error has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no framing error has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_PARITY_ERROR</name>
              <description>
                This is not an interrupt status bit. It is an extension of the RX_FIFO_DATA register and obeys the same valid semantics as that register.  When a data byte is valid in the RX_FIFO_DATA register then this bit reflects its parity error status. If it is zero then no error is being reported for the data byte in the RX_FIFO_DATA register. If it is a one than an error occurred when that byte was received from the UART_RX pin.  Popping the RX FIFO by writing anything to he RX_FIFO_DATA register also advances this bit to correspond to the new value in the RX_FIFO_DATA register.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates a parity error has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no parity error has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DEPTH</name>
              <description>
                Reads back the current RX FIFO depth.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads back the current RX FIFO data at the top of the FIFO.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO</name>
          <description>
            Transmitter FIFO register.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_LWM</name>
              <description>
                This bit field returns a 1 if the FIFO count is below its low water mark.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FIFO_EMPTY</name>
              <description>
                This bit field returns a 1 if the FIFO count is at 0.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_BUSY</name>
              <description>
                This bit field returns a 1 if the TX FSM is not in its idle state.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                This bit field returns the number of entries currently in the TX FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                This bit field returns the value of the most recently pushed TX data item.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PHASE</name>
          <description>
            Any bit with a value of one in this byte will increase the baudrate divider by one count when it is reloaded.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SHIFT_TX</name>
              <description>
                Starting with data bit 0 and proceeding through the first stop bit, each corresponding bit in this bit will increment the reload count by 1 when the count is reloaded.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SHIFT_RX</name>
              <description>
                Starting with data bit 0 and proceeding through the first stop bit, each corresponding bit in this bit will increment the reload count by 1 when the count is reloaded.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT</name>
          <description>
            Interrupt status register.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                This interrupt is reported when the receiver has detected at least one parity error or at least one frame error.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                This interrupt is reported when the TX FIFO is empty and the TX SERIALIZER is no longer busy. This indicates that the last stop bit of the last byte has left the chip.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                This interrupt is occurs when the TX FIFO count falls below its low water mark.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                This interrupt is reported when the RX DESERIALIZER detects that a break condition is no longer being signaled on the UART_RX pad.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                RX FIFO time out detected. This occurs when the FIFO is not empty for 8 character times. When the FIFO goes non-empty, a timer is started. Everytime a character goes into the FIFO from the UART receiver, the timer is restarted.  If it reaches N character times with the FIFO non-empty then this interrupt bit is set.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                RX FIFO is at or above high water marker. Requesting an interrupt for immediate serviceing of the FIFO.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>PRESENT</name>
                  <description>
                    Indicates an interrupt has been detected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABSENT</name>
                  <description>
                    Indicates that no interrupt has been detected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT_CLEAR</name>
          <description>
            Clear corresponding interrupt status register bits.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to clear this interrupt status bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Enable this interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable this interrupt.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable this interrupt.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE_SET</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to set this interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLE_CLEAR</name>
          <description>
            Interrupt enable register.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_ERROR</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_IDLE</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_FIFO_LWM</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EOB</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_TO</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HWM</name>
              <description>
                Write a one to clear this interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BAUDRATE</name>
          <description>
            The initial baud rate divisor will be the value set here plus 1.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIVISOR</name>
              <description>
                8MHz input clock is divided by DIVISOR+1.
              </description>
              <bitRange>[10:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            This register holds a clock enable insurance policy bit.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                Set this bit to one to force the UART clock enable to always remain asserted.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG</name>
          <description>
            Debug control register.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>UART_RX</name>
              <description>
                This read only bit field provides visibility to the UART RX pin state.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_BREAK_DETECT</name>
              <description>
                This read only bit field provides visibility to the UART RX break detector state.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[29:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TWIN_LOOPBACK</name>
              <description>
                Writing one to  this bit causes the UART to cross connect its twins signals in a NULL modem configuration with hardware flow controll looped back as well.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables loopback.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables loopback.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SELF_LOOPBACK</name>
              <description>
                Writing one to  this bit causes the UART to cross connect its own signals in a NULL modem configuration with hardware flow controll looped back as well. Setting with TWIN_LOOPBACK produces unpredictable results.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enables loopback.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disables loopback.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_C</name>
              <description>
                This bit field selects one of 4 values to present on debug pin C. This pin is presented on GPIO[0] for uart0 and GPIO[3] for uart1.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_DATA</name>
                  <description>
                    Marks the synchronized internal state of UART_RX pin on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_STEP</name>
                  <description>
                    Shows the TX step clock on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_LWM</name>
                  <description>
                    Shows the state of the TX FiFO low water mark status on a GPIO pin.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_EMPTY</name>
                  <description>
                    Shows the state of the RX FIFO empty status on a GPIO pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_B</name>
              <description>
                This bit field selects one of 4 values to present on debug pin B. This pin is presented on GPIO[1] for uart0 and GPIO[4] for uart1.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_STEP</name>
                  <description>
                    Marks the RX step state on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_STOP</name>
                  <description>
                    Marks the TX stop bit on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_FULL</name>
                  <description>
                    Shows the state of the TX FiFO full status.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_HWM</name>
                  <description>
                    Shows the state of the RX FIFO high water mark.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_PIN_A</name>
              <description>
                This bit field selects one of 4 values to present on debug pin A. This pin is presented on GPIO[2] for uart0 and GPIO[5] for uart1.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RX_START</name>
                  <description>
                    Marks the RX start bit on a GPIO pin.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_START</name>
                  <description>
                    Marks the TX start bit on a GPIO pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>TX_FIFO_EMPTY</name>
                  <description>
                    Shows the state of the TX FiFO empty status.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RX_FIFO_TIMEOUT</name>
                  <description>
                    Indicates when the RX TIME OUT counter is running.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_READ_ONLY</name>
          <description>
            Debug read only register.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                A readable test value for testing the bus to the UART.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>I2S</name>
      <version>1.0</version>
      <description>
        The I2S Regs provide access to send and receive audio samples from I2S interface.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50050100</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x20</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>CSR</name>
          <description>
            This register configure the i2s settings.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2S_EN</name>
              <description>
                Set this bit enable to the I2S.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CSR2</name>
          <description>
            This register configure the i2s settings.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Soft reset which resets the entire I2S to its POR state.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RST</name>
                  <description>
                    Reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>BIT64_MODE</name>
              <description>
                Set this bit to set the frame size to 64 bits.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SAMPLE_FREQ</name>
              <description>
                00: 8ksps, 01: 16ksps, 10: 32ksps, 11: not implemented.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PDM0</name>
      <version>1.0</version>
      <description>
        The Pulse Density Module (PDM) filter engine provides for 2 DMEMs microphones to be attached.  The digital microphone PDM streams comes in at 1.024MHz or 2.048MHz yielding either 8Ksps or 16Ksps stereo PCM sample streams.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50050200</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>PCMA_CTRL</name>
          <description>
            Contains the enable bit to start the audio stream.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Soft reset which resets the entire PDM to its POR state.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RST</name>
                  <description>
                    Reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN</name>
              <description>
                PDM input and PCM output data streaming enable.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CORE_CONF</name>
          <description>
            Configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PGA_R</name>
              <description>
                Range: -12dB ~ +34.5dB, +1.5dB per step.
              </description>
              <bitRange>[30:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>M12DB</name>
                  <description>
                    -12dB
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>M10P5DB</name>
                  <description>
                    -10.5dB
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>34P5DB</name>
                  <description>
                    +34.5dB
                  </description>
                  <value>31</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PGA_L</name>
              <description>
                Range: -12dB ~ +34.5dB, +1.5dB per step.
              </description>
              <bitRange>[25:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>M12DB</name>
                  <description>
                    -12dB
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>M10P5DB</name>
                  <description>
                    -10.5dB
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>34P5DB</name>
                  <description>
                    +34.5dB
                  </description>
                  <value>31</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SINC_RATE</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[20:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MCLKDIV</name>
              <description>
                PDMA_CKO frequency divisor. F(PDMA_CKO)=F(MCLK_L)/[MCLKDIV+1].
              </description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADCHPD</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HPGAIN</name>
              <description>
                Adjust High-Pass filter coefficients.
              </description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>S_CYCLES</name>
              <description>
                Set number of PDMA_CKO during gain-setting changes or soft mute.
              </description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_MUTE</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disabled.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enabled.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LRSWAP</name>
              <description>
                Swaps the channel of the input audio samples.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    No swap.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SWAP</name>
                  <description>
                    Swap channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CORE2_CONF</name>
          <description>
            Extra configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_STEP</name>
              <description>
                Set fine gain step for smooth PGA or Soft-Mute attenuation transition.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOW</name>
                  <description>
                    0.13dB.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HIGH</name>
                  <description>
                    0.26dB.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PDMCKO_DLY</name>
              <description>
                PDM_CKO clock phase delay in terms of HMCLKA period to internal Sampler.
              </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NONE</name>
                  <description>
                    No extra HMCLKA clock cycle delay.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ONE</name>
                  <description>
                    One extra HMCLKA clock cycle delay.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SEVEN</name>
                  <description>
                    Seven extra HMCLKA clock cycle delay.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIV_MCLKQ</name>
              <description>
                HMCLKA divide-down ratio for generating internal master clock MCLKQ.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>BYPASS</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA).
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_1</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/1.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_2</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/2.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_3</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/3.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PCM_CHSET</name>
              <description>
                Set PCM Output Channels as Mono or Stereo.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Channel disabled.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MONO_L</name>
                  <description>
                    Mono (left).
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MONO_R</name>
                  <description>
                    Mono (Right).
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STEREO</name>
                  <description>
                    Stereo.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CTRL_CONF</name>
          <description>
            Control configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PDM_CNTL</name>
              <description>
                For internal use only. Do not write to this register in normal operation.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG0</name>
          <description>
            PDM CORE Debug0
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ONE_SHOT</name>
              <description>
                If 1 we will only capture 31 bits of data and then stop.
Setting/clearing DBG_RESET before this is required. Toggle
will be one once sampled.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_RESET</name>
              <description>
                If 1 we hold the shift registers in reset. If 0, data is being captured.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SELECT</name>
              <description>
                Select data to record. Valid options are:
1:Left Channel data only (normally sampled on rising edge of CKO)
0:Right Channel data only (normally sampled on falling edge of CKO)
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE</name>
              <description>
                For internal use only. Do not write to this register in normal operation. If 1, the debug logic is running. If 0, it is not.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG1</name>
          <description>
            PDM CORE Debug1
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TOGGLE</name>
              <description>
                Changes every 31 bits of sample.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                31 bit sample data.
              </description>
              <bitRange>[30:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>PDM1</name>
      <version>1.0</version>
      <description>
        The Pulse Density Module (PDM) filter engine provides for 2 DMEMs microphones to be attached.  The digital microphone PDM streams comes in at 1.024MHz or 2.048MHz yielding either 8Ksps or 16Ksps stereo PCM sample streams.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50050300</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>PCMA_CTRL</name>
          <description>
            Contains the enable bit to start the audio stream.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Soft reset which resets the entire PDM to its POR state.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RST</name>
                  <description>
                    Reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EN</name>
              <description>
                PDM input and PCM output data streaming enable.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CORE_CONF</name>
          <description>
            Configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PGA_R</name>
              <description>
                Range: -12dB ~ +34.5dB, +1.5dB per step.
              </description>
              <bitRange>[30:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>M12DB</name>
                  <description>
                    -12dB
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>M10P5DB</name>
                  <description>
                    -10.5dB
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>34P5DB</name>
                  <description>
                    +34.5dB
                  </description>
                  <value>31</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PGA_L</name>
              <description>
                Range: -12dB ~ +34.5dB, +1.5dB per step.
              </description>
              <bitRange>[25:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>M12DB</name>
                  <description>
                    -12dB
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>M10P5DB</name>
                  <description>
                    -10.5dB
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>34P5DB</name>
                  <description>
                    +34.5dB
                  </description>
                  <value>31</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SINC_RATE</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[20:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MCLKDIV</name>
              <description>
                PDMA_CKO frequency divisor. F(PDMA_CKO)=F(MCLK_L)/[MCLKDIV+1].
              </description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADCHPD</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HPGAIN</name>
              <description>
                Adjust High-Pass filter coefficients.
              </description>
              <bitRange>[8:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>S_CYCLES</name>
              <description>
                Set number of PDMA_CKO during gain-setting changes or soft mute.
              </description>
              <bitRange>[4:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_MUTE</name>
              <description>
                FIXME: describe the function.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disabled.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enabled.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>LRSWAP</name>
              <description>
                Swaps the channel of the input audio samples.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    No swap.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SWAP</name>
                  <description>
                    Swap channel.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CORE2_CONF</name>
          <description>
            Extra configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL_STEP</name>
              <description>
                Set fine gain step for smooth PGA or Soft-Mute attenuation transition.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOW</name>
                  <description>
                    0.13dB.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HIGH</name>
                  <description>
                    0.26dB.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PDMCKO_DLY</name>
              <description>
                PDM_CKO clock phase delay in terms of HMCLKA period to internal Sampler.
              </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NONE</name>
                  <description>
                    No extra HMCLKA clock cycle delay.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ONE</name>
                  <description>
                    One extra HMCLKA clock cycle delay.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SEVEN</name>
                  <description>
                    Seven extra HMCLKA clock cycle delay.
                  </description>
                  <value>7</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIV_MCLKQ</name>
              <description>
                HMCLKA divide-down ratio for generating internal master clock MCLKQ.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>BYPASS</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA).
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_1</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/1.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_2</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/2.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_3</name>
                  <description>
                    F(MCLKQ)=F(HMCLKA)/3.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PCM_CHSET</name>
              <description>
                Set PCM Output Channels as Mono or Stereo.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Channel disabled.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MONO_L</name>
                  <description>
                    Mono (left).
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>MONO_R</name>
                  <description>
                    Mono (Right).
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STEREO</name>
                  <description>
                    Stereo.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PDM_CTRL_CONF</name>
          <description>
            Control configuration bits for the PDM-to-PCM core.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PDM_CNTL</name>
              <description>
                For internal use only. Do not write to this register in normal operation.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG0</name>
          <description>
            PDM CORE Debug0
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ONE_SHOT</name>
              <description>
                If 1 we will only capture 31 bits of data and then stop.
Setting/clearing DBG_RESET before this is required. Toggle
will be one once sampled.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DBG_RESET</name>
              <description>
                If 1 we hold the shift registers in reset. If 0, data is being captured.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SELECT</name>
              <description>
                Select data to record. Valid options are:
1:Left Channel data only (normally sampled on rising edge of CKO)
0:Right Channel data only (normally sampled on falling edge of CKO)
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE</name>
              <description>
                For internal use only. Do not write to this register in normal operation. If 1, the debug logic is running. If 0, it is not.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG1</name>
          <description>
            PDM CORE Debug1
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>TOGGLE</name>
              <description>
                Changes every 31 bits of sample.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                31 bit sample data.
              </description>
              <bitRange>[30:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>TIMER</name>
      <version>1.0</version>
      <description>
        The TIMER Device provides programmable timing support for an RTOS or RTOS surrogate, i.e. embedded firmware designs that don't use an RTOS. NOTE Some portions of the timer are only cleared by the initial power on reset to the SOC.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50020400</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x200</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>TIMER0</name>
        <value>2</value>
        <description>TIMER0 Interrupt Number</description>
      </interrupt>
      <interrupt>
        <name>TIMER1</name>
        <value>3</value>
        <description>TIMER1 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CFG_STATUS</name>
          <description>
            Configuration and status bits for the TIMER.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FLAG</name>
              <description>
                This bit toggles every time the counter is incremented. It is useful for ensuring a clean read of the full 64-bits of the counter. Note this bit is also visible in the GPIO external status register for faster read access.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[4:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE_CAPTURE</name>
              <description>
                When this bit is set to 1 it enables the capture registers to respond to a pin transition event in the selected GPIO pin. This would also set the CAPTURE interrupt status bit when it occurs.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable GPIO Event Capture.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable GPIO Event Capture.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_EN_OVR</name>
              <description>
                Force the clock enable for this module ON to prevent clock gating at the HFO. Intended for debug purposes.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Prevent HFO clock gating.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Allow HFO clock gating when block is inactive.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Set this bit to one to perform a soft reset on the timer.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOW</name>
                  <description>
                    Perform a soft reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COUNTER_LO</name>
          <description>
            Lower 32-bits of counter.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                This read only bit field provides a view of the lower 32 bits of the counter.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COUNTER_HI</name>
          <description>
            Upper 32-bits of counter.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                This read only bit field provides a view of the upper 32 bits of the counter.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_CTL</name>
          <description>
            Various debug state control bits.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COLLECTOR</name>
              <description>
                This read only bit fields collects a number of signals inside the timer block. This is an internal debug signal.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ2NVICB</name>
              <description>
                Provides a read only view of what the TIMER device is sending to the NVIC on either interrupt 1.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ2NVICA</name>
              <description>
                Provides a read only view of what the TIMER device is sending to the NVIC on either interrupt 0.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SET2MAX_HI</name>
              <description>
                Writing a one to this bit will cause the high counter register to be set to its maximum count (0xFFFFFFFF). This is a diagnostic tool to check the effect of the counter rolling over from 0xFFFFFFFF to 0x00000000.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SET2MAX_LO</name>
              <description>
                Writing a one to this bit will cause the counter register to be set to 4 before its maximum count (0xFFFFFFFC). This is a diagnostic tool to check the effect of the counter rolling over from 0xFFFFFFFF to 0x00000000.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE</name>
              <description>
                Set to 1 to enable counting in the timer COUNT registers. Set to zero to stop the main counter and clear it. WARNING: setting this bit to 0 will cause the loss any real time epoch maintained in the timer counter register.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable Normal Timer Operation.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable Normal Timer Operation and clear the counter.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>OPERATION</name>
              <description>
                Set to 0 to temporarily stop counting in the timer COUNT registers. WARNING: setting this bit to 0 will cause the loss any real time epoch maintained in the timer counter register. This state may be useful during firmware debug.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enable Normal Timer Operation.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Disable Normal Timer Operation.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CAPTURE_LO</name>
          <description>
            Lower 32-bits of captured time of day.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read only view of lower 32-bits of the time of day that a GPIO event was detected.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CAPTURE_HI</name>
          <description>
            Upper 32-bits of captured time of day.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Read only view of upper 32-bits of the time of day that a GPIO event was detected.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPAREA</name>
          <description>
            When this register value exactly matches the lower 32-bits of the counter then CMPA_STATUS interrupt status bit is set.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When this register is loaded with a value and the CMPA_ENABLE bit is on, then it is armed to set an interrupt status bit when the counter value matches this value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPAREB</name>
          <description>
            When this register value exactly matches the lower 32-bits of the counter then CMPB_STATUS interrupt status bit is set.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When this register is loaded with a value and the CMPB_ENABLE bit is on, then it is armed to set an interrupt status bit when the counter value matches this value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPAREC</name>
          <description>
            When this register value exactly matches the lower 32-bits of the counter then CMPC_STATUS interrupt status bit is set.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When this register is loaded with a value and the CMPC_ENABLE bit is on, then it is armed to set an interrupt status bit when the counter value matches this value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>COMPARED</name>
          <description>
            When this register value exactly matches the lower 32-bits of the counter then CMPD_STATUS interrupt status bit is set.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                When this register is loaded with a value and the CMPD_ENABLE bit is on, then it is armed to set an interrupt status bit when the counter value matches this value.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>0_INT_ENABLE</name>
          <description>
            Interrupt Enable register for the TIMER 0 interrupt.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                The upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                The lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                The selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>0_INT_ENABLE_SET</name>
          <description>
            Set Interrupt Enable bits for TIMER Interrupt 0
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>0_INT_ENABLE_CLR</name>
          <description>
            Set Interrupt Enable bits for TIMER Interrupt 0
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>0_INT_ENABLE_TOG</name>
          <description>
            Toggle Interrupt Enable bits for TIMER Interrupt 0
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Toggle the corresponding interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>1_INT_ENABLE</name>
          <description>
            Interrupt Enable register for the TIMER interrupt 1.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                The upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                The lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                The selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>1_INT_ENABLE_SET</name>
          <description>
            Set Interrupt Enable bits for TIMER Interrupt 1
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Set the corresponding interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>1_INT_ENABLE_CLR</name>
          <description>
            Set Interrupt Enable bits for TIMER Interrupt 1
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Clear the corresponding interrupt enable bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>1_INT_ENABLE_TOG</name>
          <description>
            Toggle Interrupt Enable bits for TIMER Interrupt 1
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                The upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                The lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                The selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUS</name>
          <description>
            Interrupt Status register for the TIMER. Bits in this register can be routed to either timer_irq0 or timer_irq1 on their way to the NVIC.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                The upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                The lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                The selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUS_SET</name>
          <description>
            Set Interrupt Status bits for TIMER Interrupts.
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Set the interrupt status bit for the upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Set the interrupt status bit for the lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Set the interrupt status bit for the selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Set the interrupt status bit for the Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Set the interrupt status bit for the Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Set the interrupt status bit for the Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Set the interrupt status bit for the Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUS_CLR</name>
          <description>
            Clear Interrupt Status bits for TIMER Interrupts.
          </description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Clear the interrupt status bit for the upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Clear the interrupt status bit for the lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Clear the interrupt status bit for the selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Clear the interrupt status bit for the Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Clear the interrupt status bit for the Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Clear the interrupt status bit for the Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Clear the interrupt status bit for the Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUS_TOG</name>
          <description>
            Toggle Interrupt Status bits for TIMER Interrupts.
          </description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HI_OVERFLOW</name>
              <description>
                Toggle the interrupt status bit for the upper 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LO_OVERFLOW</name>
              <description>
                Toggle the interrupt status bit for the lower 32-bits of the counter wrapped from 0xFFFFFFFF back to 0x00000000.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURED</name>
              <description>
                Toggle the interrupt status bit for the selected GPIO pin made the designated transition. The capture registers contain the time of day at which this occurred.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPD</name>
              <description>
                Toggle the interrupt status bit for the Comparator D matched the lower bits of the counter.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPC</name>
              <description>
                Toggle the interrupt status bit for the Comparator C matched the lower bits of the counter.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPB</name>
              <description>
                Toggle the interrupt status bit for the Comparator B matched the lower bits of the counter.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMPA</name>
              <description>
                Toggle the interrupt status bit for the Comparator A matched the lower bits of the counter.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>GPIO8</name>
      <version>1.0</version>
      <description>
        The General Purpose I/O (GPIO) Device provides programmable access to the pins of the chip.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50030000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x80</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>GPIO0</name>
        <value>0</value>
        <description>GPIO0 Interrupt Number</description>
      </interrupt>
      <interrupt>
        <name>GPIO1</name>
        <value>1</value>
        <description>GPIO1 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CFG_STATUS</name>
          <description>
            Configuration and status bits for the GPIO register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_EN_OVR</name>
              <description>
                Force the clock enable for this module ON to prevent clock gating at the HFO. Intended for debug purposes.
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Prevent HFO clock gating.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Allow HFO clock gating when block is inactive.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ2NVICB</name>
              <description>
                Provides a read only view of what the GPIO device is sending to the NVIC on either interrupt 1.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IRQ2NVICA</name>
              <description>
                Provides a read only view of what the GPIO device is sending to the NVIC on either interrupt 0.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Write a one to this bit to soft reset the GPIO8 block.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Perform a soft reset on just this block
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG0_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG1_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYA</name>
          <description>
            Polarity register for the GPIO A interrupt.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 0 for active high interrupts. Set to one for active low interrupts.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYA_SET</name>
          <description>
            Set Polarity bits for GPIO Interrupt A
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set a polarity A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYA_CLR</name>
          <description>
            Clear Polarity bits for GPIO Interrupt A
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to clear a polarity A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYA_TOG</name>
          <description>
            Toggle Polarity bits for GPIO Interrupt A
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to toggle a polarity A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEA</name>
          <description>
            Interrupt Enable register for the GPIO A interrupt.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to one to enable an interrupt STATUS bit to GPIO interrupt A output.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEA_SET</name>
          <description>
            Set Interrupt Enable bits for GPIO Interrupt A
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set an Interrupt Enable A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEA_CLR</name>
          <description>
            Set Interrupt Enable bits for GPIO Interrupt A
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to clear an Interrupt Enable A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSA</name>
          <description>
            Interrupt Enable register for the GPIO A interrupt.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to one to enable an interrupt STATUS bit to GPIO interrupt A output.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSA_SET</name>
          <description>
            Set Interrupt Status bits for GPIO Interrupt A
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set an Interrupt Status A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSA_CLR</name>
          <description>
            Clear Interrupt Status bits for GPIO Interrupt A
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Clear to 1 to set an Interrupt Status A bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYB</name>
          <description>
            Polarity register for the GPIO A interrupt.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 0 for active high interrupts. Set to one for active low interrupts.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYB_SET</name>
          <description>
            Set Polarity bits for GPIO Interrupt B
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set a polarity B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYB_CLR</name>
          <description>
            Clear Polarity bits for GPIO Interrupt B
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to clear a polarity B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>POLARITYB_TOG</name>
          <description>
            Toggle Polarity bits for GPIO Interrupt B
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to toggle a polarity B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEB</name>
          <description>
            Interrupt Enable register for the GPIO B interrupt.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to one to enable an interrupt STATUS bit to GPIO interrupt B output.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEB_SET</name>
          <description>
            Set Interrupt Enable bits for GPIO Interrupt B
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set an Interrupt Enable B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ENABLEB_CLR</name>
          <description>
            Set Interrupt Enable bits for GPIO Interrupt B
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to clear an Interrupt Enable B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSB</name>
          <description>
            Interrupt Enable register for the GPIO B interrupt.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to one to enable an interrupt STATUS bit to GPIO interrupt B output.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSB_SET</name>
          <description>
            Set Interrupt Status bits for GPIO Interrupt B
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to set an Interrupt Status B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STATUSB_CLR</name>
          <description>
            Clear Interrupt Status bits for GPIO Interrupt B
          </description>
          <addressOffset>0x58</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Clear to 1 to set an Interrupt Status B bit.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INPUT_ENABLE</name>
          <description>
            Input Enable register for the GPIO.
          </description>
          <addressOffset>0x5c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to enable input from a GPIO PAD.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DRIVE_HIGH</name>
          <description>
            High Drive Strength Enable register for the GPIO.
          </description>
          <addressOffset>0x68</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Set to 1 to enable high drive strength in the GPIO PAD.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CAPTURE_SEL</name>
          <description>
            This register selects which single GPIO bit is forwarded to the TIMER to capture the current TOD when the bit changes state. It also has a polarity selection for this bit.
          </description>
          <addressOffset>0x6c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>COLLECTOR</name>
              <description>
                Provide a read only debug view of internal signals.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>POLARITY</name>
              <description>
                Set to one to invert the polarity of the selected bit before forwarding it.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE</name>
              <description>
                Set to one to enable forwarding one GPIO input to the timer.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BIT</name>
              <description>
                Set to one of 0 thru 31, inclusive, to select one GPIO input bit to forward to the TIMER block.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SPI0_CTRL</name>
          <description>
            This register controls various pad functions for
SPI0_CLK, SPI0_MOSI and SPI0_MISO. Unless otherwise stated,
these pins affect these pads in any padmux configuration.
          </description>
          <addressOffset>0x70</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MISO_IE</name>
              <description>
                If 1, SPI0_MISO operates normally. If 0, the input enable is deasserted allowing the pin to float without causing power loss.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MOSI_DRIVE</name>
              <description>
                If 0, SPI0_MOSI drive strength is normal. Set to 1 for high drive strength.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_MOSI_OEN</name>
              <description>
                If 0, SPI0_MOSI is an output. If 1, SPI0_MOSI is tristated for low power. Note this has no effect in modes where SPI0_MOSI is I2C0_SDA
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_CLK_DRIVE</name>
              <description>
                If 0, SPI0_CLK drive strength is normal. Set to 1 for high drive strength.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0_CLK_OEN</name>
              <description>
                If 0, SPI0_CLK is an output. If 1, SPI0_CLK is tristated for low power. Note this has no effect in modes where SPI0_CLK is I2C0_SCL
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>UART0_CTRL</name>
          <description>
            This register controls various pad functions for
UART0_RX, UART0_TX, UART0_CTS and UART0_RTS. Unless otherwise stated,
these pins affect these pads in any padmux configuration.
          </description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_CTS_IE</name>
              <description>
                If 1, UART0_CTS operates normally. If 0, the input enable is deasserted allowing the pin to float without causing power loss.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RX_IE</name>
              <description>
                If 1, UART0_RX operates normally. If 0, the input enable is deasserted allowing the pin to float without causing power loss.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RTS_DRIVE</name>
              <description>
                If 0, UART0_RTS drive strength is normal. Set to 1 for high drive strength.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_RTS_OEN</name>
              <description>
                If 0, UART0_RTS is an output. If 1, UART0_RTS is tristated for low power.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_TX_DRIVE</name>
              <description>
                If 0, UART0_TX drive strength is normal. Set to 1 for high drive strength.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0_TX_OEN</name>
              <description>
                If 0, UART0_TX is an output. If 1, UART0_TX is tristated for low power.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>SOCCTRL</name>
      <version>1.0</version>
      <description>
        The system control module provides memory mapped I/O control and status for various and miscellaneous portions of the SOC.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50030080</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>CFG_STATUS</name>
          <description>
            Configuration and status bits for the SOCCTRL register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO_PM_STATE</name>
              <description>
                Read only view of the pin state for the GPIO_PM pin. When this is one, then the chip is in one of its pin based test modes.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Pins are all zero for normal mode. Anything else is abbienormal.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ABNORMAL</name>
                  <description>
                    Pins are in use for one of several test modes. GPIO, SPI1, SPI2, I2C1, I2C2, and UART1 do not work in this case.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>COLLECTOR</name>
              <description>
                Read only view of internal debug state.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WFI_STALL</name>
              <description>
                Allow WFI to trigger a DIAL stall.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    WFI can trigger a DIAL stall.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    WFI does not trigger a DIAL stall.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_EN_OVR</name>
              <description>
                Force the clock enable for this module ON to prevent clock gating at the HFO. Intended for debug purposes.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Prevent HFO clock gating.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Allow HFO clock gating when block is inactive.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>M3DSEN</name>
              <description>
                Set to 1 to enable DIAL stall operations.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable DIAL STALL of M3
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable DIAL STALLs for the M3 for testing.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FLASH_CFG_STATUS</name>
          <description>
            Configuration and status bits for the FLASH controller.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NUM_WS</name>
              <description>
                Programmable number of wait states for the Flash Interface from the ARM M3.
              </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M3_FREQUENCY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>COUNT</name>
              <description>
                Debug Read Only Value M3 CLOCK frequency counter.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_FREQUENCY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>COUNT</name>
              <description>
                Debug Read Only Value DSP frequency counter.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_CSR</name>
          <description>
            Configuration and status bits for controlling the DSP.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_TDO</name>
              <description>
                Bit bang interface for DSP JTAG.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_TRST_N</name>
              <description>
                Bit bang interface for DSP JTAG. NOTE the inversion.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_TDI</name>
              <description>
                Bit bang interface for DSP JTAG.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_TMS</name>
              <description>
                Bit bang interface for DSP JTAG.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_TCLK</name>
              <description>
                Bit bang interface for DSP JTAG.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_COMPLEX_STALL</name>
              <description>
                Set to 1 to stall the DSP DIAL block. DSP will wait remaining in the state when it received the assertion of the bit, much like clock gating, until the bit is cleared.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FORCE</name>
                  <description>
                    Force the DSP to stall.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RELEASE</name>
                  <description>
                    Release from stall.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_COMPLEX_RESET_N</name>
              <description>
                Set to 0 to reset the DSP using the hard reset input to its DIAL block.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FORCE</name>
                  <description>
                    Force reset to the DSP.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RELEASE</name>
                  <description>
                    Release the master reset.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M3_DIAL_STALL_CSR</name>
          <description>
            Configuration and status bits for controlling DIAL stalls in the M3
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>STALL</name>
              <description>
                Set to 1 to force the M3 into a DIAL STALL condition. In this state, the M3 is held in wait state much like clock gating sleep in conventional clocked logic. The normal NULL/DATA cycling is suspended until this flip flop is reset. It is reset upon the arrival of an enabled interrupt request to the M3, as enabled by the bits in this register. This FF can be set by the arrival of a WFI_TOGGLE from the M3 core. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate this bit.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Set to 1 to enable the corresponding external interrupt to wake up the M3 core from a DIAL STALL state. Use DIAL_STALL_SET and DIAL_STALL_CLR registers to manipulate these bits.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M3_DIAL_STALL_SET</name>
          <description>
            Bit settting for the configuration and status bits for controlling DIAL stalls in the M3
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>STALL</name>
              <description>
                Set to 1 to cause the corresponding bit in the M3 DIAL STALL CSR to be set.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Write one to set the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>M3_DIAL_STALL_CLR</name>
          <description>
            Bit clearing for the configuration and status bits for controlling DIAL stalls in the M3
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>STALL</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Write one to clear the corresponding DIAL STALL interrupt enable.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RESET_STATUS</name>
          <description>
            Provide a read only view of status bits that get set by the various causes for an SOC reset. Writing anything to this register resets all the bits.  The bits can accumulate so it is possible to have both the POR and M3_DAP bits set immediately after a reset caused by the debugger, for example.  POR will always clear the other status bits as will writing to this regiser.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BROWN</name>
              <description>
                Set to one if and only if a brownout reset occurred, since the last time this bit was cleared. This bit is cleared by writing anything to this register. NOTE: This is not currently implemented in the chip.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PIN</name>
              <description>
                Set to one if and only if the hardware reset pin was asserted since the last time this bit was cleared. This bit is cleared by writing anything to this register.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Set to one if and only if the watchdog timer expired with reset enabled, since the last time this bit was cleared. This bit is cleared by writing anything to this register.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_DAP</name>
              <description>
                Set to one if and only if the M3 DAP CSR bit in the M3 was written to 1 since the last time this bit was cleared. This bit is cleared by writing anything to this register.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_AIRCR_SYS</name>
              <description>
                Set to one if and only if the AIRCR SYSTEM RESET REQUEST bit in the M3 was written to 1 since the last time this bit was cleared. This bit is cleared by writing anything to this register. This bit resets the entire chip.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_AIRCR_VECT</name>
              <description>
                Set to one if and only if the AIRCR VECTOR RESET REQUEST bit in the M3 was written to 1 since the last time this bit was cleared. This bit is cleared by writing anything to this register. This bit only resets the M3 core.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>POR</name>
              <description>
                Set to one if and only if the power on reset pin was asserted since the last time this bit was cleared. This bit is cleared by writing anything to this register.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FWTRACEA</name>
          <description>
            Provide software driven output that can be seen on the front panel without a UART, etc.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Firmware can write to this register and the results will show up on the front panel.NOTE: this register only gets cleared by the initial power on reset and not by anyother form of reset.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FWTRACEB</name>
          <description>
            Provide software driven output that can be seen on the front panel without a UART, etc. NOTE: this register only gets cleared by the initial power on reset and not by anyother form of reset.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Firmware can write to this register and the results will show up on the front panel.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMUXA</name>
          <description>
            This register provides control pin/pad mux for GPIO[7:0]
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO7</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO7</name>
                  <description>
                    GPIO7 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH7</name>
                  <description>
                    PWM Channel 7 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_UART_TX</name>
                  <description>
                    DSP UART TX output.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1TX</name>
                  <description>
                    UART1 TX pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD6</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO6</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO6</name>
                  <description>
                    GPIO6 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH6</name>
                  <description>
                    PWM Channel 6 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FPANEL</name>
                  <description>
                    FPANEL output.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CLKOUT</name>
                  <description>
                    CLKOUT output
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO5</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO5</name>
                  <description>
                    GPIO5 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH5</name>
                  <description>
                    PWM Channel 5 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1DBGA</name>
                  <description>
                    UART1 DEBUG A output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1CTS</name>
                  <description>
                    UART1 CTS pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[19:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO4</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO4</name>
                  <description>
                    GPIO4 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH4</name>
                  <description>
                    PWM Channel 4 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1DBGB</name>
                  <description>
                    UART1 DEBUG B output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1RTS</name>
                  <description>
                    UART1 RTS pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO3</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO3</name>
                  <description>
                    GPIO3 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH3</name>
                  <description>
                    PWM Channel 3 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1DBGC</name>
                  <description>
                    UART1 DEBUG C output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1RX</name>
                  <description>
                    UART1 RX pin.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO2</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO2</name>
                  <description>
                    GPIO2 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH2</name>
                  <description>
                    PWM Channel 2 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0DBGA</name>
                  <description>
                    UART0 DEBUG A output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CLK</name>
                  <description>
                    SPI2 Clock output in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2CLK</name>
                  <description>
                    SPI2 Clock input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[6:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO1</name>
                  <description>
                    GPIO1 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH1</name>
                  <description>
                    PWM Channel 1 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0DBGB</name>
                  <description>
                    UART0 DEBUG B output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2MOSI</name>
                  <description>
                    SPI2 MOSI input in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2MISO</name>
                  <description>
                    SPI2 MISO input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[2:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO0</name>
                  <description>
                    GPIO0 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PWMCH0</name>
                  <description>
                    PWM Channel 0 in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART0DBGC</name>
                  <description>
                    UART0 DEBUG C output in normal mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2MISO</name>
                  <description>
                    SPI2 MISO input in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2MOSI</name>
                  <description>
                    SPI2 MOSI input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMUXB</name>
          <description>
            This register provides control pin/pad mux for GPIO[15:8]
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO15</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO15</name>
                  <description>
                    GPIO15 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_DATA_IN</name>
                  <description>
                    I2S Data Input in normal mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM1DATA</name>
                  <description>
                    PDM1 Data Input
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD6</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO14</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO14</name>
                  <description>
                    GPIO14 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_LRCLK</name>
                  <description>
                    I2S Left/Right Frame Clock.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM1CLK</name>
                  <description>
                    PDM1 clock Output
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO13</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO13</name>
                  <description>
                    GPIO13 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_BCLK</name>
                  <description>
                    I2S Bit Clock
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[19:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO12</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO12</name>
                  <description>
                    GPIO12 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_ACLK</name>
                  <description>
                    I2S Input Source Clock
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO11</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO11</name>
                  <description>
                    GPIO12 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2RDY</name>
                  <description>
                    SPI2 Ready
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CS3</name>
                  <description>
                    SPI2 Chip Select 3 in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2CS</name>
                  <description>
                    SPI2 Chip Select input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO10</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO10</name>
                  <description>
                    GPIO12 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CS2</name>
                  <description>
                    SPI2 Chip Select 2 in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO9</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO9</name>
                  <description>
                    GPIO9 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C1SCK</name>
                  <description>
                    I2C1 Clock pin
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM0DATA</name>
                  <description>
                    PDM0 Data Input
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C2SCK</name>
                  <description>
                    I2C2 Clock pin
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO8</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO8</name>
                  <description>
                    GPIO8 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C1SDA</name>
                  <description>
                    I2C1 SDATA pin
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM0CLK</name>
                  <description>
                    PDM0 clock Output
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C2SDA</name>
                  <description>
                    I2C2 SDATA pin
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMUXC</name>
          <description>
            This register provides control pin/pad mux for GPIO[23:16]
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO23</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO23</name>
                  <description>
                    GPIO23 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0CS0</name>
                  <description>
                    SPI0 Chip Select 0 in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV0CS</name>
                  <description>
                    SPI0 Chip Select input in slave mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD6</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO22</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[25:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO22</name>
                  <description>
                    GPIO22 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1RTS</name>
                  <description>
                    UART1 RTS pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_JTAG_TDO</name>
                  <description>
                    DSP JTAG TDO ouput pin.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CLKOUT</name>
                  <description>
                    CLKOUT output
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO21</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[21:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO21</name>
                  <description>
                    GPIO21 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1CTS</name>
                  <description>
                    UART1 CTS pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_JTAG_TCLK</name>
                  <description>
                    DSP JTAG TCLK input.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[19:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO20</name>
              <description>
                Selects one of 4 possible uses for this pin.
              </description>
              <bitRange>[17:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO20</name>
                  <description>
                    GPIO20 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1TX</name>
                  <description>
                    UART1 TX pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_UART_TX</name>
                  <description>
                    DSP UART TX output.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>FPANEL</name>
                  <description>
                    FPANEL output.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO19</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[13:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO19</name>
                  <description>
                    GPIO19 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>UART1RX</name>
                  <description>
                    UART1 RX pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_JTAG_TRST_N</name>
                  <description>
                    DSP JTAG TRST_N input.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO18</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO18</name>
                  <description>
                    GPIO18 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C0SCK</name>
                  <description>
                    I2C0 Clock
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_JTAG_TDI</name>
                  <description>
                    DSP JTAG TDI INPUT
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM0DATA</name>
                  <description>
                    PDM0 Data Input
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO17</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO17</name>
                  <description>
                    GPIO17 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C0SDA</name>
                  <description>
                    I2C0 Data
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DSP_JTAG_TMS</name>
                  <description>
                    DSP JTAG TMS INPUT
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PDM0CLK</name>
                  <description>
                    PDM0 clock Output
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO16</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO16</name>
                  <description>
                    GPIO16 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2S_DATA_OUT</name>
                  <description>
                    I2S Data Output pin.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMUXD</name>
          <description>
            This register provides control pin/pad mux for GPIO[31:24]
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD8</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO31</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[29:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO31</name>
                  <description>
                    GPIO31 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1CS1</name>
                  <description>
                    SPI1 Chip Select 1 in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1RDY</name>
                  <description>
                    SPI1 Ready
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CS1</name>
                  <description>
                    SPI2 Chip Select 1 in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO30</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[26:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO30</name>
                  <description>
                    GPIO30 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1CS0</name>
                  <description>
                    SPI1 chip select 0 in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2RDY</name>
                  <description>
                    SPI2 Ready
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CS0</name>
                  <description>
                    SPI2 Chip Select 0 in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV1CS</name>
                  <description>
                    SPI1 chip select input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2CS</name>
                  <description>
                    SPI2 chip select input in slave mode
                  </description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD6</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO29</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[22:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO29</name>
                  <description>
                    GPIO29 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1CLK</name>
                  <description>
                    SPI1 Clock output in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C1SCK</name>
                  <description>
                    I2C1 Clock pin
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2CLK</name>
                  <description>
                    SPI2 Clock output in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV1CLK</name>
                  <description>
                    SPI1 Clock input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2CLK</name>
                  <description>
                    SPI2 Clock input in slave mode
                  </description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO28</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[18:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO28</name>
                  <description>
                    GPIO28 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1MOSI</name>
                  <description>
                    SPI1 MOSI output in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C1SDA</name>
                  <description>
                    I2C1 SDATA pin
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2MOSI</name>
                  <description>
                    SPI2 MOSI output in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV1MISO</name>
                  <description>
                    SPI1 MISO output in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2MISO</name>
                  <description>
                    SPI2 MISO output in slave mode
                  </description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO27</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[14:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO27</name>
                  <description>
                    GPIO27 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI1MISO</name>
                  <description>
                    SPI1 MISO input in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI2MISO</name>
                  <description>
                    SPI2 MISO input in master mode
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV1MOSI</name>
                  <description>
                    SPI1 MOSI input in slave mode
                  </description>
                  <value>4</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV2MOSI</name>
                  <description>
                    SPI2 MOSI input in slave mode
                  </description>
                  <value>5</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO26</name>
              <description>
                Selects one of 3 possible uses for this pin.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO26</name>
                  <description>
                    GPIO26 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0CS3</name>
                  <description>
                    SPI0 Chip Select 3 in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0RDY</name>
                  <description>
                    SPI0 ready input.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO25</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO25</name>
                  <description>
                    GPIO25 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0CS2</name>
                  <description>
                    SPI0 Chip Select 2 in master mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO24</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>GPIO24</name>
                  <description>
                    GPIO24 in normal mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPI0CS1</name>
                  <description>
                    SPI0 Chip Select 1
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>PMUXE</name>
          <description>
            This register provides control pin/pad mux for SPI0
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0MISO</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI0MISO</name>
                  <description>
                    SPI0 Data input in SPI Master mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV0MOSI</name>
                  <description>
                    SPI0 Data input in SPI Slave mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0MOSI</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>MOSI</name>
                  <description>
                    SPI0 Data output in SPI Master mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C0SDA</name>
                  <description>
                    I2C0 DATA in I2C mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV0MISO</name>
                  <description>
                    SPI0 Data output in SPI Slave mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0CLK</name>
              <description>
                Selects one of 2 possible uses for this pin.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SPI0CLK</name>
                  <description>
                    SPI0 Clock in SPI mode
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>I2C0SCK</name>
                  <description>
                    I2C0 Clock in I2C mode
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SPISLV0SCK</name>
                  <description>
                    SPI0 Clock in SPI Slave mode
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CFG</name>
          <description>
            This register controls various clock sources.
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_CLK_SEL</name>
              <description>
                Select 4MHz or 2MHz clock for I2C domain.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>2MHZ</name>
                  <description>
                    I2C runs on 2MHz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>4MHZ</name>
                  <description>
                    I2C runs on 4MHz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_CLK_SEL</name>
              <description>
                Select 8MHz, 4MHz or 2MHz clock for DSP domain.
              </description>
              <bitRange>[9:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>4MHZ</name>
                  <description>
                    DSP runs on 4MHz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8MHZ</name>
                  <description>
                    DSP runs on 8MHz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ</name>
                  <description>
                    UST runs on 2MHz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UST_CLK_SEL</name>
              <description>
                Select 8MHz, 4MHz or 2MHz clock for UST domain.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>4MHZ</name>
                  <description>
                    UST runs on 4MHz.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>8MHZ</name>
                  <description>
                    UST runs on 8MHz.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ</name>
                  <description>
                    UST runs on 2MHz.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC_CLK_SEL</name>
              <description>
                Select 1MHz HFO, 2MHz HFO, 2MHz XTAL or 2MHz PAD clock.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>1MHZ_HFO</name>
                  <description>
                    1MHz divided from HFO clock is selected.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ_HFO</name>
                  <description>
                    2MHz divided from HFO clock is selected.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ_XTAL</name>
                  <description>
                    2MHz divided from audio crystal is selected.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2MHZ_PAD</name>
                  <description>
                    2MHz from input pad is selected.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TSENSE_CTRL</name>
          <description>
            This register controls the temperature sensor FDC.
          </description>
          <addressOffset>0x60</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SATURATED</name>
              <description>
                Temperature sensor result has saturated and is not reliable.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    Result is normal.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>SATURATED</name>
                  <description>
                    Result has saturated.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Temperature sensor frequency ready.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>WAITING</name>
                  <description>
                    Result is not ready.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    Result is ready.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RST_N</name>
              <description>
                Reset control for the temperature sensor FDC. Set to 0 to reset and disable the temperature sensor FDC.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>RESET</name>
                  <description>
                    Reset and disable the tsensor FDC.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Allow the tsensor FDC to run.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TSENSE_FREQ</name>
          <description>
            This register shows the temperature sensor FDC result.
          </description>
          <addressOffset>0x64</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                Temperature sensor frequency. Do not read until READY bit is set. Set RST_N bit to begin collection. Unset RST_N bit when done to save energy and reset the counter.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>FPANEL</name>
          <description>
            This register provides control over a few functions in the front panel and the INSTR_STOP pin. Write a zero to this register to shutdown all A/C power in the peripheral piece of the front panel.
          </description>
          <addressOffset>0x74</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_OSC_DIV</name>
              <description>
                Divide down the DSP oscillator out of DSP to ANALYZER debug bus.
              </description>
              <bitRange>[11:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DIV_BY_1</name>
                  <description>
                    Undivided dsp_osc to analyzer bus.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_2</name>
                  <description>
                    Divide by 2.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_4</name>
                  <description>
                    Divide by 4.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_8</name>
                  <description>
                    Divide by 8.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_16</name>
                  <description>
                    Divide by 16.
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_OSC_DIV</name>
              <description>
                Divide down the M3 oscillator out of M3 to ANALYZER debug bus.
              </description>
              <bitRange>[8:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DIV_BY_1</name>
                  <description>
                    Undivided dsp_osc to analyzer bus.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_2</name>
                  <description>
                    Divide by 2.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_4</name>
                  <description>
                    Divide by 4.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_8</name>
                  <description>
                    Divide by 8.
                  </description>
                  <value>3</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DIV_BY_16</name>
                  <description>
                    Divide by 16.
                  </description>
                  <value>4</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_DISABLE</name>
              <description>
                Set to 1 to disable the 8MHZ oscillator normally enabled by padmux controls selecting FPANEL.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OEN</name>
              <description>
                Set to 1 to tristate FPANEL output pin.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_OSC</name>
              <description>
                Set to 1 to enable DSP oscillator from DSP complex into the frequency counter in the front panel.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable the high frequency DSP oscillator out of the DSP complex so we can measure it.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable the high frequency DSP oscillator from the DSP complex to save chip power.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>M3_OSC</name>
              <description>
                Set to 1 to enable M3 oscillator from M3 complex into the frequency counter in the front panel.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enable the high frequency M3 oscillator out of the M3 complex so we can measure it.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disable the high frequency M3 oscillator from the M3 complex to save chip power.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CONTINUOUS</name>
              <description>
                Set to 1 to launch continuously, i.e. restart immediately after the last spew. Note setting this disables the clear screen escape sequence.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ALWAYS</name>
                  <description>
                    Always restart immediately.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>LAUNCHED</name>
                  <description>
                    Use 1Hz clock to launch.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RUN_STATE</name>
              <description>
                Set to 1 to stop the front panel.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>HALT</name>
                  <description>
                    stop the front panel to save power.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    let the front panel run (default).
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUG_READ_ONLY</name>
          <description>
            Provide a read only value for diagnostics.
          </description>
          <addressOffset>0x7c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Debug Read Only Value for Diagnostics.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>I2C0</name>
      <version>1.0</version>
      <description>
        I2C System Control Block Registers.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50040000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x200</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2C0</name>
        <value>8</value>
        <description>I2C0 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CONFIG</name>
          <description>
            I2C configuration register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_AT_ACK</name>
              <description>
                Setting this bit holds the SM before sending the clock for
acknowledgement until an entry is placed in the TX FIFO or CMD FIFO.
This allows for pathologically slow masters to not be required to
avoid FIFO starvation on reads. For write operations there is no
advantage to setting this bit, but the SM will still stop on ACK.
Note that observers of the I2C lines will see see 8 bits of data
followed by a pause and eventually the ACK, followed by the next
8 bits of data.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_INT_LEVEL</name>
              <description>
                Program to the level that you want RX_FIFO_HIT_LEVEL to be set. If this reg is 2, then RX_FIFO_HIT_LEVEL will be set if the number of entries in RX_FIFO are 2 or greater. Similarly
this defines how many entries available in the TX FIFO for the TXFIFO_HAS_LEVEL_SPACE to be set.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_RXFIFO_AT_START</name>
              <description>
                Typically, the RX FIFO requires a CMD fron the CMD_FIFO_DATA to enable RX FIFO. Setting this bit to 1 changes the default to 1. The RX FIFO can still be disabled using a CMD.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BYTE2_END</name>
              <description>
                Only used for 2 or 4 byte transfers. If 0, DATA[15:8] is receive on SDA before DATA[7:0]. If 1, vice versa.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>END</name>
              <description>
                If 0, transmit msbit first. If 1 send lsbit first.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STALL_IF_RXFULL</name>
              <description>
                If 1, the TX side will stall if RX FIFO is full.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IGNORE_NACK</name>
              <description>
                If 0, an unexpected NACK will lockup the system and require a soft reset to exit. If 1, all NACKs are ignored.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RD_PUSHES_TX_FIFO</name>
              <description>
                If set to 1, the TX FIFO will empty as normal, but for every read pop that occurs, a new TX will be pushed into the FIFO. This is good for DMA.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_1BYTE_FIFO_DATA</name>
          <description>
            I2C read and write data register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads return receive data from I2C. Writes send data to transmit of I2C.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>
            I2C status register. Note that ANDing this field with INT_EN will give you unmasked interrupts.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE</name>
              <description>
                If 1, the command is done and the SM is idle. This is the inverse of START_BUSY provided here to make interrupt access cleaner.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL</name>
              <description>
                If 1, then there is at least CONFIG.RX_FIFO_INT_LEVEL Byte(s) of data waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE</name>
              <description>
                If 1, all current transmits (data and cmd) are complete, but there may still be a command operation (e.g. stop) pending. See START_BUSY for a true end of command status.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA</name>
              <description>
                If 1, then there is data waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_1SPACE</name>
              <description>
                If 1, then there is space to put onto the TX FIFO queue by writing to TXRX_1BYTE_FIFO_DATA. If 0, there isn't.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE</name>
              <description>
                If 1, then there is space to put If 1, then there is at least CONFIG.RX_FIFO_INT_LEVEL Byte(s) of space available on TX_FIFO. If 0, there isn't.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SM_IN_NACK_HOLD</name>
              <description>
                We have detected an unexpected NACK and the state machine has halted. It can be continued on with its original sequence
by setting STATUS.NACK_ESCAPE or it can be reset by writing CONFIG.SOFT_RESET.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NACK_ESCAPE</name>
              <description>
                If an unexpected NACK is received, the SM stalls allowing for debug. The SM can be unfrozen by writing 1 to this location after
it is in the unexpected NACK stall and will continue with its previous command. Use CONFIG.SOFT_RESET to abort the command in
progress.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>START_BUSY</name>
              <description>
                Write to 1 to start transaction. Read back to determine if the SM is START_BUSY (1) or if has gone back to idle (0).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO_DEBUG</name>
          <description>
            I2C tx fifo debug register
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. Newest entries are dropped. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO_DEBUG</name>
          <description>
            I2C rx fifo debug register
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. See CONFIG.RX_OVFLW_KEEPHEAD for details on drop behavior.  Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>GENERAL_DEBUG</name>
          <description>
            I2C General Debug Fields
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LAST_BYTE_HAD_NACK</name>
              <description>
                If 1, the last byte on the wire had a NACK. This bit is cleared and
reevaluated when the state machine the next time the SM checks for a
NACK (i.e. on the next byte).
The bit will be set if the master or slave does not acknowlege for
any reason.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONITOR_SDA</name>
              <description>
                If 0, we monitor SCL. If 1 we monitor SDA.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONITOR_EN</name>
              <description>
                If 0, the Rise Time debug monitor is disabled and the RISE_TIME_DEBUG.VALUE will be zeroed out. If 1, then the monitor records the time from the internal SDA_OEN or SCL_OEN
(selected by MONITOR_SDA) to determine the rise time and effecetive pull stretngth of the external PUs. Each value in the monitor is
a CLKIN. Note that the monitor will count delays from metastable flops or hystersis avoidance flops as additional rise time.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_BIT_BANG</name>
              <description>
                If set, the BB_SDA_OEN, and BB_SCL_OEN control the I2C interface.
The internal SM has no effect and can be placed in SOFT_RESET. However, the
CONFIG2.CLK_ON bit should be set, or else the clock may gate off due to apparent
quiescence.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SDA_OEN</name>
              <description>
                Value to drive on SDA_OEN. Signal is active low, so a 0 will drive I2C low. A high will let it float via PU to 1.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SCL_OEN</name>
              <description>
                Value to drive on SCL_OEN. Note that if SCL_CONFIG.HARD_DRIVE_SCL is set, this bit actually controlls SCL_OUT and SCL_OEN is set low (always driving)
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STRETCH_ACTIVE</name>
              <description>
                If this is set, the internal logic belives the SCL is being driven low by an external force (i.e. clock stretching)
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SDA_LOCAL</name>
              <description>
                Live input value of SDA (after meta stable and glitch filter flops)
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SDA_OEN</name>
              <description>
                Value of Output Enable (active low) of SDA. If nothing else is driving the line, this is what the line should be at steady state.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SCL_LOCAL</name>
              <description>
                Live input value of SCL (after meta stable and glitch filter flops)
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SCL_OEN</name>
              <description>
                Value of Output Enable (active low) of SCL. If nothing else is driving the line, this is what the line should be at steady state.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE_REG</name>
              <description>
                Current state of primary State Machine
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_EN</name>
          <description>
            I2C Interrupt Enable Registger. Note that ANDing this field with STATUS will give you unmasked interrupts.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_EN_SRCRDY</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for i2c_src_rdy. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD14</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN_SRCRDY</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for i2c_src_rdy. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN_DSTRDY</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt for i2c_dst_rdy. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an interrupt for i2c_dst_rdy. Writing to TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD9</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[10:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE</name>
              <description>
                If set to 1, the STATUS field CMD_DONE going high will be accelerated into an interrupt for i2c_int. Note this will be high until the cmd is started. If the system is idle, there is no way to clear the interrupt other than disabling it here.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_EN</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for i2c_int. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_COMPLETE_EN</name>
              <description>
                If set to 1, the STATUS field XMIT_COMPLETE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for i2c_int. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNACK_EN</name>
              <description>
                If set to 1, the STATUS field SM_IN_NACK_HOLD will be accelerated into an interrupt for i2c_int. Note this will be high until the NACK is processed either with a
STATUS.NACK_ESCAPE or a CONFIG2.SOFT_RESET
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CMD_FIFO_DATA</name>
          <description>
            I2C command FIFO. Writes to this FIFO go into the TX_FIFO and are executed in series with the DATA pushed in TXRX_1BYTE_FIFO_DATA. By using the CMD
and DATA entries, different sequences can be setup to imelement write, read commands, as well as start / stop seqeuences. Note that the commands
generally take effect around the ACK time for the PREVIOUS byte. Multiple commands can be combined into a single write with the exception of the
dummy byte, which must be a command by itself.
 As an example, a Adesto RM24C32C is a SEEPROM that uses 2 address bytes (called A0 and A1) below. Assuming it has its device
address bits configured as 0, then a typical write of two bytes of data (0xD0, 0xD1) command would be:
 Write 0xa4 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Write
 Write 0xa0 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xa1 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xd0 to TXRX_1BYTE_FIFO_DATA                 // Data0
 Write 0xd1 to TXRX_1BYTE_FIFO_DATA                 // Data1
 Write 0x04 to CMD_FIFO_DATA                        // Issue STOP
 A typical random read (which involes writing the desired address and then triggering a restart to read the data) of the same data would be:
 Write 0xa4 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Write
 Write 0xa0 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xa1 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0x01 to CMD_FIFO_DATA                        // Issue Restart
 Write 0xa5 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Read
 Write 0xff to TXRX_1BYTE_FIFO_DATA                 // Dummy data (will be filled in by remote side)
 Write 0xd0 to CMD_FIFO_DATA                        // Issue command to drive NACK to 0 and enable RX FIFO
 Write 0xff to TXRX_1BYTE_FIFO_DATA                 // Dummy data (will be filled in by remote side)
 Write 0x34 to CMD_FIFO_DATA                        // Send NACK=1 on last read and issue STOP

 For longer reads, it is probably peferable to use the dummy byte cmd to fill in the dummy data. However, note that to trigger the NACKs
and other commands correctly, the first and probably last dummy data should be manually entered (last is optional, but it is considered
good protocol to issue a NACK=1 on the last byte of data read by master).
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_RXFIFO</name>
              <description>
                Controls when data on the I2C line is driven into RX_FIFO.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Leave NACK at its previous state. When STATUS.START_BUSY is written, the NACK bit is set high meaning the master will not drive the NACK low to acknowledge.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE_RXFIFO</name>
                  <description>
                    All bytes received AFTER this command will be not be sent to the RX_FIFO.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE_RXFIFO</name>
                  <description>
                    All bytes received AFTER this command will bebe sent into the RX_FIFO. Typically used for reads.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_NACK</name>
              <description>
                Controls the master driving the NACK bit.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Leave NACK at its previous state. When STATUS.START_BUSY is written, the NACK bit is set high meaning the master will not drive the NACK low to acknowledge.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DRIVE_NACK_LOW</name>
                  <description>
                    All bytes from this point forward will be acknowledged by the master (typically used for reads)
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DRIVE_NACK_HIGH</name>
                  <description>
                    All bytes from this point forward will not be acknowledged by the master (typically used for the last read which is NACK'd to tell slave we're done reading)
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EXP_1NACK</name>
              <description>
                Writes this bit to ignore a negative ACK for the PREVIOUS data transfer. Not that this is required if the slave does not acknlowedge or if the
master does not set the ACK bit low. Without this bit, an unexpected NACK will land the SM in a hold state (see STATUS.SM_IN_NACK_HOLD for more details).
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_SRD</name>
              <description>
                These two bits control sending either a STOP, RESTART or a set of dummy bytes. Obviously, you can only send one of the three (or send nothing).
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Finish current data byte and begin an I2C RESTART sequence.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESTART</name>
                  <description>
                    Finish current data byte and begin an I2C RESTART sequence.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Finish current data byte and begin an I2C STOP sequence.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DUMMYBYTE</name>
                  <description>
                    If this is set, DUMMY_BYTES worth of dummy bytes (0xff) are "transmitted". This is very useful for read operations where you need to trigger
a number of byte transfers, but you don't want to feed 1 byte into the TX_FIFO for each one. Once this command is set, the DUMMY bytes will
fill the TX FIFO. Until those bytes finish, it is dangerous to write to the CMD FIFO, the DATA FIFO or to the DUMMY_BYTES register.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            I2C configuration2 register.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SCL_HYSTERSIS</name>
              <description>
                0 is the normal, recommended flow. If 1, all SCL hysterisis is disabled. See SCL_HYSTERISIS_LEVEL for more info.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SCL_HYSTERISIS_LEVEL</name>
              <description>
                Due to the nature of I2C, the signals are susceptible to noise, especially during the I2C "high" when it is weakly
driven by a pull up resistor. The IP supports a hysterisis module that samples the input SDA and SCL signal
signals to ensure they are stable before seen by the
internal logic. This glitch avoidance circuit adds latency to the receive signals, which can slow down the overall
I2C period. For this reason, the hysterisys level is configureable from this register. Set to 0x0 to get the full 16
CLK hysterisis, 0x1 for 15 CLK hystersis, 0x2 for 14 CLK hysteris and up to value 0xf for 1 CLK hysteris.
To fully disable hystersis, set DISABLE_SCL_HYSTERSIS
              </description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AGGR_CLK_GATING</name>
              <description>
                If set to 1, a more aggressive clock gating scheme is enacted that will clock the gate even if the command is
still in flight, but the FIFOs, etc. have emptied (i.e. processor has starved FIFOs). If 0, we only gate
when the command is complete.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                This bit provides an override to the clock gate enable. If 0, the clock will only run if the local state machine is busy. If 1, the clock will always run.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>
                If 1, all FIFO / SM in I2C will be held in reset. If 0, normal operation. To do a soft reset, you must write this to 1 and then back to 0 to remove the reset.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLR_STICKY</name>
              <description>
                If 1, clear sticky bits in registers. If 0, normal operation. To do a soft reset, you must write this to 1 and then back to 0 to remove the reset.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_METAFLOP</name>
              <description>
                0 is the normal, recommended flow. If 1, the 2 CLKIN delay of SDA and SCL is bypassed allowing for faster operation at the risk of metastablity if SDA and SCL changes near sample time. Normally SDA and SCL should change with >100 ns setup / hold, so it may be a viable risk.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SDA_HYSTERSIS</name>
              <description>
                0 is the normal, recommended flow. If 1, all SDA hysterisis is disabled. See SDA_HYSTERISIS_LEVEL for more info.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SDA_HYSTERISIS_LEVEL</name>
              <description>
                Due to the nature of I2C, the signals are susceptible to noise, especially during the I2C "high" when it is weakly
driven by a pull up resistor. The IP supports a hysterisis module that samples the input SDA and SCL signal
signals to ensure they are stable before seen by the
internal logic. This glitch avoidance circuit adds latency to the receive signals, which can slow down the overall
I2C period. For this reason, the hysterisys level is configureable from this register. Set to 0x0 to get the full 16
CLK hysterisis, 0x1 for 15 CLK hystersis, 0x2 for 14 CLK hysteris and up to value 0xf for 1 CLK hysteris.
To fully disable hystersis, set DISABLE_SDA_HYSTERSIS
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG1</name>
          <description>
            I2C Clock Config Register 1
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IBG_TIME</name>
              <description>
                The delay bewteen each byte will be (IBG_TIME+1) * CLKIN period (125ns).
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_TIME</name>
              <description>
                Controls I2C clock rate. Several registers control the I2C clock speeds giving maximum flexibility. Each
register defines the time that an I2C event occurs on against a counter going from 0 to cycle_time.
Legitimate values for each counter are from 0 to 127. Each bit is an
additional CLKIN cycle (125ns). The overal speed is derived from the cycle_time, so if cycle_time is 0x4f, then
the overall period would be (0x4f+1)*125ns = 10us or a 100KHz period.

There are registers to control when I2C_CLK is driven high (pe_time) and when to drive the I2C_CLK low (ne_time). There
are registers to define when data is driven
onto the line from the IP (tx_time), when data from the remote slave is sampled (rx_time). The values in
these registers should be programmed according to I2C protocol, e.g. setting tx_time in between pe_time and ne_time would
likely not be productive. Additionally, there is an inter byte gap time (ibg_time).

Nothing in the logic checks for incorrect values.


Assuming CLKIN is 4MHz, this would be a reasonable configuration for 100KHz.
 cycle_time = 0x27
 pe_time    = 0x10
 ne_time    = 0x1f
 tx_time    = 0x01
 rx_time    = 0x19
 min_scl    = 0x04
 hyst_level = 0x08


Assuming CLKIN is 4MHz, this would be a reasonable configuration for 400KHz.
 cycle_time = 0x09
 pe_time    = 0x04
 ne_time    = 0x08
 tx_time    = 0x01
 rx_time    = 0x05
 min_scl    = 0x00
 hyst_level = 0x01


Note that the follow events are derived from csr times in the sequence
 START_SDA_LOW - pe_time
 START_SCL_LOW - ne_time
 STOP_SDA_HIGH - tx_time
 STOP_SCL_HIGH - pe_time
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG2</name>
          <description>
            I2C Clock Config Register 2
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG3</name>
          <description>
            I2C Clock Config Register 3
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SCL_CONFIG</name>
          <description>
            I2C SCL Config Register
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_FULL_STRETCH_SUPPORT</name>
              <description>
                This is a debug bit and should not be set under normal circumstances.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SCL_HIGH_CHK</name>
              <description>
                If this bit is set, then the logic ignore the current input state of the SCL and by extention, disable the metastability FF on the SCL.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HARD_DRIVE_SCL</name>
              <description>
                If this bit is cleared,the SCL is driven low and then a weak PU pulls the SCL high. If this bit is set
the SCL will be driven low and high. This allows for better defined rise times on SCL and for the
removal of a potentially low resistance PU on the SCL line. However, if this bit is set it effectively
disables clock stretching.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MIN_SCL_HIGH</name>
              <description>
                In the case where clock stretching deforms the programmed release of SCL so it is pulled high,
the SCL can have a much shorter width. This register defines that minimum width. Note that
the metastable FF (1 to 2 clocks) and glitch avoidance logic (0-16 clocks) and the MIN_SCL_HIGH
are effectively added together to form the SCL high as seen by the outside world. So if the
glitch avoidance is set to 16 and CLKIN is 8MHz, then the SCL will be high for at least 2.125 ns
plus 125ns * MIN_SCLK_HIGH.
              </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_2BYTE_FIFO_DATA</name>
          <description>
            I2C read and write data register.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                2 byte reads return receive data from I2C. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received. By setting CONFIG.BYTE2_END,
this order can be reversed.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_4BYTE_FIFO_DATA</name>
          <description>
            I2C read data register. Note this register is disabled in DSP instances.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                4 byte reads return receive data from I2C. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received, etc. up to bit [31:24] having the
fourth byte received. By setting CONFIG.BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RISE_TIME_DEBUG</name>
          <description>
            I2C rise debug register
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                When Monitor Enabled, this is the most recent time
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DUMMY_BYTES</name>
          <description>
            I2C Dummy byte register
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                This is the number of dummy bytes to send when called out in the CMD_FIFO_DATA when CMD_STOP_RESTART_DUMMY is set to DUMMYBYTE. At that point, the
DATA FIFO and CMD will begin to be filled with dummy bytes (0xff) and will not be available for writes until the dummy bytes complete. You can
read this register to determine when all of the dummy bytes are pushed into the FIFO or STATUS.XMIT_COMPLETE for when the entire TX_FIFO has
transmitted its data. Modifying this value after the DUMMYBYTE command has been issued has an unknown effect.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_1BYTE_DATA_CMD_FIFO</name>
          <description>
            Note this register is only enabled in DSP instances and is intended
to support DMA transactions.
Writing this register has a similar effect to writing
TXRX_1BYTE_FIFO_DATA followed by a write to CMD_FIFO_DATA, but it is
done in a single write. Note that if the CMD is all 0 (i.e. a nop),
this does not actually push an entry onto the CMD_FIFO. Note too that
a single write to this register can push two entries onto the FIFO,
so be sure to have at least 2 entries in FIFO before writing
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD</name>
              <description>
                A non-zero write to this location is similar to writing it to CMD_FIFO_DATA. A all zero write has no effect. Reads return all 0.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Write data to this location is similar to writing it to TXRX_1BYTE_FIFO_DATA. Reads return all 0.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ACT</name>
          <description>
            I2C Active Interrupts. This is effectively STATUS ANDed with INT_EN
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD9</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE_ACT</name>
              <description>
                STATUS.CMD_DONE is set and active
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_ACT</name>
              <description>
                STATUS.RX_FIFO_HIT_LEVEL is set and active
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_COMPLETE_ACT</name>
              <description>
                STATUS.XMIT_COMPLETE is set and active
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_ACT</name>
              <description>
                STATUS.RXFIFO_HAS_DATA is set and active
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_SPACE is set and active
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_LEVEL_SPACE is set and active
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNACK_ACT</name>
              <description>
                STATUS.SM_IN_NACK_HOLD is set and active
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>I2C1</name>
      <version>1.0</version>
      <description>
        I2C System Control Block Registers.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50040080</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x200</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>I2C1</name>
        <value>9</value>
        <description>I2C1 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CONFIG</name>
          <description>
            I2C configuration register.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_AT_ACK</name>
              <description>
                Setting this bit holds the SM before sending the clock for
acknowledgement until an entry is placed in the TX FIFO or CMD FIFO.
This allows for pathologically slow masters to not be required to
avoid FIFO starvation on reads. For write operations there is no
advantage to setting this bit, but the SM will still stop on ACK.
Note that observers of the I2C lines will see see 8 bits of data
followed by a pause and eventually the ACK, followed by the next
8 bits of data.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_INT_LEVEL</name>
              <description>
                Program to the level that you want RX_FIFO_HIT_LEVEL to be set. If this reg is 2, then RX_FIFO_HIT_LEVEL will be set if the number of entries in RX_FIFO are 2 or greater. Similarly
this defines how many entries available in the TX FIFO for the TXFIFO_HAS_LEVEL_SPACE to be set.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_RXFIFO_AT_START</name>
              <description>
                Typically, the RX FIFO requires a CMD fron the CMD_FIFO_DATA to enable RX FIFO. Setting this bit to 1 changes the default to 1. The RX FIFO can still be disabled using a CMD.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BYTE2_END</name>
              <description>
                Only used for 2 or 4 byte transfers. If 0, DATA[15:8] is receive on SDA before DATA[7:0]. If 1, vice versa.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>END</name>
              <description>
                If 0, transmit msbit first. If 1 send lsbit first.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STALL_IF_RXFULL</name>
              <description>
                If 1, the TX side will stall if RX FIFO is full.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IGNORE_NACK</name>
              <description>
                If 0, an unexpected NACK will lockup the system and require a soft reset to exit. If 1, all NACKs are ignored.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RD_PUSHES_TX_FIFO</name>
              <description>
                If set to 1, the TX FIFO will empty as normal, but for every read pop that occurs, a new TX will be pushed into the FIFO. This is good for DMA.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TXRX_1BYTE_FIFO_DATA</name>
          <description>
            I2C read and write data register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Reads return receive data from I2C. Writes send data to transmit of I2C.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STATUS</name>
          <description>
            I2C status register. Note that ANDing this field with INT_EN will give you unmasked interrupts.
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE</name>
              <description>
                If 1, the command is done and the SM is idle. This is the inverse of START_BUSY provided here to make interrupt access cleaner.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_FIFO_HIT_LEVEL</name>
              <description>
                If 1, then there is at least CONFIG.RX_FIFO_INT_LEVEL Byte(s) of data waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XMIT_COMPLETE</name>
              <description>
                If 1, all current transmits (data and cmd) are complete, but there may still be a command operation (e.g. stop) pending. See START_BUSY for a true end of command status.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RXFIFO_HAS_1DATA</name>
              <description>
                If 1, then there is data waiting in RX FIFO. Read TXRX_1BYTE_FIFO_DATA to get data.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_1SPACE</name>
              <description>
                If 1, then there is space to put onto the TX FIFO queue by writing to TXRX_1BYTE_FIFO_DATA. If 0, there isn't.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE</name>
              <description>
                If 1, then there is space to put If 1, then there is at least CONFIG.RX_FIFO_INT_LEVEL Byte(s) of space available on TX_FIFO. If 0, there isn't.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SM_IN_NACK_HOLD</name>
              <description>
                We have detected an unexpected NACK and the state machine has halted. It can be continued on with its original sequence
by setting STATUS.NACK_ESCAPE or it can be reset by writing CONFIG.SOFT_RESET.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NACK_ESCAPE</name>
              <description>
                If an unexpected NACK is received, the SM stalls allowing for debug. The SM can be unfrozen by writing 1 to this location after
it is in the unexpected NACK stall and will continue with its previous command. Use CONFIG.SOFT_RESET to abort the command in
progress.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>START_BUSY</name>
              <description>
                Write to 1 to start transaction. Read back to determine if the SM is START_BUSY (1) or if has gone back to idle (0).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_FIFO_DEBUG</name>
          <description>
            I2C tx fifo debug register
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. Newest entries are dropped. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_FIFO_DEBUG</name>
          <description>
            I2C rx fifo debug register
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_ENTRIES</name>
              <description>
                Depth of FIFO, i.e. the max number of entries possible in FIFO.
              </description>
              <bitRange>[12:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UFLOW</name>
              <description>
                Set when TX FIFO underflows. Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                Set when TX FIFO overflows. See CONFIG.RX_OVFLW_KEEPHEAD for details on drop behavior.  Cleared by setting CONFIG2.CLR_STICKY
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENTRIES</name>
              <description>
                Entries in FIFO.
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>GENERAL_DEBUG</name>
          <description>
            I2C General Debug Fields
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LAST_BYTE_HAD_NACK</name>
              <description>
                If 1, the last byte on the wire had a NACK. This bit is cleared and
reevaluated when the state machine the next time the SM checks for a
NACK (i.e. on the next byte).
The bit will be set if the master or slave does not acknowlege for
any reason.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONITOR_SDA</name>
              <description>
                If 0, we monitor SCL. If 1 we monitor SDA.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONITOR_EN</name>
              <description>
                If 0, the Rise Time debug monitor is disabled and the RISE_TIME_DEBUG.VALUE will be zeroed out. If 1, then the monitor records the time from the internal SDA_OEN or SCL_OEN
(selected by MONITOR_SDA) to determine the rise time and effecetive pull stretngth of the external PUs. Each value in the monitor is
a CLKIN. Note that the monitor will count delays from metastable flops or hystersis avoidance flops as additional rise time.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EN_BIT_BANG</name>
              <description>
                If set, the BB_SDA_OEN, and BB_SCL_OEN control the I2C interface.
The internal SM has no effect and can be placed in SOFT_RESET. However, the
CONFIG2.CLK_ON bit should be set, or else the clock may gate off due to apparent
quiescence.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SDA_OEN</name>
              <description>
                Value to drive on SDA_OEN. Signal is active low, so a 0 will drive I2C low. A high will let it float via PU to 1.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BB_SCL_OEN</name>
              <description>
                Value to drive on SCL_OEN. Note that if SCL_CONFIG.HARD_DRIVE_SCL is set, this bit actually controlls SCL_OUT and SCL_OEN is set low (always driving)
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STRETCH_ACTIVE</name>
              <description>
                If this is set, the internal logic belives the SCL is being driven low by an external force (i.e. clock stretching)
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SDA_LOCAL</name>
              <description>
                Live input value of SDA (after meta stable and glitch filter flops)
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SDA_OEN</name>
              <description>
                Value of Output Enable (active low) of SDA. If nothing else is driving the line, this is what the line should be at steady state.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SCL_LOCAL</name>
              <description>
                Live input value of SCL (after meta stable and glitch filter flops)
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C_SCL_OEN</name>
              <description>
                Value of Output Enable (active low) of SCL. If nothing else is driving the line, this is what the line should be at steady state.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE_REG</name>
              <description>
                Current state of primary State Machine
              </description>
              <bitRange>[4:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_EN</name>
          <description>
            I2C Interrupt Enable Registger. Note that ANDing this field with STATUS will give you unmasked interrupts.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_EN_SRCRDY</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for i2c_src_rdy. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD14</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN_SRCRDY</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for i2c_src_rdy. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN_DSTRDY</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt for i2c_dst_rdy. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN_DSTRDY</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an interrupt for i2c_dst_rdy. Writing to TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD9</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[10:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE</name>
              <description>
                If set to 1, the STATUS field CMD_DONE going high will be accelerated into an interrupt for i2c_int. Note this will be high until the cmd is started. If the system is idle, there is no way to clear the interrupt other than disabling it here.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_EN</name>
              <description>
                If set to 1, the STATUS field RX_FIFO_HIT_LEVEL will be accelerated into an interrupt for i2c_int. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_COMPLETE_EN</name>
              <description>
                If set to 1, the STATUS field XMIT_COMPLETE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_EN</name>
              <description>
                If set to 1, the STATUS field RXFIFO_HAS_DATA will be accelerated into an interrupt for i2c_int. Reading from TXRX_1BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the RX FIFO is now empty.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_EN</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_SPACE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA will cause this to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_EN</name>
              <description>
                If set to 1, the STATUS field TXFIFO_HAS_LEVEL_SPACE will be accelerated into an interrupt for i2c_int. Writing to TXRX_1BYTE_FIFO_DATA or RX_2BYTE_FIFO_DATA or RX_4BYTE_FIFO_DATA will force the interrupt to go low for at least one cycle, perhaps more if the TX FIFO fills.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNACK_EN</name>
              <description>
                If set to 1, the STATUS field SM_IN_NACK_HOLD will be accelerated into an interrupt for i2c_int. Note this will be high until the NACK is processed either with a
STATUS.NACK_ESCAPE or a CONFIG2.SOFT_RESET
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CMD_FIFO_DATA</name>
          <description>
            I2C command FIFO. Writes to this FIFO go into the TX_FIFO and are executed in series with the DATA pushed in TXRX_1BYTE_FIFO_DATA. By using the CMD
and DATA entries, different sequences can be setup to imelement write, read commands, as well as start / stop seqeuences. Note that the commands
generally take effect around the ACK time for the PREVIOUS byte. Multiple commands can be combined into a single write with the exception of the
dummy byte, which must be a command by itself.
 As an example, a Adesto RM24C32C is a SEEPROM that uses 2 address bytes (called A0 and A1) below. Assuming it has its device
address bits configured as 0, then a typical write of two bytes of data (0xD0, 0xD1) command would be:
 Write 0xa4 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Write
 Write 0xa0 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xa1 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xd0 to TXRX_1BYTE_FIFO_DATA                 // Data0
 Write 0xd1 to TXRX_1BYTE_FIFO_DATA                 // Data1
 Write 0x04 to CMD_FIFO_DATA                        // Issue STOP
 A typical random read (which involes writing the desired address and then triggering a restart to read the data) of the same data would be:
 Write 0xa4 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Write
 Write 0xa0 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0xa1 to TXRX_1BYTE_FIFO_DATA                 // SEEPROM Address
 Write 0x01 to CMD_FIFO_DATA                        // Issue Restart
 Write 0xa5 to TXRX_1BYTE_FIFO_DATA                 // Device ID, Read
 Write 0xff to TXRX_1BYTE_FIFO_DATA                 // Dummy data (will be filled in by remote side)
 Write 0xd0 to CMD_FIFO_DATA                        // Issue command to drive NACK to 0 and enable RX FIFO
 Write 0xff to TXRX_1BYTE_FIFO_DATA                 // Dummy data (will be filled in by remote side)
 Write 0x34 to CMD_FIFO_DATA                        // Send NACK=1 on last read and issue STOP

 For longer reads, it is probably peferable to use the dummy byte cmd to fill in the dummy data. However, note that to trigger the NACKs
and other commands correctly, the first and probably last dummy data should be manually entered (last is optional, but it is considered
good protocol to issue a NACK=1 on the last byte of data read by master).
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_RXFIFO</name>
              <description>
                Controls when data on the I2C line is driven into RX_FIFO.
              </description>
              <bitRange>[7:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Leave NACK at its previous state. When STATUS.START_BUSY is written, the NACK bit is set high meaning the master will not drive the NACK low to acknowledge.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE_RXFIFO</name>
                  <description>
                    All bytes received AFTER this command will be not be sent to the RX_FIFO.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE_RXFIFO</name>
                  <description>
                    All bytes received AFTER this command will bebe sent into the RX_FIFO. Typically used for reads.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_NACK</name>
              <description>
                Controls the master driving the NACK bit.
              </description>
              <bitRange>[5:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Leave NACK at its previous state. When STATUS.START_BUSY is written, the NACK bit is set high meaning the master will not drive the NACK low to acknowledge.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DRIVE_NACK_LOW</name>
                  <description>
                    All bytes from this point forward will be acknowledged by the master (typically used for reads)
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DRIVE_NACK_HIGH</name>
                  <description>
                    All bytes from this point forward will not be acknowledged by the master (typically used for the last read which is NACK'd to tell slave we're done reading)
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EXP_1NACK</name>
              <description>
                Writes this bit to ignore a negative ACK for the PREVIOUS data transfer. Not that this is required if the slave does not acknlowedge or if the
master does not set the ACK bit low. Without this bit, an unexpected NACK will land the SM in a hold state (see STATUS.SM_IN_NACK_HOLD for more details).
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_SRD</name>
              <description>
                These two bits control sending either a STOP, RESTART or a set of dummy bytes. Obviously, you can only send one of the three (or send nothing).
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NOTHING</name>
                  <description>
                    Finish current data byte and begin an I2C RESTART sequence.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESTART</name>
                  <description>
                    Finish current data byte and begin an I2C RESTART sequence.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>STOP</name>
                  <description>
                    Finish current data byte and begin an I2C STOP sequence.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DUMMYBYTE</name>
                  <description>
                    If this is set, DUMMY_BYTES worth of dummy bytes (0xff) are "transmitted". This is very useful for read operations where you need to trigger
a number of byte transfers, but you don't want to feed 1 byte into the TX_FIFO for each one. Once this command is set, the DUMMY bytes will
fill the TX FIFO. Until those bytes finish, it is dangerous to write to the CMD FIFO, the DATA FIFO or to the DUMMY_BYTES register.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONFIG2</name>
          <description>
            I2C configuration2 register.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SCL_HYSTERSIS</name>
              <description>
                0 is the normal, recommended flow. If 1, all SCL hysterisis is disabled. See SCL_HYSTERISIS_LEVEL for more info.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SCL_HYSTERISIS_LEVEL</name>
              <description>
                Due to the nature of I2C, the signals are susceptible to noise, especially during the I2C "high" when it is weakly
driven by a pull up resistor. The IP supports a hysterisis module that samples the input SDA and SCL signal
signals to ensure they are stable before seen by the
internal logic. This glitch avoidance circuit adds latency to the receive signals, which can slow down the overall
I2C period. For this reason, the hysterisys level is configureable from this register. Set to 0x0 to get the full 16
CLK hysterisis, 0x1 for 15 CLK hystersis, 0x2 for 14 CLK hysteris and up to value 0xf for 1 CLK hysteris.
To fully disable hystersis, set DISABLE_SCL_HYSTERSIS
              </description>
              <bitRange>[13:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AGGR_CLK_GATING</name>
              <description>
                If set to 1, a more aggressive clock gating scheme is enacted that will clock the gate even if the command is
still in flight, but the FIFOs, etc. have emptied (i.e. processor has starved FIFOs). If 0, we only gate
when the command is complete.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLK_ON</name>
              <description>
                This bit provides an override to the clock gate enable. If 0, the clock will only run if the local state machine is busy. If 1, the clock will always run.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SOFT_RST</name>
              <description>
                If 1, all FIFO / SM in I2C will be held in reset. If 0, normal operation. To do a soft reset, you must write this to 1 and then back to 0 to remove the reset.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLR_STICKY</name>
              <description>
                If 1, clear sticky bits in registers. If 0, normal operation. To do a soft reset, you must write this to 1 and then back to 0 to remove the reset.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_METAFLOP</name>
              <description>
                0 is the normal, recommended flow. If 1, the 2 CLKIN delay of SDA and SCL is bypassed allowing for faster operation at the risk of metastablity if SDA and SCL changes near sample time. Normally SDA and SCL should change with >100 ns setup / hold, so it may be a viable risk.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SDA_HYSTERSIS</name>
              <description>
                0 is the normal, recommended flow. If 1, all SDA hysterisis is disabled. See SDA_HYSTERISIS_LEVEL for more info.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SDA_HYSTERISIS_LEVEL</name>
              <description>
                Due to the nature of I2C, the signals are susceptible to noise, especially during the I2C "high" when it is weakly
driven by a pull up resistor. The IP supports a hysterisis module that samples the input SDA and SCL signal
signals to ensure they are stable before seen by the
internal logic. This glitch avoidance circuit adds latency to the receive signals, which can slow down the overall
I2C period. For this reason, the hysterisys level is configureable from this register. Set to 0x0 to get the full 16
CLK hysterisis, 0x1 for 15 CLK hystersis, 0x2 for 14 CLK hysteris and up to value 0xf for 1 CLK hysteris.
To fully disable hystersis, set DISABLE_SDA_HYSTERSIS
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG1</name>
          <description>
            I2C Clock Config Register 1
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IBG_TIME</name>
              <description>
                The delay bewteen each byte will be (IBG_TIME+1) * CLKIN period (125ns).
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CYCLE_TIME</name>
              <description>
                Controls I2C clock rate. Several registers control the I2C clock speeds giving maximum flexibility. Each
register defines the time that an I2C event occurs on against a counter going from 0 to cycle_time.
Legitimate values for each counter are from 0 to 127. Each bit is an
additional CLKIN cycle (125ns). The overal speed is derived from the cycle_time, so if cycle_time is 0x4f, then
the overall period would be (0x4f+1)*125ns = 10us or a 100KHz period.

There are registers to control when I2C_CLK is driven high (pe_time) and when to drive the I2C_CLK low (ne_time). There
are registers to define when data is driven
onto the line from the IP (tx_time), when data from the remote slave is sampled (rx_time). The values in
these registers should be programmed according to I2C protocol, e.g. setting tx_time in between pe_time and ne_time would
likely not be productive. Additionally, there is an inter byte gap time (ibg_time).

Nothing in the logic checks for incorrect values.


Assuming CLKIN is 4MHz, this would be a reasonable configuration for 100KHz.
 cycle_time = 0x27
 pe_time    = 0x10
 ne_time    = 0x1f
 tx_time    = 0x01
 rx_time    = 0x19
 min_scl    = 0x04
 hyst_level = 0x08


Assuming CLKIN is 4MHz, this would be a reasonable configuration for 400KHz.
 cycle_time = 0x09
 pe_time    = 0x04
 ne_time    = 0x08
 tx_time    = 0x01
 rx_time    = 0x05
 min_scl    = 0x00
 hyst_level = 0x01


Note that the follow events are derived from csr times in the sequence
 START_SDA_LOW - pe_time
 START_SCL_LOW - ne_time
 STOP_SDA_HIGH - tx_time
 STOP_SCL_HIGH - pe_time
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG2</name>
          <description>
            I2C Clock Config Register 2
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLK_CONFIG3</name>
          <description>
            I2C Clock Config Register 3
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NE_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PE_TIME</name>
              <description>
                See CLK_CYCLE.TIME_VAL.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SCL_CONFIG</name>
          <description>
            I2C SCL Config Register
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_FULL_STRETCH_SUPPORT</name>
              <description>
                This is a debug bit and should not be set under normal circumstances.
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLE_SCL_HIGH_CHK</name>
              <description>
                If this bit is set, then the logic ignore the current input state of the SCL and by extention, disable the metastability FF on the SCL.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HARD_DRIVE_SCL</name>
              <description>
                If this bit is cleared,the SCL is driven low and then a weak PU pulls the SCL high. If this bit is set
the SCL will be driven low and high. This allows for better defined rise times on SCL and for the
removal of a potentially low resistance PU on the SCL line. However, if this bit is set it effectively
disables clock stretching.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD7</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MIN_SCL_HIGH</name>
              <description>
                In the case where clock stretching deforms the programmed release of SCL so it is pulled high,
the SCL can have a much shorter width. This register defines that minimum width. Note that
the metastable FF (1 to 2 clocks) and glitch avoidance logic (0-16 clocks) and the MIN_SCL_HIGH
are effectively added together to form the SCL high as seen by the outside world. So if the
glitch avoidance is set to 16 and CLKIN is 8MHz, then the SCL will be high for at least 2.125 ns
plus 125ns * MIN_SCLK_HIGH.
              </description>
              <bitRange>[6:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_2BYTE_FIFO_DATA</name>
          <description>
            I2C read and write data register.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                2 byte reads return receive data from I2C. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received. By setting CONFIG.BYTE2_END,
this order can be reversed.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RX_4BYTE_FIFO_DATA</name>
          <description>
            I2C read data register. Note this register is disabled in DSP instances.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                4 byte reads return receive data from I2C. Writes have no effect.
By default, data is returned little endian so bit [7:0] will have the first byte that was
received, bit [15:8] will have the second byte received, etc. up to bit [31:24] having the
fourth byte received. By setting CONFIG.BYTE2_END, this order can be reversed.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RISE_TIME_DEBUG</name>
          <description>
            I2C rise debug register
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                When Monitor Enabled, this is the most recent time
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DUMMY_BYTES</name>
          <description>
            I2C Dummy byte register
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                This is the number of dummy bytes to send when called out in the CMD_FIFO_DATA when CMD_STOP_RESTART_DUMMY is set to DUMMYBYTE. At that point, the
DATA FIFO and CMD will begin to be filled with dummy bytes (0xff) and will not be available for writes until the dummy bytes complete. You can
read this register to determine when all of the dummy bytes are pushed into the FIFO or STATUS.XMIT_COMPLETE for when the entire TX_FIFO has
transmitted its data. Modifying this value after the DUMMYBYTE command has been issued has an unknown effect.
              </description>
              <bitRange>[15:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TX_1BYTE_DATA_CMD_FIFO</name>
          <description>
            Note this register is only enabled in DSP instances and is intended
to support DMA transactions.
Writing this register has a similar effect to writing
TXRX_1BYTE_FIFO_DATA followed by a write to CMD_FIFO_DATA, but it is
done in a single write. Note that if the CMD is all 0 (i.e. a nop),
this does not actually push an entry onto the CMD_FIFO. Note too that
a single write to this register can push two entries onto the FIFO,
so be sure to have at least 2 entries in FIFO before writing
          </description>
          <addressOffset>0x50</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD32</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD</name>
              <description>
                A non-zero write to this location is similar to writing it to CMD_FIFO_DATA. A all zero write has no effect. Reads return all 0.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                Write data to this location is similar to writing it to TXRX_1BYTE_FIFO_DATA. Reads return all 0.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_ACT</name>
          <description>
            I2C Active Interrupts. This is effectively STATUS ANDed with INT_EN
          </description>
          <addressOffset>0x54</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD9</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CMD_DONE_ACT</name>
              <description>
                STATUS.CMD_DONE is set and active
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_HIT_LEVEL_ACT</name>
              <description>
                STATUS.RX_FIFO_HIT_LEVEL is set and active
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_COMPLETE_ACT</name>
              <description>
                STATUS.XMIT_COMPLETE is set and active
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RX_DATA_ACT</name>
              <description>
                STATUS.RXFIFO_HAS_DATA is set and active
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TX_DATA_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_SPACE is set and active
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TXFIFO_HAS_LEVEL_SPACE_ACT</name>
              <description>
                STATUS.TXFIFO_HAS_LEVEL_SPACE is set and active
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNACK_ACT</name>
              <description>
                STATUS.SM_IN_NACK_HOLD is set and active
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>ADC</name>
      <version>1.0</version>
      <description>
        The ADC AHB interface provides programming control of the analog to digital converter.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x50050000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x100</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>ADC</name>
        <value>13</value>
        <description>ADC Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>CNTRL</name>
          <description>
            This register provides configuration control and status information for the ADC.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CAPTURE_CNT</name>
              <description>
                Count for time to wait while the sample and hold circuit is sampling the signal before the conversion is started. WHile the counter continues, the trigger signal will be held low. This counter runs on a 1MHz clock.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFTRST</name>
              <description>
                Write a once to this bit to force a soft reset to this block.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GRAB_DELAY</name>
              <description>
                This bit field controls whent the data from the ADC is grabbed and used.
              </description>
              <bitRange>[6:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>IMMED</name>
                  <description>
                    No delay added
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>1CLK</name>
                  <description>
                    Delay by 1 additonal clock.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>2CLK</name>
                  <description>
                    Delay by 2 additonal clocks.
                  </description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>3CLK</name>
                  <description>
                    Delay by 3 additonal clocks.
                  </description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA</name>
              <description>
                Set this bit to one to enable the transfer of data over to the DSP for DMA access.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    No DSP transfers are generated.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    DSP transfers are generated.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIODIC</name>
              <description>
                Set this bit to one to enable periodic sampling instead of firmware triggered one shot samples.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    No periodic clock selected. Use firmware trigger register.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Use selected periodic clock from input port to trigger a conversion cycle.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>CALIBRATE</name>
              <description>
                Set to one to enable calibration mode. Essentilly the differential inputs are tied together so that the offset voltage as expressed a digital ADC count can be measure by firmware. A number of conversions should be performed and the results should be averaged.  NOTE: once the calibration offset has been measured, the computed value is subtracted from each successive sample after firmware reads the value in from the ADC. This is accomplished by writing the average offset value to the OFFSET register.  Hardware performs a saturated add of the offset. A further NOTE, the calibration controls are ahead of the sample and hold circuit so turn it off before attempting to capture any input into the sample and hold that you intend to convert and use.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>OFF</name>
                  <description>
                    Calibration mode disabled. This is the normal operating mode.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ON</name>
                  <description>
                    Calibration mode on. Essentially the differential inputs are shorted together to measure offset voltage.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>MODE</name>
              <description>
                Set to one to enable the the ADC to operate and perform captures and conversions. Set to zero to disable this block.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>SLEEP</name>
                  <description>
                    ADC interface disabled and in lowest power state. NOTE the ADC voltage plain may still be on.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RUN</name>
                  <description>
                    Enable the normal operation of the ADC block.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_EN</name>
              <description>
                Set to one to enable interrupts to the NVIC.  Interrupts will then be asserted when INT_STAT is a one.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    ADC interrupts are disabled and can't reach the NVIC.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    ADC interrupts are enabled and if they occur they will be routed to the NVIC.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CLOCK_DIV</name>
          <description>
            Clock divider register.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                Divider for the 1 MHz input clock. When the divider count reaches zero, it is reloaded and an ADC conversion is triggered.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SRC</name>
          <description>
            This register controls the source mux and differential configurations for the ADC.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEL</name>
              <description>
                Sets the channel selector for the analog mux.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>CHAN0</name>
                  <description>
                    Channel #0
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>CHAN1</name>
                  <description>
                    Channel #1
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TOGGLE</name>
              <description>
                Selects the analog channel based on the state of the ADC TOGGLE register instead of the SOURCE MUX SELECT.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>TOGGLE</name>
                  <description>
                    Use ADC TOGGLE as source for selector.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>REGISTER</name>
                  <description>
                    Use SOURCE MUX SELECT as source for selector.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DIFF</name>
              <description>
                Set this bit to 1 for differential source pair.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    Enabled.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    Disabled.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>INT_STAT</name>
          <description>
            This register contains the one interrupt status bit
          </description>
          <addressOffset>0xc</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SFIFO</name>
              <description>
                Set to one when the SFIFO is greater the configured low marker. Write a one to this register to clear the interrupt status bit.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Set to one when a conversion is complete and data is ready to read from the SAMPLE register. Write a one to this register to clear the interrupt status bit.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>START</name>
          <description>
            Writing anything to this register initiates the capture and conversion of an analog sample.  When an ADC conversion is started, the state machine lowers the trigger pin for the required sample time. It then raises the trigger signal and resets this bit. NOTE: this register is not used in periodic mode. In that case, a trigger is automatically generated from the periodic counter.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NOW</name>
              <description>
                Write anything to this bit field to start a conversion. This bit is essentially part of the state machine and is implemented over there. Once written it will read back as a one until the end of the sample period when the conversion is started. Once the hold and conversion portion of the ADC operation is begun this bit is cleared back to 0.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SAMPLE</name>
          <description>
            This register returns the results of one analog to digital conversion. Reading this register as a 16-bit halfword gives access to the sample value and a single overflow indication bit.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW</name>
              <description>
                If this bit field returns a value of 1, then an overflow occured in analog, or in the digital processing. The offset value can also cause an overflow.  One can examine the RAW sample in the DEBUGB register for exact details on an overflow condition, if necessary. NOTE: This report must be enabled in the configuration register to be seeen here.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DATA</name>
              <description>
                This bit field returns the post processed 12-bit ADC sample. The post processing improves the ENOB.
              </description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>OFFSET</name>
          <description>
            This register holds the signed 12 bit value (really 13 bits) that will be added to the 12 bit corrected value before presenting it to the user in the sample register. Be sure to clear this register before attempting to measure the offset in calibration mode.  The results of adding this value to the corrected value will be saturated at both 0xFFF and 0x000. No unexpected wrapping from high to low or low to high ADC values will occur when correcting the offset.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALUE</name>
              <description>
                Once the offset value is determined in calibration mode, set the negative value of that offset into this 13 bit bit field. The MSB is a sign bit.
              </description>
              <bitRange>[12:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUGA</name>
          <description>
            This register provides read and write access to debug and diagnostic information.
          </description>
          <addressOffset>0x1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>COLLECTOR</name>
              <description>
                This read only bit solves a synthesis problem by collecting some automatically generated signals into one load.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>POSTPROC</name>
              <description>
                Set this bit to one to enable the 12 bit post processed conversion information, the ADC start signal, and the ADC done signal directly to chip pads for testing. The 12 bit post processed value is output instead of the 20 bit raw value.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY_TOG</name>
              <description>
                This bit provides a read only view of the data ready toggled signal for the DSP.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DONE</name>
              <description>
                Read only view of the conversion completion (DONE) signal from the analog side.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TRIGGER</name>
              <description>
                Read only view of the trigger signal which goes low to capture the sample  in the sample and hold and goes back high to trigger a conversion.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUGB</name>
          <description>
            This register provides read only access to debug and diagnostic information.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>FINAL_VALUE</name>
              <description>
                This bit field returns the post processed 12-bit ADC sample. The post processing improves the ENOB.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RAW_VALUE</name>
              <description>
                Read only view of the raw 20 bit conversion result. If a single conversion is performed then this value will show the results of that last conversion.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DEBUGC</name>
          <description>
            This register provides read only access to debug and diagnostic information.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PERIODIC_CNT</name>
              <description>
                Shows the current value of the periodic counter.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DBG_READ_ONLY</name>
          <description>
            This register provides a read only test value for checking IP connectivity to AHB.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>
                Shows the current value of the periodic counter.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SFIFO_CFG</name>
          <description>
            Configuration register for the sample FIFO.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FULL</name>
              <description>
                Set the level above which the sample FIFO will trigger an interrupt.
              </description>
              <bitRange>[7:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CLR</name>
              <description>
                Set this bit to clear the SFIFO.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INT_EN</name>
              <description>
                Enable the sample FIFO full interrupt.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENABLE</name>
              <description>
                Set this bit to enable the SFIFO.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SFIFO</name>
          <description>
            WARNING: READ SIDE EFFECT.This register provides a read interface for the sample FIFO. A 32-bit read pops a maximum of two samples off the FIFO. A 16-bit read to the lower half of the register pops one sample off the FIFO. An 8-bit read does nothing. Check the associated VALID bit to know if a SAMP field contains a valid sample.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALID1</name>
              <description>
                Indicates whether SAMP1 contains valid data.
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[29:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW1</name>
              <description>
                Overflow bit for SAMP1.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SAMP1</name>
              <description>
                The value of the second sample out of the FIFO.
              </description>
              <bitRange>[27:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LOST</name>
              <description>
                Indicates whether at least one sample was lost due to FIFO overflow.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VALID0</name>
              <description>
                Indicates whether SAMP0 contains valid data.
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>OFLOW0</name>
              <description>
                Overflow bit for SAMP0.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SAMP0</name>
              <description>
                The value of the first sample out of the FIFO.
              </description>
              <bitRange>[11:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SFIFO_STAT</name>
          <description>
            Status register for the sample FIFO.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LOW</name>
              <description>
                Indicates if the size of the sample FIFO is above the SFIFO_CFG_FULL interrupt level.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOW</name>
                  <description>
                    Low.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>EMPTY</name>
              <description>
                Indicates if the sample FIFO is empty.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>EMPTY</name>
                  <description>
                    Empty.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>FULL</name>
              <description>
                Indicates if the sample FIFO is full.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>FULL</name>
                  <description>
                    Full.
                  </description>
                  <value>1</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>SIZE</name>
              <description>
                Current consumption of the sample FIFO from 0 -> 15. Check FULL to see if consumption is 16.
              </description>
              <bitRange>[3:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TOGGLE</name>
          <description>
            When in periodic mode the ADC toggle register toggles halfway through every period. This register can be driven on CLKOUT or used to select the source of the internal analog MUX. See the CLKOUT register in the RTC register file or the TOGGLE bit of the SRC register respectively.
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STATE</name>
              <description>
                The current state of the ADC toggle register. Can be written with an initial value.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>NVIC</name>
      <version>1.0</version>
      <description>
        The Nested Vectored interrupt Controller
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0xE000E000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x4000</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>EISER0</name>
          <description>
            Set Interrupt Enable Bits [31:0]
          </description>
          <addressOffset>0x100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                RSVD
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW3</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW2</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Enable for external Interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EICER0</name>
          <description>
            Clear Interrupt Enable Bits [31:0]
          </description>
          <addressOffset>0x180</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                RSVD
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW3</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW2</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Clear enable for external Interrupt
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EISPR0</name>
          <description>
            Interrupt Set Pending Register 0 Bits [31:0]
          </description>
          <addressOffset>0x200</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                RSVD
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW3</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW2</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Set interrupt pending bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EICPR0</name>
          <description>
            Interrupt Clear Pending Register 0 Bits [31:0]
          </description>
          <addressOffset>0x280</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                RSVD
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW3</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW2</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Clear interrupt pending bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIABR0</name>
          <description>
            Interrupt Active Bits Register 0 Bits [31:0]. These bits indicate which vectors are active.
          </description>
          <addressOffset>0x300</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                RSVD
              </description>
              <bitRange>[31:22]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW3</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW2</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SW0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AO_BOD</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC_TMR</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WDT</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PWM</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ADC</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RTC0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>I2C0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SPI0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UART0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMER0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO1</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GPIO0</name>
              <description>
                Interrupt active status bit
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR0</name>
          <description>
            Interrupt Priority Setting Register  for vectors [3:0]
          </description>
          <addressOffset>0x400</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V3</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V2</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V1</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V0</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR1</name>
          <description>
            Interrupt Priority Setting Register  for vectors [7:4]
          </description>
          <addressOffset>0x404</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V7</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V6</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V5</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V4</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR2</name>
          <description>
            Interrupt Priority Setting Register for vectors [11:8]
          </description>
          <addressOffset>0x408</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V11</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V10</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V9</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V8</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR3</name>
          <description>
            Interrupt Priority Setting Register for vectors [15:12]
          </description>
          <addressOffset>0x40c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V15</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V14</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V13</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V12</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR4</name>
          <description>
            Interrupt Priority Setting Register for vectors [19:16]
          </description>
          <addressOffset>0x410</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V19</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V18</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V17</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V16</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR5</name>
          <description>
            Interrupt Priority Setting Register for vectors [23:20]
          </description>
          <addressOffset>0x414</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V23</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V22</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V21</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V20</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR6</name>
          <description>
            Interrupt Priority Setting Register for vectors [27:24]
          </description>
          <addressOffset>0x418</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V27</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V26</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V25</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V24</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>EIPLR7</name>
          <description>
            Interrupt Priority Setting Register for vectors [31:28]
          </description>
          <addressOffset>0x41c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_V31</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V30</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V29</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_V28</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ICSR</name>
          <description>
            Interrupt Control and State
          </description>
          <addressOffset>0xd04</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>NMIPENDSET</name>
              <description>
                NMI Pended
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[30:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PENDSVSET</name>
              <description>
                Write 1 to pend system call; Read value indicates pending status
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PENDSVCLR</name>
              <description>
                Write 1 to clear PendSV pending status
              </description>
              <bitRange>[27:27]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PENDSTSET</name>
              <description>
                Write 1 to pend systick exception; Read value indicates pending status
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PENDSTCLR</name>
              <description>
                Write 1 to clear Systick pending status
              </description>
              <bitRange>[25:25]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ISRPREEMPT</name>
              <description>
                Indicate that a pending interrupt is going to be active in next step (for debug)
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ISRPENDING</name>
              <description>
                external interrupt pending (excluding system exceptions like NMI for fault)
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VECTPENDING</name>
              <description>
                Pending ISR number
              </description>
              <bitRange>[21:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RETTOBASE</name>
              <description>
                Set to 1 when the processor is running an exception handler and will return to thread level if interrupt return and no other exceptions pending
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[10:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VECTACTIVE</name>
              <description>
                Current running interrupt service routine
              </description>
              <bitRange>[8:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>AIRCR</name>
          <description>
            Application Interrupt and Reset Control
          </description>
          <addressOffset>0xd0c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>VECTKEY</name>
              <description>
                Access key; 0x05FA must be written to this field to write to this register; the read back value is 0xFA05.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ENDIANESS</name>
              <description>
                endianness for data; 1 for big, 0 for little.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:11]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRIGROUP</name>
              <description>
                Priority group
              </description>
              <bitRange>[10:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SYSRESETREQ</name>
              <description>
                Request chip control logic to generate a reset
              </description>
              <bitRange>[2:2]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VECTCLRACTIVE</name>
              <description>
                Clear all active state information for exceptions; typically used in debug or OS to allow system to recover from system error (Reset is safer)
              </description>
              <bitRange>[1:1]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VECTRESET</name>
              <description>
                Reset CortexM3 (except debug logic); will not reset circuits outside the processor
              </description>
              <bitRange>[0:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SCR</name>
          <description>
            System Control
          </description>
          <addressOffset>0xd10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEVONPEND</name>
              <description>
                Send Event on Pending.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLEEPDEEP</name>
              <description>
                Enable SLEEPDEEP output signal when entering sleep mode.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SLEEPONEXIT</name>
              <description>
                Enable SLEEPDEEP on exit feature
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CCR</name>
          <description>
            Configuration Control
          </description>
          <addressOffset>0xd14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STKALIGN</name>
              <description>
                Force exception stacking start in double word aligned address.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BFHFNMIGN</name>
              <description>
                Ignore data bus fault during hard fault and NMI handlers
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIV_0_TRP</name>
              <description>
                Trap on divide by 0
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNALIGN_TRP</name>
              <description>
                Trap on unaligned access
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>USERSETMPEND</name>
              <description>
                If set to 1, allow user code to write to Software Trigger Interrupt register
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NONBASETHRDENA</name>
              <description>
                Nonbase Thread Enable. If set to 1, allows exception handler to return to thread state at any level by controlling return value.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEPLR0</name>
          <description>
            System Exceptions Priority Setting Register for mm/bus/usage fault
          </description>
          <addressOffset>0xd18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_6</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_5</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_4</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEPLR1</name>
          <description>
            System Exceptions Priority Setting Register for SVC
          </description>
          <addressOffset>0xd1c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_11</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEPLR2</name>
          <description>
            System Exceptions Priority Setting Register for debug monitor/PendSV/SYSTICK
          </description>
          <addressOffset>0xd20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>PRI_15</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[31:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_14</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[23:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PRI_12</name>
              <description>
                Bit [7:5] sets the priority level from 0 to 7.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SHCSR</name>
          <description>
            System Handler Control and State
          </description>
          <addressOffset>0xd24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>USGFAULTENA</name>
              <description>
                Usage fault handler enable
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSFAULTENA</name>
              <description>
                Bus fault handler enable
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEMFAULTENA</name>
              <description>
                Memory Management fault handler enable
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SVCALLPENDED</name>
              <description>
                SVC pended; SVC is started but was replaced by a higher priority exception
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSFAULTPENDED</name>
              <description>
                bus fault pended; bus fault is started but was replaced by a higher priority exception
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEMFAULTPENDED</name>
              <description>
                mm fault pended; mm fault is started but was replaced by a higher priority exception
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>USGFAULTPENDED</name>
              <description>
                usage fault pended; usage fault is started but was replaced by a higher priority exception
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SYSTICKACT</name>
              <description>
                Read as 1 if SYSTICK exception is active
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PENDSVACT</name>
              <description>
                Read as 1 if PendSV exception is active
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MONITORACT</name>
              <description>
                Read as 1 if debug monitor exception is active
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SVCALLACT</name>
              <description>
                Read as 1 if SVC exception is active
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>USGFAULTACT</name>
              <description>
                Read as 1 if USGFAULTACT exception is active
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BUSFAULTACT</name>
              <description>
                Read as 1 if BUSFAULTACT exception is active
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MEMFAULTACT</name>
              <description>
                Read as 1 if MEMFAULTACT exception is active
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CFSR</name>
          <description>
            Read the fault status, write to clear the fault
          </description>
          <addressOffset>0xd28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DIVBYZERO</name>
              <description>
                Indicate divide by zero takes place (can only set if DIV_0_TRP is set)
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNALIGNED</name>
              <description>
                Indicate unaligned access takes place (can only set if UNALIGN_TRP is set)
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                not used
              </description>
              <bitRange>[23:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NOCP</name>
              <description>
                Attemps to execute a coprocessor instruction
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INVPC</name>
              <description>
                Attemps to do exception with bad value in EXC_RETURN number
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INVSTATE</name>
              <description>
                Attemps to switch to invalid state
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNDEFINSTR</name>
              <description>
                Attemps to execute an undefined instruction
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BFARVALID</name>
              <description>
                Indicates BFAR is valid
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STKERR</name>
              <description>
                Stacking error
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>UNSTKERR</name>
              <description>
                Unstacking error
              </description>
              <bitRange>[11:11]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IMPREISERR</name>
              <description>
                Imprecise data access violation
              </description>
              <bitRange>[10:10]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PREISERR</name>
              <description>
                Precise data access violation
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IBUSERR</name>
              <description>
                Instruction access violation
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MMARVALID</name>
              <description>
                Indicates MMAR is valid
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[6:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MSTKERR</name>
              <description>
                Stacking error
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MUNSTKERR</name>
              <description>
                Unstacking error
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DACCVIOL</name>
              <description>
                data access violation
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IACCVIOL</name>
              <description>
                Instruction access violation
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>HFSR</name>
          <description>
            Read the fault status, write to clear the fault
          </description>
          <addressOffset>0xd2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DEBUGEVT</name>
              <description>
                Indicate hard fault is triggered by debug event
              </description>
              <bitRange>[31:31]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>FORCED</name>
              <description>
                Indicate hard fault is taken because of mm/bus/usage fault
              </description>
              <bitRange>[30:30]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[29:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VECTBL</name>
              <description>
                Indicate hard fault is caused by failed vetor fetch
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                not used
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DFSR</name>
          <description>
            Read the fault status, write to clear the fault
          </description>
          <addressOffset>0xd30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>EXTERNAL</name>
              <description>
                EDBGRQ signal asserted
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>VCATCH</name>
              <description>
                Vector fetch occurred
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DWTTRAP</name>
              <description>
                DWT match occurred
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BKPT</name>
              <description>
                BKPT instruction executed
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HALTED</name>
              <description>
                HALTED requested in NVIC
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>MMAR</name>
          <description>
            memory manage address that caused the fault
          </description>
          <addressOffset>0xd34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>MMAR</name>
              <description>
                Address that cuased memory manage fault
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>BFAR</name>
          <description>
            address that caused bus fault
          </description>
          <addressOffset>0xd38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>BFAR</name>
              <description>
                Address that cuased bus fault
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>STIR</name>
          <description>
            Writing the interrupt number sets the pending bit of the interrupt.
          </description>
          <addressOffset>0xf00</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>INTID</name>
              <description>
                value written is the interrupt number issued
              </description>
              <bitRange>[8:0]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>FLASH_CTLR</name>
      <version>1.0</version>
      <description>
        The flash controller module provides capabilities to erase and program the embedded flash memory storage.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0xE0080000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x400</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>STATUS</name>
          <description>
            Status bits for the Flash Control Module.
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                This bit indicates that the controller is ready to receive write data or that a timer count has reached 0.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>READY</name>
                  <description>
                    The flash controller is ready to receive write data and there is no active timer countdown.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>NOT_READY</name>
                  <description>
                    The flash controller is not ready to receive data or that the timer has not completed a count to 0.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROLEN</name>
          <description>
            Enable/Disable the flash controller to erase or program the embedded flash.
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>KEY</name>
              <description>
                Enable the flash controller to drive the flash instance signals by writing the value 0x5c3a1ec9 to this location. A write of any other value will revert control of the flash signals to the M3.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROL0</name>
          <description>
            Control bits for the Flash Control Module. This register controls the status power states and signal ownership control.
          </description>
          <addressOffset>0x10</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LVEN</name>
              <description>
                Indicates to the Flash Memory whether the voltage range is low (0.81 - 1.08V) or high (1.08 - 1.32V).
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>LOWV</name>
                  <description>
                    The flash is operating in the low voltages range (0.81 - 1.08V).
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>HIGHV</name>
                  <description>
                    The flash is operating in the high voltages range (1.08 - 1.32V).
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROL1</name>
          <description>
            Control bits for the Flash Control Module. This is the primary register used to control signals for program and erase operations.
          </description>
          <addressOffset>0x14</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD6</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:29]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROT_REF_CELL_ERASE</name>
              <description>
                Set to one to tell the flash controller to set the protection enables for a reference cell erase operation.
              </description>
              <bitRange>[28:28]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROT_MASS_ERASE</name>
              <description>
                Set to one to tell the flash controller to set the protection enables for a mass erase operation.
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROT_ERASE</name>
              <description>
                Set to one to tell the flash controller to set the protection enables for an erase operation.
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROT_PROGRAM</name>
              <description>
                Set to one to tell the flash controller to set the protection enables for a program operation
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROT_INFO</name>
              <description>
                Set to one to tell the flash controller to set the protection enables for an INFO page access(erase or program).
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD5</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[23:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TIMEREN</name>
              <description>
                When set to a 1, the Flash Controller Timer will begin counting down from the value written to the Count Register to 0 at 1uS intervals.
              </description>
              <bitRange>[20:20]</bitRange>
              <access>write-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD4</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[19:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>TMR</name>
              <description>
                This bit controls the TMR pin of the embedded flash. It is only used during the Erase Reference Cell operation and should be set to 1 at all other times.
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[15:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NVSTR</name>
              <description>
                This bit controls the NVSTR pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PROG</name>
              <description>
                This bit controls the PROG pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAS1</name>
              <description>
                This bit controls the MAS1 pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ERASE</name>
              <description>
                This bit controls the ERASE pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[7:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IFREN</name>
              <description>
                This bit controls the IFREN pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD0</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SE</name>
              <description>
                This bit controls the SE pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>YE</name>
              <description>
                This bit controls the YE pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>XE</name>
              <description>
                This bit controls the XE pin of the embedded flash. It is set or cleared as required for a particular operation.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>CONTROL2</name>
          <description>
            Control bits for the Flash Redundancy Modes.
          </description>
          <addressOffset>0x18</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IFREN1</name>
              <description>
                This bit enables access to the Flash's Redundant Information Page. NOT USED CURRENTLY
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>ENABLE</name>
                  <description>
                    User can access data in the redundant information page.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>DISABLE</name>
                  <description>
                    User can perform normal memory accesses.
                  </description>
                  <value>0</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>REDEN</name>
              <description>
                This bit enables access to the Flash's Redundant Data Pages. The flash instance supports 2 redundancy pages to improve yield during manufacturing. If utilized, when the user attempts to access a bad page, the REDEN[] bit can be set to allow use of the redundant page. Only one of the 2 bits can be set, the value represents one of two possible redundant pages. NOT CURRENTLY USED
              </description>
              <bitRange>[1:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>NORMAL</name>
                  <description>
                    The regular pages of the array are used for accesses.
                  </description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PAGE0</name>
                  <description>
                    Redundant page0 is accessed rather than the normal page for this address.
                  </description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>PAGE1</name>
                  <description>
                    Redundant page1 is accessed rather than the normal page for this address.
                  </description>
                  <value>2</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>TIMER</name>
          <description>
            20-bit count value which is used by the Flash Controller Timer. The timer counts at 1uS intervals, and the 20b value give us up to 1S of time.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>COUNT</name>
              <description>
                20-bit count value which is loaded into the controller's timer and then counts to 0 at 1uS increments. The value written to this register is retained and can be reused as needed.
              </description>
              <bitRange>[19:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>ADDR</name>
          <description>
            Address of the Flash Memory to write data.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>ADDR</name>
              <description>
                The address of the Flash Memory to use for erase, program, and read operations. This is a byte address, although the flash is only accessible at 32b word boundaries.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA0</name>
          <description>
            32-bits of data[31:0] to be written to or read from the Flash memory.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                32-bits of data[31:0] to be written to or read from the Flash memory.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA1</name>
          <description>
            32-bits of data[63:32] to be written to or read from the Flash memory.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                32-bits of data[63:32] to be written to or read from the Flash memory.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA2</name>
          <description>
            32-bits of data[95:64] to be written to or read from the Flash memory.
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                32-bits of data[95:64] to be written to or read from the Flash memory.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DATA3</name>
          <description>
            32-bits of data[127:96] to be written to or read from the Flash memory.
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                32-bits of data[127:96] to be written to or read from the Flash memory.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
    <peripheral>
      <name>DSPCTRL_M3</name>
      <version>1.0</version>
      <description>
        These registers control the DSP complex.
      </description>
      <groupName>Peripherals</groupName>
      <baseAddress>0x40800000</baseAddress>
      <size>32</size>
      <access>read-write</access>
      <addressBlock>
        <offset>0x0</offset>
        <size>0x20</size>
        <usage>registers</usage>
      </addressBlock>
      <interrupt>
        <name>DSP_M3</name>
        <value>12</value>
        <description>DSP_M3 Interrupt Number</description>
      </interrupt>
      <registers>
        <register>
          <name>DSP_CTRL</name>
          <description>
            DSP Control register
          </description>
          <addressOffset>0x0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_TOGGLE_EN</name>
              <description>
                This is a purely debug feature that effectively emulates a very
fast series of writes to RELEASE_HOLD_PULSE. So by setting this
field (and DSP_CTRL.CORE_HOLD), the DSP will run approximately
1/3 slower and be affected by a series of holds. Useful for
testing responses to unexpected hold cases.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DMS_HOLD_EN</name>
              <description>
                From NXP doc:  Controls the function of the core_hold input. When
dms_hold_en is high, a high on core_hold puts the entire CoolFlux DSP
into the hold state (same as io_hold). When dms_hold_en is low, a high
on core_hold puts the entire CoolFlux DSP except the DMS
block into the hold state; the DMS block remains


John's translation: setting dms_hold_en and core_hold stops everything
and would likely PREVENT PMEM, XMEM, YMEM access.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_INV_PRIO</name>
              <description>
                If set to 1, the DMA and AHB have highest priority access to the
PMEM, XMEM and YMEM. If set to 0, the DSP Core typically has
priority (note the DSP has a timeout capability that can
override this setting).
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CORE_HOLD</name>
              <description>
                Setting this bit places the DSP in hold. To confirm it is in hold,
look at the core_hold_ack bit in the dsp_status. dma_hold_en
affects how this bit is interpreted. Theoretically, setting this
bit and then clearing it should allow the DSP to pause and then
restart.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RESET_DSP</name>
              <description>
                Setting this bit resets most of the DSP Core and holds it in a reset
state. When this is high and the DSP complex is out of reset, the AHB has access
to PMEM, XMEM and YMEM without the DSP attempting to access those
memories.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_STATUS</name>
          <description>
            DSP Status register
          </description>
          <addressOffset>0x4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_RELEASE2_HOLD</name>
              <description>
                Live value of toggle hold enabled by DSP_CTRL.HOLD_TOGGLE_EN. When this bit
is one, the core is in HOLD, while zero the core is running.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>AHB_RELEASE_HOLD</name>
              <description>
                Live value of core_hold_ack from DSP Core. When it is one, the core
is safely in HOLD.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_INIT_HOLD</name>
              <description>
                This bit is set by the DSP when it wants to initiate a hold
(dsp_hold) or by DSP debug logic when it detects a warning in
AHB window control register dsp_status and the
control_status.warn_to_hold is set.  It is cleared by writing a
1 to this location, presumably after debugging is complete. To determine
what initiated the hold, read the DSP IOMEM register CONFIG_STATUS.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CORE_HOLD_ACK</name>
              <description>
                Live value of core_hold_ack from DSP Core. When it is one, the core
is safely in HOLD.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>RELEASE_HOLD_PULSE</name>
          <description>
            This debug register allows for single instruction stepping from the
outside for debug purposes. To use it, first assert core_hold
(DSP_CTRL.CORE_HOLD). Then write any value to this register, which will
cause the core_hold to be temporarily driven low. Note that the logic
waits for core_hold_ack to deassert before it reasserts core_hold,
which should allow for one instruction to complete. This allows for
single instruciton sequences.
          </description>
          <addressOffset>0x8</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>DATA</name>
              <description>
                Any write will pulse HOLD low.
              </description>
              <bitRange>[31:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_SRCRDY_12</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Source Ready.
          </description>
          <addressOffset>0x20</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_SRCRDY_13</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Source Ready.
          </description>
          <addressOffset>0x24</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_SRCRDY_14</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Source Ready.
          </description>
          <addressOffset>0x28</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_SRCRDY_15</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Source Ready.
          </description>
          <addressOffset>0x2c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_DSTRDY_12</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Destination Ready.
          </description>
          <addressOffset>0x30</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_DSTRDY_13</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Destination Ready.
          </description>
          <addressOffset>0x34</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_DSTRDY_14</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Destination Ready.
          </description>
          <addressOffset>0x38</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DMA_DSTRDY_15</name>
          <description>
            CSR bit for DSP DMA engine. Accessible from AHB Slave and DSP IOBUS and useable by DMA as a Destination Ready.
          </description>
          <addressOffset>0x3c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>READY</name>
              <description>
                Write a 1 to mark this as ready.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_LOCKUP_DEBUG</name>
          <description>
            Provides basic information about the current DSP state and possible sources of lockups.
          </description>
          <addressOffset>0x40</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:28]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CORE_HOLD_DMATIMEOUT</name>
              <description>
                core_hold_dmatimeout
              </description>
              <bitRange>[27:27]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOP_EN</name>
              <description>
                loop_en
              </description>
              <bitRange>[26:26]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>BREAK_OUT</name>
              <description>
                break_out
              </description>
              <bitRange>[25:25]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>LOOP_OVERFLOW</name>
              <description>
                loop_overflow
              </description>
              <bitRange>[24:24]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HALT_ACK</name>
              <description>
                halt_ack
              </description>
              <bitRange>[23:23]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DMS_HOLD_EN</name>
              <description>
                dms_hold_en
              </description>
              <bitRange>[22:22]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMEM_CS_CF</name>
              <description>
                pmem_cs_cf
              </description>
              <bitRange>[21:21]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>GARBAGE</name>
              <description>
                garbage(reads are unknown)
              </description>
              <bitRange>[20:20]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_DATA_RDDATA_SPI_HOLD</name>
              <description>
                io_data_rddata_spi_hold
              </description>
              <bitRange>[19:19]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_DATA_RDDATA_I2C_HOLD</name>
              <description>
                io_data_rddata_i2c_hold
              </description>
              <bitRange>[18:18]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_I2S_HOLD</name>
              <description>
                io_i2s_hold
              </description>
              <bitRange>[17:17]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_DATA_RDDATA_AHB_WINDOW_HOLD</name>
              <description>
                io_data_rddata_ahb_window_hold
              </description>
              <bitRange>[16:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>STOP_ACK_REG</name>
              <description>
                stop_ack_reg
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CORE_HOLD_ACK</name>
              <description>
                core_hold_ack
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_SLAVE_HOLD</name>
              <description>
                io_slave_hold
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>PMEM_A_CF</name>
              <description>
                pmem_a_cf
              </description>
              <bitRange>[12:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_STACK_DEBUG1</name>
          <description>
            Provides information about Maximum Stack Used. Setup by DSP, but readable from both DSP and M3.
          </description>
          <addressOffset>0x44</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MAX_STACK_ADDR</name>
              <description>
                Read only register that indicates the maximum stack address used.
Since stack starts at address 0, this should indicate the max stack used.
Note this is expressed as halfwords (2 bytes).
              </description>
              <bitRange>[14:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>DSP_HOLD_DEBUG0</name>
          <description>
            Controls for measuring how much time core spends in hold waiting for peripheral to respond.
          </description>
          <addressOffset>0x48</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RESET</name>
              <description>
                If 1, places HOLD_COUNT logic in reset. Set to 0 to start counting holds.
Note, this can be writte or read from DSPCTRL_DSP or DSPCTRL_M3.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[14:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HOLD_COUNT</name>
              <description>
                Records the max number of holds detected in 256 clock cycle sample time. Holds can be due to
peripherals (including DMA access to peripherals) or other mechianms like
WARN signals or CSR holds. Counts both HOLD and HOLD_ACK signals. Hyper technicality, the real
number is (1+HOLD_COUNT) over 257 cycles since a hold starts the counter.
              </description>
              <bitRange>[7:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>READONLY_DSP_CONFIG_STATUS</name>
          <description>
            This is a read only copy of the DSP Config status register intended to provide M3 access if the DSP is in hold.
          </description>
          <addressOffset>0x4c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD3</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:16]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>IO_CMD_IN_PROG</name>
              <description>
                If 1, there are transactions (read or write) ongoing on the AHB
Window interface.  By polling this bit for a zero and ensuring no DMA
traffic is active, the processor can determine when it can change
the AHB window(s) without affecting in flight transactions.
              </description>
              <bitRange>[15:15]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WARN_BAD_AHB_RESP</name>
              <description>
                This is a read-only copy of a DSP WARNING bit.
If warn_to_hold is set, this can cause a DSP hold event.
This is a sticky bit that collects all nonzero AHB responses and stores it
here. AHB non-zero responses are generally errors. We do not track the specific
command that resulted in the error. These errors should generally be rare are
are most often the result of a bad address.
The sticky bit can be cleared by writing a 1 the corresponding location
in the DSP register CONFIG_STATUS (after clearing any holds)
              </description>
              <bitRange>[14:14]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>WARN_DSP2AHB_OOO</name>
              <description>
                This is a read-only copy of a DSP WARNING bit.
If warn_to_hold is set, this can cause a DSP hold
event. This is a sticky bit indicating that a DSP client (DSP Core or
DMA Channel) did not follow the prescribed write sequence described in
the DSP User Guide under "32 bit Write Accesses", that is, it did not
write an even address followed by an odd address (or reversed if
START_HALFWORD is set).
The sticky bit can be cleared by writing a 1 the corresponding location
in the DSP register CONFIG_STATUS (after clearing any holds)
              </description>
              <bitRange>[13:13]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>NESTED_LOOP_OFLOW</name>
              <description>
                This is a read-only copy of a DSP WARNING bit.
If warn_to_hold is set, this can cause a DSP hold
event. This is a sticky bit indicating that the DSP Core Nested Loop HW has
suffered an overflow.
The sticky bit can be cleared by writing a 1 the corresponding location
in the DSP register CONFIG_STATUS (after clearing any holds)
              </description>
              <bitRange>[12:12]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD2</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[11:10]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_SPI_CLK_ON</name>
              <description>
                If 0, the 8MHz clock to the SPI is only enabled once the local SM determines
it is needed. This is the lowest power setting, but requires some spin up
time for every DMA or DSP Core access (typically ~500-625ns). If 1, the 8MHz
clock is always running, which is higher power but quicker response time.
              </description>
              <bitRange>[9:9]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DSP_I2C_CLK_ON</name>
              <description>
                If 0, the 8MHz clock to the I2C is only enabled once the local SM determines
it is needed. This is the lowest power setting, but requires some spin up
time for every DMA or DSP Core access (typically ~500-625ns). If 1, the 8MHz
clock is always running, which is higher power but quicker response time.
              </description>
              <bitRange>[8:8]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>ANY_WR_INV_CACHE</name>
              <description>
                Normally, the cache is invalidated by a write to the cache line.
If this bit is set, any write will invalidate the cache line. This may be
useful if a write changes the data (e.g. popping a FIFO), but if set the
read cache may be disabled (or less effective) on a M3 to M3 DMA transfer.
              </description>
              <bitRange>[7:7]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>MODULO_FIX_DISABLE</name>
              <description>
                If this bit is set, it disables the Modulo Fix which doubles the
number of nested loops. This is intended as a debug bit and it
has no functional use.
              </description>
              <bitRange>[6:6]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DMA_BYTE_ACC_DISABLE</name>
              <description>
                If this bit is set, it disables the DMA byte access functionality. This is
intended as a debug bit and it has no functional use.
              </description>
              <bitRange>[5:5]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>RSVD1</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[4:4]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>START_HALFWORD</name>
              <description>
                This bit controls when the AHB command is issued on the AHB Window bus. Typically this bit is set
the same as halfword_endian.
0 - AHB write begins when odd address is written.
1 - AHB write begins when even address is written.
              </description>
              <bitRange>[3:3]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>CACHE_DISABLE</name>
              <description>
                If set to 1, it disables the 16 bit halfword cache. This will cause every 16 bit read to result
in a 32 bit read on the AHB bus.
              </description>
              <bitRange>[2:2]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>DONT_WAIT</name>
              <description>
                Debug option that causes every 16 bit write on the DSP to result in a
16 bit access on the 32 bit AHB Window bus with HSIZE indicating it is
a 2 byte access.
              </description>
              <bitRange>[1:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>HALFWORD_ENDIAN</name>
              <description>
                This bit swaps the endianness of 16 bit halfwords as they appear on the AHB bus and which DSP
write starts the AHB write. Typically this bit is set the same as halfword_endian.
0 - DSP data appears on AHB Window bus[31:0]={odd_data, even_data}
1 - DSP data appears on AHB Window bus[31:0]={even_data, odd_data}
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEMAPHORE0</name>
          <description>
            The semaphores are implemented to provide a mechanism for coordination
between the DSP Core and any other AHB Masters accessing the IOMEM
space. The intent of the semaphores was to arbitrate usage of the DMA
Channels, but the semaphores are general purpose and be used as FW
sees fit.

To reserve a semaphore, read the register. If it is a zero, the
accessing client has just grabbed the semaphore. Future reads by any
client will show this bit to be a 1. Once a client is done with the
semaphore, it can release it by writing a 1 to the bit location.

Note that any client can release any semaphore reserved by any other
client.
          </description>
          <addressOffset>0x21030</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEMAPHORE</name>
              <description>
                See register description for details.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEMAPHORE1</name>
          <description>
            The semaphores are implemented to provide a mechanism for coordination
between the DSP Core and any other AHB Masters accessing the IOMEM
space. The intent of the semaphores was to arbitrate usage of the DMA
Channels, but the semaphores are general purpose and be used as FW
sees fit.

To reserve a semaphore, read the register. If it is a zero, the
accessing client has just grabbed the semaphore. Future reads by any
client will show this bit to be a 1. Once a client is done with the
semaphore, it can release it by writing a 1 to the bit location.

Note that any client can release any semaphore reserved by any other
client.
          </description>
          <addressOffset>0x21034</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEMAPHORE</name>
              <description>
                See register description for details.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEMAPHORE2</name>
          <description>
            The semaphores are implemented to provide a mechanism for coordination
between the DSP Core and any other AHB Masters accessing the IOMEM
space. The intent of the semaphores was to arbitrate usage of the DMA
Channels, but the semaphores are general purpose and be used as FW
sees fit.

To reserve a semaphore, read the register. If it is a zero, the
accessing client has just grabbed the semaphore. Future reads by any
client will show this bit to be a 1. Once a client is done with the
semaphore, it can release it by writing a 1 to the bit location.

Note that any client can release any semaphore reserved by any other
client.
          </description>
          <addressOffset>0x21038</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEMAPHORE</name>
              <description>
                See register description for details.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
        <register>
          <name>SEMAPHORE3</name>
          <description>
            The semaphores are implemented to provide a mechanism for coordination
between the DSP Core and any other AHB Masters accessing the IOMEM
space. The intent of the semaphores was to arbitrate usage of the DMA
Channels, but the semaphores are general purpose and be used as FW
sees fit.

To reserve a semaphore, read the register. If it is a zero, the
accessing client has just grabbed the semaphore. Future reads by any
client will show this bit to be a 1. Once a client is done with the
semaphore, it can release it by writing a 1 to the bit location.

Note that any client can release any semaphore reserved by any other
client.
          </description>
          <addressOffset>0x2103c</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0x00000000</resetValue>
          <resetMask>0xFFFFFFFF</resetMask>
          <fields>
            <field>
              <name>RSVD</name>
              <description>
                Always write zero to reserved bit fields.
              </description>
              <bitRange>[31:1]</bitRange>
              <access>read-only</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
            <field>
              <name>SEMAPHORE</name>
              <description>
                See register description for details.
              </description>
              <bitRange>[0:0]</bitRange>
              <access>read-write</access>
              <enumeratedValues>
              </enumeratedValues>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>
